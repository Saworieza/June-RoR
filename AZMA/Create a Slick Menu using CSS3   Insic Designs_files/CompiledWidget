!function(exports, global) {
    global["true"] = exports, function() {
        PureChat = function(socketUrl, userId, domainId, authToken, identifyStatus, errorStatus, restrictTransports, poppedOut) {
            function registerHandler(type) {
                t.socket.on(type, function(args) {
                    callCallback[type] && callCallback[type].call(t, args);
                });
            }
            var t = this;
            this.currentUserId = userId, this.currentDomainId = domainId, this.currentAuthToken = authToken, 
            this.poppedOut = poppedOut, null !== restrictTransports && restrictTransports || (io.transports = [ "websocket", "flashsocket" ]);
            var socketConfig = {
                "reconnection limit": 15e3,
                "max reconnection attempts": 1/0
            };
            this.socket = io.connect(socketUrl, socketConfig), this.socket.socket.connecting || this.socket.socket.reconnect(), 
            this.callbacks = {
                message: null,
                joined: null,
                left: null,
                roomdestroyed: null
            }, this.messageQueue = [], registerHandler("message"), registerHandler("joined"), 
            registerHandler("left"), registerHandler("roomdestroyed"), registerHandler("typing"), 
            registerHandler("reidentify"), registerHandler("userdeleted"), this.socket.on("connect", function() {
                t.identify(t.currentUserId, t.currentDomainId, t.currentAuthToken, identifyStatus, t.poppedOut);
            }), this.socket.on("disconnect", function() {}), errorStatus && this.socket.on("error", errorStatus);
        }, PureChat.prototype.disconnect = function() {
            this.socket.disconnect(), this.socket.socket.disconnect(), this.socket.removeAllListeners(), 
            this.socket = null;
        }, PureChat.prototype.identify = function(userId, domainId, authToken, status) {
            this.currentUserId = userId, this.currentDomainId = domainId, this.currentAuthToken = authToken, 
            this.deviceType = PureChat.enums.deviceType.desktop, this.socket.emit("identify", {
                userId: this.currentUserId,
                domainId: this.currentDomainId,
                authToken: this.currentAuthToken,
                deviceType: this.deviceType,
                deviceVersion: PureChat.deviceVersion,
                poppedOut: this.poppedOut
            }, status);
        }, PureChat.prototype.sendmessage = function(message, roomId, status) {
            this.socket.emit("sendmessage", {
                message: message,
                roomId: roomId
            }, status);
        }, PureChat.prototype.sendtyping = function(roomId, isTyping, statusCallback) {
            this.socket.emit("sendtyping", {
                roomId: roomId,
                isTyping: isTyping
            }, statusCallback);
        }, PureChat.prototype.destroyself = function(status) {
            this.socket.emit("destroyself", status);
        }, PureChat.prototype.join = function(roomId, invisible, status) {
            this.socket.emit("join", {
                roomId: roomId,
                invisible: invisible
            }, status);
        }, PureChat.prototype.leave = function(roomId, status) {
            this.socket.emit("leave", {
                roomId: roomId
            }, status);
        }, PureChat.prototype.closeroom = function(roomId, status) {
            this.socket.emit("closeroom", {
                roomId: roomId
            }, status);
        }, PureChat.prototype.createoperatorroom = function(roomName, otherUserIds, status) {
            this.socket.emit("createoperatorroom", {
                roomName: roomName,
                otherUserIds: otherUserIds
            }, status);
        }, PureChat.prototype.sendcurrentstate = function(status) {
            this.socket.emit("sendcurrentstate", {}, status);
        }, PureChat.prototype.getuser = function(status) {
            this.socket.emit("getuser", status);
        }, PureChat.prototype.getusers = function(status) {
            this.socket.emit("getusers", status);
        }, PureChat.prototype.sendroomhistory = function(roomId, status) {
            this.socket.emit("sendroomhistory", {
                roomId: roomId
            }, status);
        }, PureChat.prototype.setavailable = function(userId, connectionId, available, statusCallback) {
            this.socket.emit("setavailable", {
                userId: userId,
                connectionId: connectionId,
                available: available
            }, statusCallback);
        }, PureChat.prototype.forcedisconnect = function(userId, connectionId, statusCallback) {
            this.socket.emit("forcedisconnect", {
                userId: userId,
                connectionId: connectionId
            }, statusCallback);
        }, PureChat.deviceVersion = 1, PureChat.enums = {
            deviceType: {
                desktop: 0,
                ios: 1
            },
            roomType: {
                account: 0,
                operator: 1,
                visitor: 2
            }
        };
        var callCallback = {
            message: function(args) {
                var escapedUserDisplayName = args.userDisplayName.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), escapedRoomDisplayName = args.roomDisplayName.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), escapedMessage = args.message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                this.trigger("message", args.userId, escapedUserDisplayName, args.roomId, escapedRoomDisplayName, args.time, escapedMessage, args.isHistory, args.timeElapsed);
            },
            joined: function(args) {
                var escapedUserDisplayName = args.userDisplayName.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), escapedRoomDisplayName = args.roomDisplayName.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                this.trigger("joined", args.userId, escapedUserDisplayName, args.roomId, escapedRoomDisplayName, args.time, args.isHistory);
            },
            left: function(args) {
                var escapedUserDisplayName = args.userDisplayName.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), escapedRoomDisplayName = args.roomDisplayName.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                this.trigger("left", args.userId, escapedUserDisplayName, args.roomId, escapedRoomDisplayName, args.time, args.isHistory);
            },
            roomdestroyed: function(args) {
                var escapedRoomDisplayName = args.roomDisplayName.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                this.trigger("roomdestroyed", args.roomId, escapedRoomDisplayName, args.time);
            },
            typing: function(args) {
                var escapedUserDisplayName = args.userDisplayName.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                args.roomDisplayName.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), 
                this.trigger("typing", args.userId, escapedUserDisplayName, args.roomId, args.roomDisplayName, args.isTyping, args.time);
            },
            reidentify: function(args) {
                this.trigger("reidentify", args);
            },
            userdeleted: function(args) {
                this.trigger("userdeleted", args);
            }
        }, array = [];
        array.push;
        var slice = array.slice;
        array.splice, PureChat.prototype.on = function(name, callback, context) {
            if (!eventsApi(this, "on", name, [ callback, context ]) || !callback) return this;
            this._events || (this._events = {});
            var events = this._events[name] || (this._events[name] = []);
            return events.push({
                callback: callback,
                context: context,
                ctx: context || this
            }), this;
        }, PureChat.prototype.once = function(name, callback, context) {
            if (!eventsApi(this, "once", name, [ callback, context ]) || !callback) return this;
            var self = this, once = _.once(function() {
                self.off(name, once), callback.apply(this, arguments);
            });
            return once._callback = callback, this.on(name, once, context);
        }, PureChat.prototype.off = function(name, callback, context) {
            var retain, ev, events, names, i, l, j, k;
            if (!this._events || !eventsApi(this, "off", name, [ callback, context ])) return this;
            if (!name && !callback && !context) return this._events = void 0, this;
            for (names = name ? [ name ] : _.keys(this._events), i = 0, l = names.length; l > i; i++) if (name = names[i], 
            events = this._events[name]) {
                if (this._events[name] = retain = [], callback || context) for (j = 0, k = events.length; k > j; j++) ev = events[j], 
                (callback && callback !== ev.callback && callback !== ev.callback._callback || context && context !== ev.context) && retain.push(ev);
                retain.length || delete this._events[name];
            }
            return this;
        }, PureChat.prototype.trigger = function(name) {
            if (!this._events) return this;
            var args = slice.call(arguments, 1);
            if (!eventsApi(this, "trigger", name, args)) return this;
            var events = this._events[name], allEvents = this._events.all;
            return events && triggerEvents(events, args), allEvents && triggerEvents(allEvents, arguments), 
            this;
        }, PureChat.prototype.stopListening = function(obj, name, callback) {
            var listeningTo = this._listeningTo;
            if (!listeningTo) return this;
            var remove = !name && !callback;
            callback || "object" != typeof name || (callback = this), obj && ((listeningTo = {})[obj._listenId] = obj);
            for (var id in listeningTo) obj = listeningTo[id], obj.off(name, callback, this), 
            (remove || _.isEmpty(obj._events)) && delete this._listeningTo[id];
            return this;
        };
        var eventSplitter = /\s+/, eventsApi = function(obj, action, name, rest) {
            if (!name) return !0;
            if ("object" == typeof name) {
                for (var key in name) obj[action].apply(obj, [ key, name[key] ].concat(rest));
                return !1;
            }
            if (eventSplitter.test(name)) {
                for (var names = name.split(eventSplitter), i = 0, l = names.length; l > i; i++) obj[action].apply(obj, [ names[i] ].concat(rest));
                return !1;
            }
            return !0;
        }, triggerEvents = function(events, args) {
            var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
            switch (args.length) {
              case 0:
                for (;++i < l; ) (ev = events[i]).callback.call(ev.ctx);
                return;

              case 1:
                for (;++i < l; ) (ev = events[i]).callback.call(ev.ctx, a1);
                return;

              case 2:
                for (;++i < l; ) (ev = events[i]).callback.call(ev.ctx, a1, a2);
                return;

              case 3:
                for (;++i < l; ) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
                return;

              default:
                for (;++i < l; ) (ev = events[i]).callback.apply(ev.ctx, args);
            }
        };
    }(), exports = void 0;
    var global$ = window.$, $ = window.$pureChatJquery, purechatSpinner = {};
    !function(root, factory) {
        root.Spinner = factory();
    }(purechatSpinner, function() {
        "use strict";
        function createEl(tag, prop) {
            var n, el = document.createElement(tag || "div");
            for (n in prop) el[n] = prop[n];
            return el;
        }
        function ins(parent) {
            for (var i = 1, n = arguments.length; n > i; i++) parent.appendChild(arguments[i]);
            return parent;
        }
        function addAnimation(alpha, trail, i, lines) {
            var name = [ "opacity", trail, ~~(100 * alpha), i, lines ].join("-"), start = .01 + 100 * (i / lines), z = Math.max(1 - (1 - alpha) / trail * (100 - start), alpha), prefix = useCssAnimations.substring(0, useCssAnimations.indexOf("Animation")).toLowerCase(), pre = prefix && "-" + prefix + "-" || "";
            return animations[name] || (sheet.insertRule("@" + pre + "keyframes " + name + "{" + "0%{opacity:" + z + "}" + start + "%{opacity:" + alpha + "}" + (start + .01) + "%{opacity:1}" + (start + trail) % 100 + "%{opacity:" + alpha + "}" + "100%{opacity:" + z + "}" + "}", sheet.cssRules.length), 
            animations[name] = 1), name;
        }
        function vendor(el, prop) {
            var pp, i, s = el.style;
            if (void 0 !== s[prop]) return prop;
            for (prop = prop.charAt(0).toUpperCase() + prop.slice(1), i = 0; i < prefixes.length; i++) if (pp = prefixes[i] + prop, 
            void 0 !== s[pp]) return pp;
        }
        function css(el, prop) {
            for (var n in prop) el.style[vendor(el, n) || n] = prop[n];
            return el;
        }
        function merge(obj) {
            for (var i = 1; i < arguments.length; i++) {
                var def = arguments[i];
                for (var n in def) void 0 === obj[n] && (obj[n] = def[n]);
            }
            return obj;
        }
        function pos(el) {
            for (var o = {
                x: el.offsetLeft,
                y: el.offsetTop
            }; el = el.offsetParent; ) o.x += el.offsetLeft, o.y += el.offsetTop;
            return o;
        }
        function Spinner(o) {
            return "undefined" == typeof this ? new Spinner(o) : (this.opts = merge(o || {}, Spinner.defaults, defaults), 
            void 0);
        }
        function initVML() {
            function vml(tag, attr) {
                return createEl("<" + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', attr);
            }
            sheet.addRule(".spin-vml", "behavior:url(#default#VML)"), Spinner.prototype.lines = function(el, o) {
                function grp() {
                    return css(vml("group", {
                        coordsize: s + " " + s,
                        coordorigin: -r + " " + -r
                    }), {
                        width: s,
                        height: s
                    });
                }
                function seg(i, dx, filter) {
                    ins(g, ins(css(grp(), {
                        rotation: 360 / o.lines * i + "deg",
                        left: ~~dx
                    }), ins(css(vml("roundrect", {
                        arcsize: o.corners
                    }), {
                        width: r,
                        height: o.width,
                        left: o.radius,
                        top: -o.width >> 1,
                        filter: filter
                    }), vml("fill", {
                        color: o.color,
                        opacity: o.opacity
                    }), vml("stroke", {
                        opacity: 0
                    }))));
                }
                var i, r = o.length + o.width, s = 2 * r, margin = 2 * -(o.width + o.length) + "px", g = css(grp(), {
                    position: "absolute",
                    top: margin,
                    left: margin
                });
                if (o.shadow) for (i = 1; i <= o.lines; i++) seg(i, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");
                for (i = 1; i <= o.lines; i++) seg(i);
                return ins(el, g);
            }, Spinner.prototype.opacity = function(el, i, val, o) {
                var c = el.firstChild;
                o = o.shadow && o.lines || 0, c && i + o < c.childNodes.length && (c = c.childNodes[i + o], 
                c = c && c.firstChild, c = c && c.firstChild, c && (c.opacity = val));
            };
        }
        var useCssAnimations, prefixes = [ "webkit", "Moz", "ms", "O" ], animations = {}, sheet = function() {
            var el = createEl("style", {
                type: "text/css"
            });
            return ins(document.getElementsByTagName("head")[0], el), el.sheet || el.styleSheet;
        }(), defaults = {
            lines: 12,
            length: 7,
            width: 5,
            radius: 10,
            rotate: 0,
            corners: 1,
            color: "#000",
            direction: 1,
            speed: 1,
            trail: 100,
            opacity: .25,
            fps: 20,
            zIndex: 2e9,
            className: "spinner",
            top: "auto",
            left: "auto",
            position: "relative"
        };
        Spinner.defaults = {}, merge(Spinner.prototype, {
            spin: function(target) {
                this.stop();
                var ep, tp, self = this, o = self.opts, el = self.el = css(createEl(0, {
                    className: o.className
                }), {
                    position: o.position,
                    width: 0,
                    zIndex: o.zIndex
                }), mid = o.radius + o.length + o.width;
                if (target && (target.insertBefore(el, target.firstChild || null), tp = pos(target), 
                ep = pos(el), css(el, {
                    left: ("auto" == o.left ? tp.x - ep.x + (target.offsetWidth >> 1) : parseInt(o.left, 10) + mid) + "px",
                    top: ("auto" == o.top ? tp.y - ep.y + (target.offsetHeight >> 1) : parseInt(o.top, 10) + mid) + "px"
                })), el.setAttribute("role", "progressbar"), self.lines(el, self.opts), !useCssAnimations) {
                    var alpha, i = 0, start = (o.lines - 1) * (1 - o.direction) / 2, fps = o.fps, f = fps / o.speed, ostep = (1 - o.opacity) / (f * o.trail / 100), astep = f / o.lines;
                    !function anim() {
                        i++;
                        for (var j = 0; j < o.lines; j++) alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity), 
                        self.opacity(el, j * o.direction + start, alpha, o);
                        self.timeout = self.el && setTimeout(anim, ~~(1e3 / fps));
                    }();
                }
                return self;
            },
            stop: function() {
                var el = this.el;
                return el && (clearTimeout(this.timeout), el.parentNode && el.parentNode.removeChild(el), 
                this.el = void 0), this;
            },
            lines: function(el, o) {
                function fill(color, shadow) {
                    return css(createEl(), {
                        position: "absolute",
                        width: o.length + o.width + "px",
                        height: o.width + "px",
                        background: color,
                        boxShadow: shadow,
                        transformOrigin: "left",
                        transform: "rotate(" + ~~(360 / o.lines * i + o.rotate) + "deg) translate(" + o.radius + "px" + ",0)",
                        borderRadius: (o.corners * o.width >> 1) + "px"
                    });
                }
                for (var seg, i = 0, start = (o.lines - 1) * (1 - o.direction) / 2; i < o.lines; i++) seg = css(createEl(), {
                    position: "absolute",
                    top: 1 + ~(o.width / 2) + "px",
                    transform: o.hwaccel ? "translate3d(0,0,0)" : "",
                    opacity: o.opacity,
                    animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + " " + 1 / o.speed + "s linear infinite"
                }), o.shadow && ins(seg, css(fill("#000", "0 0 4px #000"), {
                    top: "2px"
                })), ins(el, ins(seg, fill(o.color, "0 0 1px rgba(0,0,0,.1)")));
                return el;
            },
            opacity: function(el, i, val) {
                i < el.childNodes.length && (el.childNodes[i].style.opacity = val);
            }
        });
        var probe = css(createEl("group"), {
            behavior: "url(#default#VML)"
        });
        return !vendor(probe, "transform") && probe.adj ? initVML() : useCssAnimations = vendor(probe, "animation"), 
        Spinner;
    }), function() {
        var n = this, t = n._, r = {}, e = Array.prototype, u = Object.prototype, i = Function.prototype, a = e.push, o = e.slice, c = e.concat, l = u.toString, f = u.hasOwnProperty, s = e.forEach, p = e.map, h = e.reduce, v = e.reduceRight, d = e.filter, g = e.every, m = e.some, y = e.indexOf, b = e.lastIndexOf, x = Array.isArray, _ = Object.keys, j = i.bind, w = function(n) {
            return n instanceof w ? n : this instanceof w ? (this._wrapped = n, void 0) : new w(n);
        };
        "undefined" != typeof exports ? ("undefined" != typeof module && module.exports && (exports = module.exports = w), 
        exports._ = w) : n._ = w, w.VERSION = "1.4.4";
        var A = w.each = w.forEach = function(n, t, e) {
            if (null != n) if (s && n.forEach === s) n.forEach(t, e); else if (n.length === +n.length) {
                for (var u = 0, i = n.length; i > u; u++) if (t.call(e, n[u], u, n) === r) return;
            } else for (var a in n) if (w.has(n, a) && t.call(e, n[a], a, n) === r) return;
        };
        w.map = w.collect = function(n, t, r) {
            var e = [];
            return null == n ? e : p && n.map === p ? n.map(t, r) : (A(n, function(n, u, i) {
                e[e.length] = t.call(r, n, u, i);
            }), e);
        };
        var O = "Reduce of empty array with no initial value";
        w.reduce = w.foldl = w.inject = function(n, t, r, e) {
            var u = arguments.length > 2;
            if (null == n && (n = []), h && n.reduce === h) return e && (t = w.bind(t, e)), 
            u ? n.reduce(t, r) : n.reduce(t);
            if (A(n, function(n, i, a) {
                u ? r = t.call(e, r, n, i, a) : (r = n, u = !0);
            }), !u) throw new TypeError(O);
            return r;
        }, w.reduceRight = w.foldr = function(n, t, r, e) {
            var u = arguments.length > 2;
            if (null == n && (n = []), v && n.reduceRight === v) return e && (t = w.bind(t, e)), 
            u ? n.reduceRight(t, r) : n.reduceRight(t);
            var i = n.length;
            if (i !== +i) {
                var a = w.keys(n);
                i = a.length;
            }
            if (A(n, function(o, c, l) {
                c = a ? a[--i] : --i, u ? r = t.call(e, r, n[c], c, l) : (r = n[c], u = !0);
            }), !u) throw new TypeError(O);
            return r;
        }, w.find = w.detect = function(n, t, r) {
            var e;
            return E(n, function(n, u, i) {
                return t.call(r, n, u, i) ? (e = n, !0) : void 0;
            }), e;
        }, w.filter = w.select = function(n, t, r) {
            var e = [];
            return null == n ? e : d && n.filter === d ? n.filter(t, r) : (A(n, function(n, u, i) {
                t.call(r, n, u, i) && (e[e.length] = n);
            }), e);
        }, w.reject = function(n, t, r) {
            return w.filter(n, function(n, e, u) {
                return !t.call(r, n, e, u);
            }, r);
        }, w.every = w.all = function(n, t, e) {
            t || (t = w.identity);
            var u = !0;
            return null == n ? u : g && n.every === g ? n.every(t, e) : (A(n, function(n, i, a) {
                return (u = u && t.call(e, n, i, a)) ? void 0 : r;
            }), !!u);
        };
        var E = w.some = w.any = function(n, t, e) {
            t || (t = w.identity);
            var u = !1;
            return null == n ? u : m && n.some === m ? n.some(t, e) : (A(n, function(n, i, a) {
                return u || (u = t.call(e, n, i, a)) ? r : void 0;
            }), !!u);
        };
        w.contains = w.include = function(n, t) {
            return null == n ? !1 : y && n.indexOf === y ? -1 != n.indexOf(t) : E(n, function(n) {
                return n === t;
            });
        }, w.invoke = function(n, t) {
            var r = o.call(arguments, 2), e = w.isFunction(t);
            return w.map(n, function(n) {
                return (e ? t : n[t]).apply(n, r);
            });
        }, w.pluck = function(n, t) {
            return w.map(n, function(n) {
                return n[t];
            });
        }, w.where = function(n, t, r) {
            return w.isEmpty(t) ? r ? null : [] : w[r ? "find" : "filter"](n, function(n) {
                for (var r in t) if (t[r] !== n[r]) return !1;
                return !0;
            });
        }, w.findWhere = function(n, t) {
            return w.where(n, t, !0);
        }, w.max = function(n, t, r) {
            if (!t && w.isArray(n) && n[0] === +n[0] && 65535 > n.length) return Math.max.apply(Math, n);
            if (!t && w.isEmpty(n)) return -1 / 0;
            var e = {
                computed: -1 / 0,
                value: -1 / 0
            };
            return A(n, function(n, u, i) {
                var a = t ? t.call(r, n, u, i) : n;
                a >= e.computed && (e = {
                    value: n,
                    computed: a
                });
            }), e.value;
        }, w.min = function(n, t, r) {
            if (!t && w.isArray(n) && n[0] === +n[0] && 65535 > n.length) return Math.min.apply(Math, n);
            if (!t && w.isEmpty(n)) return 1 / 0;
            var e = {
                computed: 1 / 0,
                value: 1 / 0
            };
            return A(n, function(n, u, i) {
                var a = t ? t.call(r, n, u, i) : n;
                e.computed > a && (e = {
                    value: n,
                    computed: a
                });
            }), e.value;
        }, w.shuffle = function(n) {
            var t, r = 0, e = [];
            return A(n, function(n) {
                t = w.random(r++), e[r - 1] = e[t], e[t] = n;
            }), e;
        };
        var k = function(n) {
            return w.isFunction(n) ? n : function(t) {
                return t[n];
            };
        };
        w.sortBy = function(n, t, r) {
            var e = k(t);
            return w.pluck(w.map(n, function(n, t, u) {
                return {
                    value: n,
                    index: t,
                    criteria: e.call(r, n, t, u)
                };
            }).sort(function(n, t) {
                var r = n.criteria, e = t.criteria;
                if (r !== e) {
                    if (r > e || void 0 === r) return 1;
                    if (e > r || void 0 === e) return -1;
                }
                return n.index < t.index ? -1 : 1;
            }), "value");
        };
        var F = function(n, t, r, e) {
            var u = {}, i = k(t || w.identity);
            return A(n, function(t, a) {
                var o = i.call(r, t, a, n);
                e(u, o, t);
            }), u;
        };
        w.groupBy = function(n, t, r) {
            return F(n, t, r, function(n, t, r) {
                (w.has(n, t) ? n[t] : n[t] = []).push(r);
            });
        }, w.countBy = function(n, t, r) {
            return F(n, t, r, function(n, t) {
                w.has(n, t) || (n[t] = 0), n[t]++;
            });
        }, w.sortedIndex = function(n, t, r, e) {
            r = null == r ? w.identity : k(r);
            for (var u = r.call(e, t), i = 0, a = n.length; a > i; ) {
                var o = i + a >>> 1;
                u > r.call(e, n[o]) ? i = o + 1 : a = o;
            }
            return i;
        }, w.toArray = function(n) {
            return n ? w.isArray(n) ? o.call(n) : n.length === +n.length ? w.map(n, w.identity) : w.values(n) : [];
        }, w.size = function(n) {
            return null == n ? 0 : n.length === +n.length ? n.length : w.keys(n).length;
        }, w.first = w.head = w.take = function(n, t, r) {
            return null == n ? void 0 : null == t || r ? n[0] : o.call(n, 0, t);
        }, w.initial = function(n, t, r) {
            return o.call(n, 0, n.length - (null == t || r ? 1 : t));
        }, w.last = function(n, t, r) {
            return null == n ? void 0 : null == t || r ? n[n.length - 1] : o.call(n, Math.max(n.length - t, 0));
        }, w.rest = w.tail = w.drop = function(n, t, r) {
            return o.call(n, null == t || r ? 1 : t);
        }, w.compact = function(n) {
            return w.filter(n, w.identity);
        };
        var R = function(n, t, r) {
            return A(n, function(n) {
                w.isArray(n) ? t ? a.apply(r, n) : R(n, t, r) : r.push(n);
            }), r;
        };
        w.flatten = function(n, t) {
            return R(n, t, []);
        }, w.without = function(n) {
            return w.difference(n, o.call(arguments, 1));
        }, w.uniq = w.unique = function(n, t, r, e) {
            w.isFunction(t) && (e = r, r = t, t = !1);
            var u = r ? w.map(n, r, e) : n, i = [], a = [];
            return A(u, function(r, e) {
                (t ? e && a[a.length - 1] === r : w.contains(a, r)) || (a.push(r), i.push(n[e]));
            }), i;
        }, w.union = function() {
            return w.uniq(c.apply(e, arguments));
        }, w.intersection = function(n) {
            var t = o.call(arguments, 1);
            return w.filter(w.uniq(n), function(n) {
                return w.every(t, function(t) {
                    return w.indexOf(t, n) >= 0;
                });
            });
        }, w.difference = function(n) {
            var t = c.apply(e, o.call(arguments, 1));
            return w.filter(n, function(n) {
                return !w.contains(t, n);
            });
        }, w.zip = function() {
            for (var n = o.call(arguments), t = w.max(w.pluck(n, "length")), r = Array(t), e = 0; t > e; e++) r[e] = w.pluck(n, "" + e);
            return r;
        }, w.object = function(n, t) {
            if (null == n) return {};
            for (var r = {}, e = 0, u = n.length; u > e; e++) t ? r[n[e]] = t[e] : r[n[e][0]] = n[e][1];
            return r;
        }, w.indexOf = function(n, t, r) {
            if (null == n) return -1;
            var e = 0, u = n.length;
            if (r) {
                if ("number" != typeof r) return e = w.sortedIndex(n, t), n[e] === t ? e : -1;
                e = 0 > r ? Math.max(0, u + r) : r;
            }
            if (y && n.indexOf === y) return n.indexOf(t, r);
            for (;u > e; e++) if (n[e] === t) return e;
            return -1;
        }, w.lastIndexOf = function(n, t, r) {
            if (null == n) return -1;
            var e = null != r;
            if (b && n.lastIndexOf === b) return e ? n.lastIndexOf(t, r) : n.lastIndexOf(t);
            for (var u = e ? r : n.length; u--; ) if (n[u] === t) return u;
            return -1;
        }, w.range = function(n, t, r) {
            1 >= arguments.length && (t = n || 0, n = 0), r = arguments[2] || 1;
            for (var e = Math.max(Math.ceil((t - n) / r), 0), u = 0, i = Array(e); e > u; ) i[u++] = n, 
            n += r;
            return i;
        }, w.bind = function(n, t) {
            if (n.bind === j && j) return j.apply(n, o.call(arguments, 1));
            var r = o.call(arguments, 2);
            return function() {
                return n.apply(t, r.concat(o.call(arguments)));
            };
        }, w.partial = function(n) {
            var t = o.call(arguments, 1);
            return function() {
                return n.apply(this, t.concat(o.call(arguments)));
            };
        }, w.bindAll = function(n) {
            var t = o.call(arguments, 1);
            return 0 === t.length && (t = w.functions(n)), A(t, function(t) {
                n[t] = w.bind(n[t], n);
            }), n;
        }, w.memoize = function(n, t) {
            var r = {};
            return t || (t = w.identity), function() {
                var e = t.apply(this, arguments);
                return w.has(r, e) ? r[e] : r[e] = n.apply(this, arguments);
            };
        }, w.delay = function(n, t) {
            var r = o.call(arguments, 2);
            return setTimeout(function() {
                return n.apply(null, r);
            }, t);
        }, w.defer = function(n) {
            return w.delay.apply(w, [ n, 1 ].concat(o.call(arguments, 1)));
        }, w.throttle = function(n, t) {
            var r, e, u, i, a = 0, o = function() {
                a = new Date(), u = null, i = n.apply(r, e);
            };
            return function() {
                var c = new Date(), l = t - (c - a);
                return r = this, e = arguments, 0 >= l ? (clearTimeout(u), u = null, a = c, i = n.apply(r, e)) : u || (u = setTimeout(o, l)), 
                i;
            };
        }, w.debounce = function(n, t, r) {
            var e, u;
            return function() {
                var i = this, a = arguments, o = function() {
                    e = null, r || (u = n.apply(i, a));
                }, c = r && !e;
                return clearTimeout(e), e = setTimeout(o, t), c && (u = n.apply(i, a)), u;
            };
        }, w.once = function(n) {
            var t, r = !1;
            return function() {
                return r ? t : (r = !0, t = n.apply(this, arguments), n = null, t);
            };
        }, w.wrap = function(n, t) {
            return function() {
                var r = [ n ];
                return a.apply(r, arguments), t.apply(this, r);
            };
        }, w.compose = function() {
            var n = arguments;
            return function() {
                for (var t = arguments, r = n.length - 1; r >= 0; r--) t = [ n[r].apply(this, t) ];
                return t[0];
            };
        }, w.after = function(n, t) {
            return 0 >= n ? t() : function() {
                return 1 > --n ? t.apply(this, arguments) : void 0;
            };
        }, w.keys = _ || function(n) {
            if (n !== Object(n)) throw new TypeError("Invalid object");
            var t = [];
            for (var r in n) w.has(n, r) && (t[t.length] = r);
            return t;
        }, w.values = function(n) {
            var t = [];
            for (var r in n) w.has(n, r) && t.push(n[r]);
            return t;
        }, w.pairs = function(n) {
            var t = [];
            for (var r in n) w.has(n, r) && t.push([ r, n[r] ]);
            return t;
        }, w.invert = function(n) {
            var t = {};
            for (var r in n) w.has(n, r) && (t[n[r]] = r);
            return t;
        }, w.functions = w.methods = function(n) {
            var t = [];
            for (var r in n) w.isFunction(n[r]) && t.push(r);
            return t.sort();
        }, w.extend = function(n) {
            return A(o.call(arguments, 1), function(t) {
                if (t) for (var r in t) n[r] = t[r];
            }), n;
        }, w.pick = function(n) {
            var t = {}, r = c.apply(e, o.call(arguments, 1));
            return A(r, function(r) {
                r in n && (t[r] = n[r]);
            }), t;
        }, w.omit = function(n) {
            var t = {}, r = c.apply(e, o.call(arguments, 1));
            for (var u in n) w.contains(r, u) || (t[u] = n[u]);
            return t;
        }, w.defaults = function(n) {
            return A(o.call(arguments, 1), function(t) {
                if (t) for (var r in t) null == n[r] && (n[r] = t[r]);
            }), n;
        }, w.clone = function(n) {
            return w.isObject(n) ? w.isArray(n) ? n.slice() : w.extend({}, n) : n;
        }, w.tap = function(n, t) {
            return t(n), n;
        };
        var I = function(n, t, r, e) {
            if (n === t) return 0 !== n || 1 / n == 1 / t;
            if (null == n || null == t) return n === t;
            n instanceof w && (n = n._wrapped), t instanceof w && (t = t._wrapped);
            var u = l.call(n);
            if (u != l.call(t)) return !1;
            switch (u) {
              case "[object String]":
                return n == t + "";

              case "[object Number]":
                return n != +n ? t != +t : 0 == n ? 1 / n == 1 / t : n == +t;

              case "[object Date]":
              case "[object Boolean]":
                return +n == +t;

              case "[object RegExp]":
                return n.source == t.source && n.global == t.global && n.multiline == t.multiline && n.ignoreCase == t.ignoreCase;
            }
            if ("object" != typeof n || "object" != typeof t) return !1;
            for (var i = r.length; i--; ) if (r[i] == n) return e[i] == t;
            r.push(n), e.push(t);
            var a = 0, o = !0;
            if ("[object Array]" == u) {
                if (a = n.length, o = a == t.length) for (;a-- && (o = I(n[a], t[a], r, e)); ) ;
            } else {
                var c = n.constructor, f = t.constructor;
                if (c !== f && !(w.isFunction(c) && c instanceof c && w.isFunction(f) && f instanceof f)) return !1;
                for (var s in n) if (w.has(n, s) && (a++, !(o = w.has(t, s) && I(n[s], t[s], r, e)))) break;
                if (o) {
                    for (s in t) if (w.has(t, s) && !a--) break;
                    o = !a;
                }
            }
            return r.pop(), e.pop(), o;
        };
        w.isEqual = function(n, t) {
            return I(n, t, [], []);
        }, w.isEmpty = function(n) {
            if (null == n) return !0;
            if (w.isArray(n) || w.isString(n)) return 0 === n.length;
            for (var t in n) if (w.has(n, t)) return !1;
            return !0;
        }, w.isElement = function(n) {
            return !(!n || 1 !== n.nodeType);
        }, w.isArray = x || function(n) {
            return "[object Array]" == l.call(n);
        }, w.isObject = function(n) {
            return n === Object(n);
        }, A([ "Arguments", "Function", "String", "Number", "Date", "RegExp" ], function(n) {
            w["is" + n] = function(t) {
                return l.call(t) == "[object " + n + "]";
            };
        }), w.isArguments(arguments) || (w.isArguments = function(n) {
            return !(!n || !w.has(n, "callee"));
        }), "function" != typeof /./ && (w.isFunction = function(n) {
            return "function" == typeof n;
        }), w.isFinite = function(n) {
            return isFinite(n) && !isNaN(parseFloat(n));
        }, w.isNaN = function(n) {
            return w.isNumber(n) && n != +n;
        }, w.isBoolean = function(n) {
            return n === !0 || n === !1 || "[object Boolean]" == l.call(n);
        }, w.isNull = function(n) {
            return null === n;
        }, w.isUndefined = function(n) {
            return void 0 === n;
        }, w.has = function(n, t) {
            return f.call(n, t);
        }, w.noConflict = function() {
            return n._ = t, this;
        }, w.identity = function(n) {
            return n;
        }, w.times = function(n, t, r) {
            for (var e = Array(n), u = 0; n > u; u++) e[u] = t.call(r, u);
            return e;
        }, w.random = function(n, t) {
            return null == t && (t = n, n = 0), n + Math.floor(Math.random() * (t - n + 1));
        };
        var M = {
            escape: {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#x27;",
                "/": "&#x2F;"
            }
        };
        M.unescape = w.invert(M.escape);
        var S = {
            escape: RegExp("[" + w.keys(M.escape).join("") + "]", "g"),
            unescape: RegExp("(" + w.keys(M.unescape).join("|") + ")", "g")
        };
        w.each([ "escape", "unescape" ], function(n) {
            w[n] = function(t) {
                return null == t ? "" : ("" + t).replace(S[n], function(t) {
                    return M[n][t];
                });
            };
        }), w.result = function(n, t) {
            if (null == n) return null;
            var r = n[t];
            return w.isFunction(r) ? r.call(n) : r;
        }, w.mixin = function(n) {
            A(w.functions(n), function(t) {
                var r = w[t] = n[t];
                w.prototype[t] = function() {
                    var n = [ this._wrapped ];
                    return a.apply(n, arguments), D.call(this, r.apply(w, n));
                };
            });
        };
        var N = 0;
        w.uniqueId = function(n) {
            var t = ++N + "";
            return n ? n + t : t;
        }, w.templateSettings = {
            evaluate: /<%([\s\S]+?)%>/g,
            interpolate: /<%=([\s\S]+?)%>/g,
            escape: /<%-([\s\S]+?)%>/g
        };
        var T = /(.)^/, q = {
            "'": "'",
            "\\": "\\",
            "\r": "r",
            "\n": "n",
            "	": "t",
            "\u2028": "u2028",
            "\u2029": "u2029"
        }, B = /\\|'|\r|\n|\t|\u2028|\u2029/g;
        w.template = function(n, t, r) {
            var e;
            r = w.defaults({}, r, w.templateSettings);
            var u = RegExp([ (r.escape || T).source, (r.interpolate || T).source, (r.evaluate || T).source ].join("|") + "|$", "g"), i = 0, a = "__p+='";
            n.replace(u, function(t, r, e, u, o) {
                return a += n.slice(i, o).replace(B, function(n) {
                    return "\\" + q[n];
                }), r && (a += "'+\n((__t=(" + r + "))==null?'':_.escape(__t))+\n'"), e && (a += "'+\n((__t=(" + e + "))==null?'':__t)+\n'"), 
                u && (a += "';\n" + u + "\n__p+='"), i = o + t.length, t;
            }), a += "';\n", r.variable || (a = "with(obj||{}){\n" + a + "}\n"), a = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + a + "return __p;\n";
            try {
                e = Function(r.variable || "obj", "_", a);
            } catch (o) {
                throw o.source = a, o;
            }
            if (t) return e(t, w);
            var c = function(n) {
                return e.call(this, n, w);
            };
            return c.source = "function(" + (r.variable || "obj") + "){\n" + a + "}", c;
        }, w.chain = function(n) {
            return w(n).chain();
        };
        var D = function(n) {
            return this._chain ? w(n).chain() : n;
        };
        w.mixin(w), A([ "pop", "push", "reverse", "shift", "sort", "splice", "unshift" ], function(n) {
            var t = e[n];
            w.prototype[n] = function() {
                var r = this._wrapped;
                return t.apply(r, arguments), "shift" != n && "splice" != n || 0 !== r.length || delete r[0], 
                D.call(this, r);
            };
        }), A([ "concat", "join", "slice" ], function(n) {
            var t = e[n];
            w.prototype[n] = function() {
                return D.call(this, t.apply(this._wrapped, arguments));
            };
        }), w.extend(w.prototype, {
            chain: function() {
                return this._chain = !0, this;
            },
            value: function() {
                return this._wrapped;
            }
        });
    }.call(this), function() {
        var a, t = this, e = t.Backbone, i = [], r = i.push, s = i.slice, n = i.splice;
        a = "undefined" != typeof exports ? exports : t.Backbone = {}, a.VERSION = "1.0.0";
        var h = t._;
        h || "undefined" == typeof require || (h = require("underscore")), a.$ = t.jQuery || t.Zepto || t.ender || t.$, 
        a.noConflict = function() {
            return t.Backbone = e, this;
        }, a.emulateHTTP = !1, a.emulateJSON = !1;
        var o = a.Events = {
            on: function(t, e, i) {
                if (!l(this, "on", t, [ e, i ]) || !e) return this;
                this._events || (this._events = {});
                var r = this._events[t] || (this._events[t] = []);
                return r.push({
                    callback: e,
                    context: i,
                    ctx: i || this
                }), this;
            },
            once: function(t, e, i) {
                if (!l(this, "once", t, [ e, i ]) || !e) return this;
                var r = this, s = h.once(function() {
                    r.off(t, s), e.apply(this, arguments);
                });
                return s._callback = e, this.on(t, s, i);
            },
            off: function(t, e, i) {
                var r, s, n, a, o, u, c, f;
                if (!this._events || !l(this, "off", t, [ e, i ])) return this;
                if (!t && !e && !i) return this._events = {}, this;
                for (a = t ? [ t ] : h.keys(this._events), o = 0, u = a.length; u > o; o++) if (t = a[o], 
                n = this._events[t]) {
                    if (this._events[t] = r = [], e || i) for (c = 0, f = n.length; f > c; c++) s = n[c], 
                    (e && e !== s.callback && e !== s.callback._callback || i && i !== s.context) && r.push(s);
                    r.length || delete this._events[t];
                }
                return this;
            },
            trigger: function(t) {
                if (!this._events) return this;
                var e = s.call(arguments, 1);
                if (!l(this, "trigger", t, e)) return this;
                var i = this._events[t], r = this._events.all;
                return i && c(i, e), r && c(r, arguments), this;
            },
            stopListening: function(t, e, i) {
                var r = this._listeners;
                if (!r) return this;
                var s = !e && !i;
                "object" == typeof e && (i = this), t && ((r = {})[t._listenerId] = t);
                for (var n in r) r[n].off(e, i, this), s && delete this._listeners[n];
                return this;
            }
        }, u = /\s+/, l = function(t, e, i, r) {
            if (!i) return !0;
            if ("object" == typeof i) {
                for (var s in i) t[e].apply(t, [ s, i[s] ].concat(r));
                return !1;
            }
            if (u.test(i)) {
                for (var n = i.split(u), a = 0, h = n.length; h > a; a++) t[e].apply(t, [ n[a] ].concat(r));
                return !1;
            }
            return !0;
        }, c = function(t, e) {
            var i, r = -1, s = t.length, n = e[0], a = e[1], h = e[2];
            switch (e.length) {
              case 0:
                for (;++r < s; ) (i = t[r]).callback.call(i.ctx);
                return;

              case 1:
                for (;++r < s; ) (i = t[r]).callback.call(i.ctx, n);
                return;

              case 2:
                for (;++r < s; ) (i = t[r]).callback.call(i.ctx, n, a);
                return;

              case 3:
                for (;++r < s; ) (i = t[r]).callback.call(i.ctx, n, a, h);
                return;

              default:
                for (;++r < s; ) (i = t[r]).callback.apply(i.ctx, e);
            }
        }, f = {
            listenTo: "on",
            listenToOnce: "once"
        };
        h.each(f, function(t, e) {
            o[e] = function(e, i, r) {
                var s = this._listeners || (this._listeners = {}), n = e._listenerId || (e._listenerId = h.uniqueId("l"));
                return s[n] = e, "object" == typeof i && (r = this), e[t](i, r, this), this;
            };
        }), o.bind = o.on, o.unbind = o.off, h.extend(a, o);
        var d = a.Model = function(t, e) {
            var i, r = t || {};
            e || (e = {}), this.cid = h.uniqueId("c"), this.attributes = {}, h.extend(this, h.pick(e, p)), 
            e.parse && (r = this.parse(r, e) || {}), (i = h.result(this, "defaults")) && (r = h.defaults({}, r, i)), 
            this.set(r, e), this.changed = {}, this.initialize.apply(this, arguments);
        }, p = [ "url", "urlRoot", "collection" ];
        h.extend(d.prototype, o, {
            changed: null,
            validationError: null,
            idAttribute: "id",
            initialize: function() {},
            toJSON: function() {
                return h.clone(this.attributes);
            },
            sync: function() {
                return a.sync.apply(this, arguments);
            },
            get: function(t) {
                return this.attributes[t];
            },
            escape: function(t) {
                return h.escape(this.get(t));
            },
            has: function(t) {
                return null != this.get(t);
            },
            set: function(t, e, i) {
                var r, s, n, a, o, u, l, c;
                if (null == t) return this;
                if ("object" == typeof t ? (s = t, i = e) : (s = {})[t] = e, i || (i = {}), !this._validate(s, i)) return !1;
                n = i.unset, o = i.silent, a = [], u = this._changing, this._changing = !0, u || (this._previousAttributes = h.clone(this.attributes), 
                this.changed = {}), c = this.attributes, l = this._previousAttributes, this.idAttribute in s && (this.id = s[this.idAttribute]);
                for (r in s) e = s[r], h.isEqual(c[r], e) || a.push(r), h.isEqual(l[r], e) ? delete this.changed[r] : this.changed[r] = e, 
                n ? delete c[r] : c[r] = e;
                if (!o) {
                    a.length && (this._pending = !0);
                    for (var f = 0, d = a.length; d > f; f++) this.trigger("change:" + a[f], this, c[a[f]], i);
                }
                if (u) return this;
                if (!o) for (;this._pending; ) this._pending = !1, this.trigger("change", this, i);
                return this._pending = !1, this._changing = !1, this;
            },
            unset: function(t, e) {
                return this.set(t, void 0, h.extend({}, e, {
                    unset: !0
                }));
            },
            clear: function(t) {
                var e = {};
                for (var i in this.attributes) e[i] = void 0;
                return this.set(e, h.extend({}, t, {
                    unset: !0
                }));
            },
            hasChanged: function(t) {
                return null == t ? !h.isEmpty(this.changed) : h.has(this.changed, t);
            },
            changedAttributes: function(t) {
                if (!t) return this.hasChanged() ? h.clone(this.changed) : !1;
                var e, i = !1, r = this._changing ? this._previousAttributes : this.attributes;
                for (var s in t) h.isEqual(r[s], e = t[s]) || ((i || (i = {}))[s] = e);
                return i;
            },
            previous: function(t) {
                return null != t && this._previousAttributes ? this._previousAttributes[t] : null;
            },
            previousAttributes: function() {
                return h.clone(this._previousAttributes);
            },
            fetch: function(t) {
                t = t ? h.clone(t) : {}, void 0 === t.parse && (t.parse = !0);
                var e = this, i = t.success;
                return t.success = function(r) {
                    return e.set(e.parse(r, t), t) ? (i && i(e, r, t), e.trigger("sync", e, r, t), void 0) : !1;
                }, R(this, t), this.sync("read", this, t);
            },
            save: function(t, e, i) {
                var r, s, n, a = this.attributes;
                if (null == t || "object" == typeof t ? (r = t, i = e) : (r = {})[t] = e, !(!r || i && i.wait || this.set(r, i))) return !1;
                if (i = h.extend({
                    validate: !0
                }, i), !this._validate(r, i)) return !1;
                r && i.wait && (this.attributes = h.extend({}, a, r)), void 0 === i.parse && (i.parse = !0);
                var o = this, u = i.success;
                return i.success = function(t) {
                    o.attributes = a;
                    var e = o.parse(t, i);
                    return i.wait && (e = h.extend(r || {}, e)), h.isObject(e) && !o.set(e, i) ? !1 : (u && u(o, t, i), 
                    o.trigger("sync", o, t, i), void 0);
                }, R(this, i), s = this.isNew() ? "create" : i.patch ? "patch" : "update", "patch" === s && (i.attrs = r), 
                n = this.sync(s, this, i), r && i.wait && (this.attributes = a), n;
            },
            destroy: function(t) {
                t = t ? h.clone(t) : {};
                var e = this, i = t.success, r = function() {
                    e.trigger("destroy", e, e.collection, t);
                };
                if (t.success = function(s) {
                    (t.wait || e.isNew()) && r(), i && i(e, s, t), e.isNew() || e.trigger("sync", e, s, t);
                }, this.isNew()) return t.success(), !1;
                R(this, t);
                var s = this.sync("delete", this, t);
                return t.wait || r(), s;
            },
            url: function() {
                var t = h.result(this, "urlRoot") || h.result(this.collection, "url") || U();
                return this.isNew() ? t : t + ("/" === t.charAt(t.length - 1) ? "" : "/") + encodeURIComponent(this.id);
            },
            parse: function(t) {
                return t;
            },
            clone: function() {
                return new this.constructor(this.attributes);
            },
            isNew: function() {
                return null == this.id;
            },
            isValid: function(t) {
                return this._validate({}, h.extend(t || {}, {
                    validate: !0
                }));
            },
            _validate: function(t, e) {
                if (!e.validate || !this.validate) return !0;
                t = h.extend({}, this.attributes, t);
                var i = this.validationError = this.validate(t, e) || null;
                return i ? (this.trigger("invalid", this, i, h.extend(e || {}, {
                    validationError: i
                })), !1) : !0;
            }
        });
        var v = [ "keys", "values", "pairs", "invert", "pick", "omit" ];
        h.each(v, function(t) {
            d.prototype[t] = function() {
                var e = s.call(arguments);
                return e.unshift(this.attributes), h[t].apply(h, e);
            };
        });
        var g = a.Collection = function(t, e) {
            e || (e = {}), e.url && (this.url = e.url), e.model && (this.model = e.model), void 0 !== e.comparator && (this.comparator = e.comparator), 
            this._reset(), this.initialize.apply(this, arguments), t && this.reset(t, h.extend({
                silent: !0
            }, e));
        }, m = {
            add: !0,
            remove: !0,
            merge: !0
        }, y = {
            add: !0,
            merge: !1,
            remove: !1
        };
        h.extend(g.prototype, o, {
            model: d,
            initialize: function() {},
            toJSON: function(t) {
                return this.map(function(e) {
                    return e.toJSON(t);
                });
            },
            sync: function() {
                return a.sync.apply(this, arguments);
            },
            add: function(t, e) {
                return this.set(t, h.defaults(e || {}, y));
            },
            remove: function(t, e) {
                t = h.isArray(t) ? t.slice() : [ t ], e || (e = {});
                var i, r, s, n;
                for (i = 0, r = t.length; r > i; i++) n = this.get(t[i]), n && (delete this._byId[n.id], 
                delete this._byId[n.cid], s = this.indexOf(n), this.models.splice(s, 1), this.length--, 
                e.silent || (e.index = s, n.trigger("remove", n, this, e)), this._removeReference(n));
                return this;
            },
            set: function(t, e) {
                e = h.defaults(e || {}, m), e.parse && (t = this.parse(t, e)), h.isArray(t) || (t = t ? [ t ] : []);
                var i, s, a, u, l, c = e.at, f = this.comparator && null == c && e.sort !== !1, d = h.isString(this.comparator) ? this.comparator : null, p = [], v = [], g = {};
                for (i = 0, s = t.length; s > i; i++) (a = this._prepareModel(t[i], e)) && ((u = this.get(a)) ? (e.remove && (g[u.cid] = !0), 
                e.merge && (u.set(a.attributes, e), f && !l && u.hasChanged(d) && (l = !0))) : e.add && (p.push(a), 
                a.on("all", this._onModelEvent, this), this._byId[a.cid] = a, null != a.id && (this._byId[a.id] = a)));
                if (e.remove) {
                    for (i = 0, s = this.length; s > i; ++i) g[(a = this.models[i]).cid] || v.push(a);
                    v.length && this.remove(v, e);
                }
                if (p.length && (f && (l = !0), this.length += p.length, null != c ? n.apply(this.models, [ c, 0 ].concat(p)) : r.apply(this.models, p)), 
                l && this.sort({
                    silent: !0
                }), e.silent) return this;
                for (i = 0, s = p.length; s > i; i++) (a = p[i]).trigger("add", a, this, e);
                return l && this.trigger("sort", this, e), this;
            },
            reset: function(t, e) {
                e || (e = {});
                for (var i = 0, r = this.models.length; r > i; i++) this._removeReference(this.models[i]);
                return e.previousModels = this.models, this._reset(), this.add(t, h.extend({
                    silent: !0
                }, e)), e.silent || this.trigger("reset", this, e), this;
            },
            push: function(t, e) {
                return t = this._prepareModel(t, e), this.add(t, h.extend({
                    at: this.length
                }, e)), t;
            },
            pop: function(t) {
                var e = this.at(this.length - 1);
                return this.remove(e, t), e;
            },
            unshift: function(t, e) {
                return t = this._prepareModel(t, e), this.add(t, h.extend({
                    at: 0
                }, e)), t;
            },
            shift: function(t) {
                var e = this.at(0);
                return this.remove(e, t), e;
            },
            slice: function(t, e) {
                return this.models.slice(t, e);
            },
            get: function(t) {
                return null == t ? void 0 : this._byId[null != t.id ? t.id : t.cid || t];
            },
            at: function(t) {
                return this.models[t];
            },
            where: function(t, e) {
                return h.isEmpty(t) ? e ? void 0 : [] : this[e ? "find" : "filter"](function(e) {
                    for (var i in t) if (t[i] !== e.get(i)) return !1;
                    return !0;
                });
            },
            findWhere: function(t) {
                return this.where(t, !0);
            },
            sort: function(t) {
                if (!this.comparator) throw new Error("Cannot sort a set without a comparator");
                return t || (t = {}), h.isString(this.comparator) || 1 === this.comparator.length ? this.models = this.sortBy(this.comparator, this) : this.models.sort(h.bind(this.comparator, this)), 
                t.silent || this.trigger("sort", this, t), this;
            },
            sortedIndex: function(t, e, i) {
                e || (e = this.comparator);
                var r = h.isFunction(e) ? e : function(t) {
                    return t.get(e);
                };
                return h.sortedIndex(this.models, t, r, i);
            },
            pluck: function(t) {
                return h.invoke(this.models, "get", t);
            },
            fetch: function(t) {
                t = t ? h.clone(t) : {}, void 0 === t.parse && (t.parse = !0);
                var e = t.success, i = this;
                return t.success = function(r) {
                    var s = t.reset ? "reset" : "set";
                    i[s](r, t), e && e(i, r, t), i.trigger("sync", i, r, t);
                }, R(this, t), this.sync("read", this, t);
            },
            create: function(t, e) {
                if (e = e ? h.clone(e) : {}, !(t = this._prepareModel(t, e))) return !1;
                e.wait || this.add(t, e);
                var i = this, r = e.success;
                return e.success = function(s) {
                    e.wait && i.add(t, e), r && r(t, s, e);
                }, t.save(null, e), t;
            },
            parse: function(t) {
                return t;
            },
            clone: function() {
                return new this.constructor(this.models);
            },
            _reset: function() {
                this.length = 0, this.models = [], this._byId = {};
            },
            _prepareModel: function(t, e) {
                if (t instanceof d) return t.collection || (t.collection = this), t;
                e || (e = {}), e.collection = this;
                var i = new this.model(t, e);
                return i._validate(t, e) ? i : (this.trigger("invalid", this, t, e), !1);
            },
            _removeReference: function(t) {
                this === t.collection && delete t.collection, t.off("all", this._onModelEvent, this);
            },
            _onModelEvent: function(t, e, i, r) {
                ("add" !== t && "remove" !== t || i === this) && ("destroy" === t && this.remove(e, r), 
                e && t === "change:" + e.idAttribute && (delete this._byId[e.previous(e.idAttribute)], 
                null != e.id && (this._byId[e.id] = e)), this.trigger.apply(this, arguments));
            }
        });
        var _ = [ "forEach", "each", "map", "collect", "reduce", "foldl", "inject", "reduceRight", "foldr", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "toArray", "size", "first", "head", "take", "initial", "rest", "tail", "drop", "last", "without", "indexOf", "shuffle", "lastIndexOf", "isEmpty", "chain" ];
        h.each(_, function(t) {
            g.prototype[t] = function() {
                var e = s.call(arguments);
                return e.unshift(this.models), h[t].apply(h, e);
            };
        });
        var w = [ "groupBy", "countBy", "sortBy" ];
        h.each(w, function(t) {
            g.prototype[t] = function(e, i) {
                var r = h.isFunction(e) ? e : function(t) {
                    return t.get(e);
                };
                return h[t](this.models, r, i);
            };
        });
        var b = a.View = function(t) {
            this.cid = h.uniqueId("view"), this._configure(t || {}), this._ensureElement(), 
            this.initialize.apply(this, arguments), this.delegateEvents();
        }, x = /^(\S+)\s*(.*)$/, E = [ "model", "collection", "el", "id", "attributes", "className", "tagName", "events" ];
        h.extend(b.prototype, o, {
            tagName: "div",
            $: function(t) {
                return this.$el.find(t);
            },
            initialize: function() {},
            render: function() {
                return this;
            },
            remove: function() {
                return this.$el.remove(), this.stopListening(), this;
            },
            setElement: function(t, e) {
                return this.$el && this.undelegateEvents(), this.$el = t instanceof a.$ ? t : a.$(t), 
                this.el = this.$el[0], e !== !1 && this.delegateEvents(), this;
            },
            delegateEvents: function(t) {
                if (!t && !(t = h.result(this, "events"))) return this;
                this.undelegateEvents();
                for (var e in t) {
                    var i = t[e];
                    if (h.isFunction(i) || (i = this[t[e]]), i) {
                        var r = e.match(x), s = r[1], n = r[2];
                        i = h.bind(i, this), s += ".delegateEvents" + this.cid, "" === n ? this.$el.on(s, i) : this.$el.on(s, n, i);
                    }
                }
                return this;
            },
            undelegateEvents: function() {
                return this.$el.off(".delegateEvents" + this.cid), this;
            },
            _configure: function(t) {
                this.options && (t = h.extend({}, h.result(this, "options"), t)), h.extend(this, h.pick(t, E)), 
                this.options = t;
            },
            _ensureElement: function() {
                if (this.el) this.setElement(h.result(this, "el"), !1); else {
                    var t = h.extend({}, h.result(this, "attributes"));
                    this.id && (t.id = h.result(this, "id")), this.className && (t["class"] = h.result(this, "className"));
                    var e = a.$("<" + h.result(this, "tagName") + ">").attr(t);
                    this.setElement(e, !1);
                }
            }
        }), a.sync = function(t, e, i) {
            var r = k[t];
            h.defaults(i || (i = {}), {
                emulateHTTP: a.emulateHTTP,
                emulateJSON: a.emulateJSON
            });
            var s = {
                type: r,
                dataType: "json"
            };
            if (i.url || (s.url = h.result(e, "url") || U()), null != i.data || !e || "create" !== t && "update" !== t && "patch" !== t || (s.contentType = "application/json", 
            s.data = JSON.stringify(i.attrs || e.toJSON(i))), i.emulateJSON && (s.contentType = "application/x-www-form-urlencoded", 
            s.data = s.data ? {
                model: s.data
            } : {}), i.emulateHTTP && ("PUT" === r || "DELETE" === r || "PATCH" === r)) {
                s.type = "POST", i.emulateJSON && (s.data._method = r);
                var n = i.beforeSend;
                i.beforeSend = function(t) {
                    return t.setRequestHeader("X-HTTP-Method-Override", r), n ? n.apply(this, arguments) : void 0;
                };
            }
            "GET" === s.type || i.emulateJSON || (s.processData = !1), "PATCH" !== s.type || !window.ActiveXObject || window.external && window.external.msActiveXFilteringEnabled || (s.xhr = function() {
                return new ActiveXObject("Microsoft.XMLHTTP");
            });
            var o = i.xhr = a.ajax(h.extend(s, i));
            return e.trigger("request", e, o, i), o;
        };
        var k = {
            create: "POST",
            update: "PUT",
            patch: "PATCH",
            "delete": "DELETE",
            read: "GET"
        };
        a.ajax = function() {
            return a.$.ajax.apply(a.$, arguments);
        };
        var S = a.Router = function(t) {
            t || (t = {}), t.routes && (this.routes = t.routes), this._bindRoutes(), this.initialize.apply(this, arguments);
        }, $ = /\((.*?)\)/g, T = /(\(\?)?:\w+/g, H = /\*\w+/g, A = /[\-{}\[\]+?.,\\\^$|#\s]/g;
        h.extend(S.prototype, o, {
            initialize: function() {},
            route: function(t, e, i) {
                h.isRegExp(t) || (t = this._routeToRegExp(t)), h.isFunction(e) && (i = e, e = ""), 
                i || (i = this[e]);
                var r = this;
                return a.history.route(t, function(s) {
                    var n = r._extractParameters(t, s);
                    i && i.apply(r, n), r.trigger.apply(r, [ "route:" + e ].concat(n)), r.trigger("route", e, n), 
                    a.history.trigger("route", r, e, n);
                }), this;
            },
            navigate: function(t, e) {
                return a.history.navigate(t, e), this;
            },
            _bindRoutes: function() {
                if (this.routes) {
                    this.routes = h.result(this, "routes");
                    for (var t, e = h.keys(this.routes); null != (t = e.pop()); ) this.route(t, this.routes[t]);
                }
            },
            _routeToRegExp: function(t) {
                return t = t.replace(A, "\\$&").replace($, "(?:$1)?").replace(T, function(t, e) {
                    return e ? t : "([^/]+)";
                }).replace(H, "(.*?)"), new RegExp("^" + t + "$");
            },
            _extractParameters: function(t, e) {
                var i = t.exec(e).slice(1);
                return h.map(i, function(t) {
                    return t ? decodeURIComponent(t) : null;
                });
            }
        });
        var I = a.History = function() {
            this.handlers = [], h.bindAll(this, "checkUrl"), "undefined" != typeof window && (this.location = window.location, 
            this.history = window.history);
        }, N = /^[#\/]|\s+$/g, P = /^\/+|\/+$/g, O = /msie [\w.]+/, C = /\/$/;
        I.started = !1, h.extend(I.prototype, o, {
            interval: 50,
            getHash: function(t) {
                var e = (t || this).location.href.match(/#(.*)$/);
                return e ? e[1] : "";
            },
            getFragment: function(t, e) {
                if (null == t) if (this._hasPushState || !this._wantsHashChange || e) {
                    t = this.location.pathname;
                    var i = this.root.replace(C, "");
                    t.indexOf(i) || (t = t.substr(i.length));
                } else t = this.getHash();
                return t.replace(N, "");
            },
            start: function(t) {
                if (I.started) throw new Error("Backbone.history has already been started");
                I.started = !0, this.options = h.extend({}, {
                    root: "/"
                }, this.options, t), this.root = this.options.root, this._wantsHashChange = this.options.hashChange !== !1, 
                this._wantsPushState = !!this.options.pushState, this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);
                var e = this.getFragment(), i = document.documentMode, r = O.exec(navigator.userAgent.toLowerCase()) && (!i || 7 >= i);
                this.root = ("/" + this.root + "/").replace(P, "/"), r && this._wantsHashChange && (this.iframe = a.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow, 
                this.navigate(e)), this._hasPushState ? a.$(window).on("popstate", this.checkUrl) : this._wantsHashChange && "onhashchange" in window && !r ? a.$(window).on("hashchange", this.checkUrl) : this._wantsHashChange && (this._checkUrlInterval = setInterval(this.checkUrl, this.interval)), 
                this.fragment = e;
                var s = this.location, n = s.pathname.replace(/[^\/]$/, "$&/") === this.root;
                return this._wantsHashChange && this._wantsPushState && !this._hasPushState && !n ? (this.fragment = this.getFragment(null, !0), 
                this.location.replace(this.root + this.location.search + "#" + this.fragment), !0) : (this._wantsPushState && this._hasPushState && n && s.hash && (this.fragment = this.getHash().replace(N, ""), 
                this.history.replaceState({}, document.title, this.root + this.fragment + s.search)), 
                this.options.silent ? void 0 : this.loadUrl());
            },
            stop: function() {
                a.$(window).off("popstate", this.checkUrl).off("hashchange", this.checkUrl), clearInterval(this._checkUrlInterval), 
                I.started = !1;
            },
            route: function(t, e) {
                this.handlers.unshift({
                    route: t,
                    callback: e
                });
            },
            checkUrl: function() {
                var e = this.getFragment();
                return e === this.fragment && this.iframe && (e = this.getFragment(this.getHash(this.iframe))), 
                e === this.fragment ? !1 : (this.iframe && this.navigate(e), this.loadUrl() || this.loadUrl(this.getHash()), 
                void 0);
            },
            loadUrl: function(t) {
                var e = this.fragment = this.getFragment(t), i = h.any(this.handlers, function(t) {
                    return t.route.test(e) ? (t.callback(e), !0) : void 0;
                });
                return i;
            },
            navigate: function(t, e) {
                if (!I.started) return !1;
                if (e && e !== !0 || (e = {
                    trigger: e
                }), t = this.getFragment(t || ""), this.fragment !== t) {
                    this.fragment = t;
                    var i = this.root + t;
                    if (this._hasPushState) this.history[e.replace ? "replaceState" : "pushState"]({}, document.title, i); else {
                        if (!this._wantsHashChange) return this.location.assign(i);
                        this._updateHash(this.location, t, e.replace), this.iframe && t !== this.getFragment(this.getHash(this.iframe)) && (e.replace || this.iframe.document.open().close(), 
                        this._updateHash(this.iframe.location, t, e.replace));
                    }
                    e.trigger && this.loadUrl(t);
                }
            },
            _updateHash: function(t, e, i) {
                if (i) {
                    var r = t.href.replace(/(javascript:|#).*$/, "");
                    t.replace(r + "#" + e);
                } else t.hash = "#" + e;
            }
        }), a.history = new I();
        var j = function(t, e) {
            var r, i = this;
            r = t && h.has(t, "constructor") ? t.constructor : function() {
                return i.apply(this, arguments);
            }, h.extend(r, i, e);
            var s = function() {
                this.constructor = r;
            };
            return s.prototype = i.prototype, r.prototype = new s(), t && h.extend(r.prototype, t), 
            r.__super__ = i.prototype, r;
        };
        d.extend = g.extend = S.extend = b.extend = I.extend = j;
        var U = function() {
            throw new Error('A "url" property or function must be specified');
        }, R = function(t, e) {
            var i = e.error;
            e.error = function(r) {
                i && i(t, r, e), t.trigger("error", t, r, e);
            };
        };
    }.call(this), function(undefined) {
        "use strict";
        var _, Backbone, exports;
        "undefined" == typeof window ? (_ = require("underscore"), Backbone = require("backbone"), 
        exports = Backbone, "undefined" == typeof module || (module.exports = exports)) : (_ = window._, 
        Backbone = window.Backbone, exports = window), Backbone.Relational = {
            showWarnings: !0
        }, Backbone.Semaphore = {
            _permitsAvailable: null,
            _permitsUsed: 0,
            acquire: function() {
                if (this._permitsAvailable && this._permitsUsed >= this._permitsAvailable) throw new Error("Max permits acquired");
                this._permitsUsed++;
            },
            release: function() {
                if (0 === this._permitsUsed) throw new Error("All permits released");
                this._permitsUsed--;
            },
            isLocked: function() {
                return this._permitsUsed > 0;
            },
            setAvailablePermits: function(amount) {
                if (this._permitsUsed > amount) throw new Error("Available permits cannot be less than used permits");
                this._permitsAvailable = amount;
            }
        }, Backbone.BlockingQueue = function() {
            this._queue = [];
        }, _.extend(Backbone.BlockingQueue.prototype, Backbone.Semaphore, {
            _queue: null,
            add: function(func) {
                this.isBlocked() ? this._queue.push(func) : func();
            },
            process: function() {
                var queue = this._queue;
                for (this._queue = []; queue && queue.length; ) queue.shift()();
            },
            block: function() {
                this.acquire();
            },
            unblock: function() {
                this.release(), this.isBlocked() || this.process();
            },
            isBlocked: function() {
                return this.isLocked();
            }
        }), Backbone.Relational.eventQueue = new Backbone.BlockingQueue(), Backbone.Store = function() {
            this._collections = [], this._reverseRelations = [], this._orphanRelations = [], 
            this._subModels = [], this._modelScopes = [ exports ];
        }, _.extend(Backbone.Store.prototype, Backbone.Events, {
            initializeRelation: function(model, relation, options) {
                var type = _.isString(relation.type) ? Backbone[relation.type] || this.getObjectByName(relation.type) : relation.type;
                type && type.prototype instanceof Backbone.Relation ? new type(model, relation, options) : Backbone.Relational.showWarnings && "undefined" != typeof console && console.warn("Relation=%o; missing or invalid relation type!", relation);
            },
            addModelScope: function(scope) {
                this._modelScopes.push(scope);
            },
            removeModelScope: function(scope) {
                this._modelScopes = _.without(this._modelScopes, scope);
            },
            addSubModels: function(subModelTypes, superModelType) {
                this._subModels.push({
                    superModelType: superModelType,
                    subModels: subModelTypes
                });
            },
            setupSuperModel: function(modelType) {
                _.find(this._subModels, function(subModelDef) {
                    return _.find(subModelDef.subModels || [], function(subModelTypeName, typeValue) {
                        var subModelType = this.getObjectByName(subModelTypeName);
                        return modelType === subModelType ? (subModelDef.superModelType._subModels[typeValue] = modelType, 
                        modelType._superModel = subModelDef.superModelType, modelType._subModelTypeValue = typeValue, 
                        modelType._subModelTypeAttribute = subModelDef.superModelType.prototype.subModelTypeAttribute, 
                        !0) : void 0;
                    }, this);
                }, this);
            },
            addReverseRelation: function(relation) {
                var exists = _.any(this._reverseRelations, function(rel) {
                    return _.all(relation || [], function(val, key) {
                        return val === rel[key];
                    });
                });
                !exists && relation.model && relation.type && (this._reverseRelations.push(relation), 
                this._addRelation(relation.model, relation), this.retroFitRelation(relation));
            },
            addOrphanRelation: function(relation) {
                var exists = _.any(this._orphanRelations, function(rel) {
                    return _.all(relation || [], function(val, key) {
                        return val === rel[key];
                    });
                });
                !exists && relation.model && relation.type && this._orphanRelations.push(relation);
            },
            processOrphanRelations: function() {
                _.each(this._orphanRelations.slice(0), function(rel) {
                    var relatedModel = Backbone.Relational.store.getObjectByName(rel.relatedModel);
                    relatedModel && (this.initializeRelation(null, rel), this._orphanRelations = _.without(this._orphanRelations, rel));
                }, this);
            },
            _addRelation: function(type, relation) {
                type.prototype.relations || (type.prototype.relations = []), type.prototype.relations.push(relation), 
                _.each(type._subModels || [], function(subModel) {
                    this._addRelation(subModel, relation);
                }, this);
            },
            retroFitRelation: function(relation) {
                var coll = this.getCollection(relation.model, !1);
                coll && coll.each(function(model) {
                    model instanceof relation.model && new relation.type(model, relation);
                }, this);
            },
            getCollection: function(type, create) {
                type instanceof Backbone.RelationalModel && (type = type.constructor);
                for (var rootModel = type; rootModel._superModel; ) rootModel = rootModel._superModel;
                var coll = _.find(this._collections, function(item) {
                    return item.model === rootModel;
                });
                return coll || create === !1 || (coll = this._createCollection(rootModel)), coll;
            },
            getObjectByName: function(name) {
                var parts = name.split("."), type = null;
                return _.find(this._modelScopes, function(scope) {
                    return type = _.reduce(parts || [], function(memo, val) {
                        return memo ? memo[val] : undefined;
                    }, scope), type && type !== scope ? !0 : void 0;
                }, this), type;
            },
            _createCollection: function(type) {
                var coll;
                return type instanceof Backbone.RelationalModel && (type = type.constructor), type.prototype instanceof Backbone.RelationalModel && (coll = new Backbone.Collection(), 
                coll.model = type, this._collections.push(coll)), coll;
            },
            resolveIdForItem: function(type, item) {
                var id = _.isString(item) || _.isNumber(item) ? item : null;
                return null === id && (item instanceof Backbone.RelationalModel ? id = item.id : _.isObject(item) && (id = item[type.prototype.idAttribute])), 
                id || 0 === id || (id = null), id;
            },
            find: function(type, item) {
                var id = this.resolveIdForItem(type, item), coll = this.getCollection(type);
                if (coll) {
                    var obj = coll.get(id);
                    if (obj instanceof type) return obj;
                }
                return null;
            },
            register: function(model) {
                var coll = this.getCollection(model);
                if (coll) {
                    var modelColl = model.collection;
                    coll.add(model), this.listenTo(model, "destroy", this.unregister, this), this.listenTo(model, "relational:unregister", this.unregister, this), 
                    model.collection = modelColl;
                }
            },
            checkId: function(model, id) {
                var coll = this.getCollection(model), duplicate = coll && coll.get(id);
                if (duplicate && model !== duplicate) throw Backbone.Relational.showWarnings && "undefined" != typeof console && console.warn("Duplicate id! Old RelationalModel=%o, new RelationalModel=%o", duplicate, model), 
                new Error("Cannot instantiate more than one Backbone.RelationalModel with the same id per type!");
            },
            update: function(model) {
                var coll = this.getCollection(model);
                coll._onModelEvent("change:" + model.idAttribute, model, coll), model.trigger("relational:change:id", model, coll);
            },
            unregister: function(model, collection, options) {
                this.stopListening(model);
                var coll = this.getCollection(model);
                coll && coll.remove(model, options);
            },
            reset: function() {
                this.stopListening(), this._collections = [], this._subModels = [], this._modelScopes = [ exports ];
            }
        }), Backbone.Relational.store = new Backbone.Store(), Backbone.Relation = function(instance, options, opts) {
            if (this.instance = instance, options = _.isObject(options) ? options : {}, this.reverseRelation = _.defaults(options.reverseRelation || {}, this.options.reverseRelation), 
            this.options = _.defaults(options, this.options, Backbone.Relation.prototype.options), 
            this.reverseRelation.type = _.isString(this.reverseRelation.type) ? Backbone[this.reverseRelation.type] || Backbone.Relational.store.getObjectByName(this.reverseRelation.type) : this.reverseRelation.type, 
            this.key = this.options.key, this.keySource = this.options.keySource || this.key, 
            this.keyDestination = this.options.keyDestination || this.keySource || this.key, 
            this.model = this.options.model || this.instance.constructor, this.relatedModel = this.options.relatedModel, 
            !_.isFunction(this.relatedModel) || this.relatedModel.prototype instanceof Backbone.RelationalModel || (this.relatedModel = _.result(this, "relatedModel")), 
            _.isString(this.relatedModel) && (this.relatedModel = Backbone.Relational.store.getObjectByName(this.relatedModel)), 
            this.checkPreconditions() && (!this.options.isAutoRelation && this.reverseRelation.type && this.reverseRelation.key && Backbone.Relational.store.addReverseRelation(_.defaults({
                isAutoRelation: !0,
                model: this.relatedModel,
                relatedModel: this.model,
                reverseRelation: this.options
            }, this.reverseRelation)), instance)) {
                var contentKey = this.keySource;
                contentKey !== this.key && "object" == typeof this.instance.get(this.key) && (contentKey = this.key), 
                this.setKeyContents(this.instance.get(contentKey)), this.relatedCollection = Backbone.Relational.store.getCollection(this.relatedModel), 
                this.keySource !== this.key && delete this.instance.attributes[this.keySource], 
                this.instance._relations[this.key] = this, this.initialize(opts), this.options.autoFetch && this.instance.fetchRelated(this.key, _.isObject(this.options.autoFetch) ? this.options.autoFetch : {}), 
                this.listenTo(this.instance, "destroy", this.destroy).listenTo(this.relatedCollection, "relational:add relational:change:id", this.tryAddRelated).listenTo(this.relatedCollection, "relational:remove", this.removeRelated);
            }
        }, Backbone.Relation.extend = Backbone.Model.extend, _.extend(Backbone.Relation.prototype, Backbone.Events, Backbone.Semaphore, {
            options: {
                createModels: !0,
                includeInJSON: !0,
                isAutoRelation: !1,
                autoFetch: !1,
                parse: !1
            },
            instance: null,
            key: null,
            keyContents: null,
            relatedModel: null,
            relatedCollection: null,
            reverseRelation: null,
            related: null,
            checkPreconditions: function() {
                var i = this.instance, k = this.key, m = this.model, rm = this.relatedModel, warn = Backbone.Relational.showWarnings && "undefined" != typeof console;
                if (!m || !k || !rm) return warn && console.warn("Relation=%o: missing model, key or relatedModel (%o, %o, %o).", this, m, k, rm), 
                !1;
                if (!(m.prototype instanceof Backbone.RelationalModel)) return warn && console.warn("Relation=%o: model does not inherit from Backbone.RelationalModel (%o).", this, i), 
                !1;
                if (!(rm.prototype instanceof Backbone.RelationalModel)) return warn && console.warn("Relation=%o: relatedModel does not inherit from Backbone.RelationalModel (%o).", this, rm), 
                !1;
                if (this instanceof Backbone.HasMany && this.reverseRelation.type === Backbone.HasMany) return warn && console.warn("Relation=%o: relation is a HasMany, and the reverseRelation is HasMany as well.", this), 
                !1;
                if (i && _.keys(i._relations).length) {
                    var existing = _.find(i._relations, function(rel) {
                        return rel.key === k;
                    }, this);
                    if (existing) return warn && console.warn("Cannot create relation=%o on %o for model=%o: already taken by relation=%o.", this, k, i, existing), 
                    !1;
                }
                return !0;
            },
            setRelated: function(related) {
                this.related = related, this.instance.acquire(), this.instance.attributes[this.key] = related, 
                this.instance.release();
            },
            _isReverseRelation: function(relation) {
                return relation.instance instanceof this.relatedModel && this.reverseRelation.key === relation.key && this.key === relation.reverseRelation.key;
            },
            getReverseRelations: function(model) {
                var reverseRelations = [], models = _.isUndefined(model) ? this.related && (this.related.models || [ this.related ]) : [ model ];
                return _.each(models || [], function(related) {
                    _.each(related.getRelations() || [], function(relation) {
                        this._isReverseRelation(relation) && reverseRelations.push(relation);
                    }, this);
                }, this), reverseRelations;
            },
            destroy: function() {
                this.stopListening(), this instanceof Backbone.HasOne ? this.setRelated(null) : this instanceof Backbone.HasMany && this.setRelated(this._prepareCollection()), 
                _.each(this.getReverseRelations(), function(relation) {
                    relation.removeRelated(this.instance);
                }, this);
            }
        }), Backbone.HasOne = Backbone.Relation.extend({
            options: {
                reverseRelation: {
                    type: "HasMany"
                }
            },
            initialize: function(opts) {
                this.listenTo(this.instance, "relational:change:" + this.key, this.onChange);
                var related = this.findRelated(opts);
                this.setRelated(related), _.each(this.getReverseRelations(), function(relation) {
                    relation.addRelated(this.instance, opts);
                }, this);
            },
            findRelated: function(options) {
                var related = null;
                if (options = _.defaults({
                    parse: this.options.parse
                }, options), this.keyContents instanceof this.relatedModel) related = this.keyContents; else if (this.keyContents || 0 === this.keyContents) {
                    var opts = _.defaults({
                        create: this.options.createModels
                    }, options);
                    related = this.relatedModel.findOrCreate(this.keyContents, opts);
                }
                return this.related && (this.keyId = null), related;
            },
            setKeyContents: function(keyContents) {
                this.keyContents = keyContents, this.keyId = Backbone.Relational.store.resolveIdForItem(this.relatedModel, this.keyContents);
            },
            onChange: function(model, attr, options) {
                if (!this.isLocked()) {
                    this.acquire(), options = options ? _.clone(options) : {};
                    var changed = _.isUndefined(options.__related), oldRelated = changed ? this.related : options.__related;
                    if (changed) {
                        this.setKeyContents(attr);
                        var related = this.findRelated(options);
                        this.setRelated(related);
                    }
                    if (oldRelated && this.related !== oldRelated && _.each(this.getReverseRelations(oldRelated), function(relation) {
                        relation.removeRelated(this.instance, null, options);
                    }, this), _.each(this.getReverseRelations(), function(relation) {
                        relation.addRelated(this.instance, options);
                    }, this), !options.silent && this.related !== oldRelated) {
                        var dit = this;
                        this.changed = !0, Backbone.Relational.eventQueue.add(function() {
                            dit.instance.trigger("change:" + dit.key, dit.instance, dit.related, options, !0), 
                            dit.changed = !1;
                        });
                    }
                    this.release();
                }
            },
            tryAddRelated: function(model, coll, options) {
                !this.keyId && 0 !== this.keyId || model.id !== this.keyId || (this.addRelated(model, options), 
                this.keyId = null);
            },
            addRelated: function(model, options) {
                var dit = this;
                model.queue(function() {
                    if (model !== dit.related) {
                        var oldRelated = dit.related || null;
                        dit.setRelated(model), dit.onChange(dit.instance, model, _.defaults({
                            __related: oldRelated
                        }, options));
                    }
                });
            },
            removeRelated: function(model, coll, options) {
                if (this.related && model === this.related) {
                    var oldRelated = this.related || null;
                    this.setRelated(null), this.onChange(this.instance, model, _.defaults({
                        __related: oldRelated
                    }, options));
                }
            }
        }), Backbone.HasMany = Backbone.Relation.extend({
            collectionType: null,
            options: {
                reverseRelation: {
                    type: "HasOne"
                },
                collectionType: Backbone.Collection,
                collectionKey: !0,
                collectionOptions: {}
            },
            initialize: function(opts) {
                if (this.listenTo(this.instance, "relational:change:" + this.key, this.onChange), 
                this.collectionType = this.options.collectionType, !_.isFunction(this.collectionType) || this.collectionType === Backbone.Collection || this.collectionType.prototype instanceof Backbone.Collection || (this.collectionType = _.result(this, "collectionType")), 
                _.isString(this.collectionType) && (this.collectionType = Backbone.Relational.store.getObjectByName(this.collectionType)), 
                this.collectionType !== Backbone.Collection && !(this.collectionType.prototype instanceof Backbone.Collection)) throw new Error("`collectionType` must inherit from Backbone.Collection");
                var related = this.findRelated(opts);
                this.setRelated(related);
            },
            _prepareCollection: function(collection) {
                if (this.related && this.stopListening(this.related), !(collection && collection instanceof Backbone.Collection)) {
                    var options = _.isFunction(this.options.collectionOptions) ? this.options.collectionOptions(this.instance) : this.options.collectionOptions;
                    collection = new this.collectionType(null, options);
                }
                if (collection.model = this.relatedModel, this.options.collectionKey) {
                    var key = this.options.collectionKey === !0 ? this.options.reverseRelation.key : this.options.collectionKey;
                    collection[key] && collection[key] !== this.instance ? Backbone.Relational.showWarnings && "undefined" != typeof console && console.warn("Relation=%o; collectionKey=%s already exists on collection=%o", this, key, this.options.collectionKey) : key && (collection[key] = this.instance);
                }
                return this.listenTo(collection, "relational:add", this.handleAddition).listenTo(collection, "relational:remove", this.handleRemoval).listenTo(collection, "relational:reset", this.handleReset), 
                collection;
            },
            findRelated: function(options) {
                var related = null;
                if (options = _.defaults({
                    parse: this.options.parse
                }, options), this.keyContents instanceof Backbone.Collection) this._prepareCollection(this.keyContents), 
                related = this.keyContents; else {
                    var toAdd = [];
                    _.each(this.keyContents, function(attributes) {
                        if (attributes instanceof this.relatedModel) var model = attributes; else model = this.relatedModel.findOrCreate(attributes, _.extend({
                            merge: !0
                        }, options, {
                            create: this.options.createModels
                        }));
                        model && toAdd.push(model);
                    }, this), related = this.related instanceof Backbone.Collection ? this.related : this._prepareCollection(), 
                    related.set(toAdd, _.defaults({
                        merge: !1,
                        parse: !1
                    }, options));
                }
                return this.keyIds = _.difference(this.keyIds, _.pluck(related.models, "id")), related;
            },
            setKeyContents: function(keyContents) {
                this.keyContents = keyContents instanceof Backbone.Collection ? keyContents : null, 
                this.keyIds = [], this.keyContents || !keyContents && 0 !== keyContents || (this.keyContents = _.isArray(keyContents) ? keyContents : [ keyContents ], 
                _.each(this.keyContents, function(item) {
                    var itemId = Backbone.Relational.store.resolveIdForItem(this.relatedModel, item);
                    (itemId || 0 === itemId) && this.keyIds.push(itemId);
                }, this));
            },
            onChange: function(model, attr, options) {
                options = options ? _.clone(options) : {}, this.setKeyContents(attr), this.changed = !1;
                var related = this.findRelated(options);
                if (this.setRelated(related), !options.silent) {
                    var dit = this;
                    Backbone.Relational.eventQueue.add(function() {
                        dit.changed && (dit.instance.trigger("change:" + dit.key, dit.instance, dit.related, options, !0), 
                        dit.changed = !1);
                    });
                }
            },
            handleAddition: function(model, coll, options) {
                options = options ? _.clone(options) : {}, this.changed = !0, _.each(this.getReverseRelations(model), function(relation) {
                    relation.addRelated(this.instance, options);
                }, this);
                var dit = this;
                !options.silent && Backbone.Relational.eventQueue.add(function() {
                    dit.instance.trigger("add:" + dit.key, model, dit.related, options);
                });
            },
            handleRemoval: function(model, coll, options) {
                options = options ? _.clone(options) : {}, this.changed = !0, _.each(this.getReverseRelations(model), function(relation) {
                    relation.removeRelated(this.instance, null, options);
                }, this);
                var dit = this;
                !options.silent && Backbone.Relational.eventQueue.add(function() {
                    dit.instance.trigger("remove:" + dit.key, model, dit.related, options);
                });
            },
            handleReset: function(coll, options) {
                var dit = this;
                options = options ? _.clone(options) : {}, !options.silent && Backbone.Relational.eventQueue.add(function() {
                    dit.instance.trigger("reset:" + dit.key, dit.related, options);
                });
            },
            tryAddRelated: function(model, coll, options) {
                var item = _.contains(this.keyIds, model.id);
                item && (this.addRelated(model, options), this.keyIds = _.without(this.keyIds, model.id));
            },
            addRelated: function(model, options) {
                var dit = this;
                model.queue(function() {
                    dit.related && !dit.related.get(model) && dit.related.add(model, _.defaults({
                        parse: !1
                    }, options));
                });
            },
            removeRelated: function(model, coll, options) {
                this.related.get(model) && this.related.remove(model, options);
            }
        }), Backbone.RelationalModel = Backbone.Model.extend({
            relations: null,
            _relations: null,
            _isInitialized: !1,
            _deferProcessing: !1,
            _queue: null,
            _attributeChangeFired: !1,
            subModelTypeAttribute: "type",
            subModelTypes: null,
            constructor: function(attributes, options) {
                if (options && options.collection) {
                    var dit = this, collection = this.collection = options.collection;
                    delete options.collection, this._deferProcessing = !0;
                    var processQueue = function(model) {
                        model === dit && (dit._deferProcessing = !1, dit.processQueue(), collection.off("relational:add", processQueue));
                    };
                    collection.on("relational:add", processQueue), _.defer(function() {
                        processQueue(dit);
                    });
                }
                Backbone.Relational.store.processOrphanRelations(), this._queue = new Backbone.BlockingQueue(), 
                this._queue.block(), Backbone.Relational.eventQueue.block();
                try {
                    Backbone.Model.apply(this, arguments);
                } finally {
                    Backbone.Relational.eventQueue.unblock();
                }
            },
            trigger: function(eventName) {
                if (eventName.length > 5 && 0 === eventName.indexOf("change")) {
                    var dit = this, args = arguments;
                    Backbone.Relational.eventQueue.add(function() {
                        if (dit._isInitialized) {
                            var changed = !0;
                            if ("change" === eventName) changed = dit.hasChanged() || dit._attributeChangeFired, 
                            dit._attributeChangeFired = !1; else {
                                var attr = eventName.slice(7), rel = dit.getRelation(attr);
                                rel ? (changed = args[4] === !0, changed ? dit.changed[attr] = args[2] : rel.changed || delete dit.changed[attr]) : changed && (dit._attributeChangeFired = !0);
                            }
                            changed && Backbone.Model.prototype.trigger.apply(dit, args);
                        }
                    });
                } else Backbone.Model.prototype.trigger.apply(this, arguments);
                return this;
            },
            initializeRelations: function(options) {
                this.acquire(), this._relations = {}, _.each(_.result(this, "relations") || [], function(rel) {
                    Backbone.Relational.store.initializeRelation(this, rel, options);
                }, this), this._isInitialized = !0, this.release(), this.processQueue();
            },
            updateRelations: function(options) {
                this._isInitialized && !this.isLocked() && _.each(this._relations, function(rel) {
                    var val = this.attributes[rel.keySource] || this.attributes[rel.key];
                    rel.related !== val && this.trigger("relational:change:" + rel.key, this, val, options || {}), 
                    rel.keySource !== rel.key && delete rel.instance.attributes[rel.keySource];
                }, this);
            },
            queue: function(func) {
                this._queue.add(func);
            },
            processQueue: function() {
                this._isInitialized && !this._deferProcessing && this._queue.isBlocked() && this._queue.unblock();
            },
            getRelation: function(key) {
                return this._relations[key];
            },
            getRelations: function() {
                return _.values(this._relations);
            },
            fetchRelated: function(key, options, refresh) {
                options = _.extend({
                    update: !0,
                    remove: !1
                }, options);
                var setUrl, requests = [], rel = this.getRelation(key), idsToFetch = rel && (rel.keyIds && rel.keyIds.slice(0) || (rel.keyId || 0 === rel.keyId ? [ rel.keyId ] : []));
                if (refresh) {
                    var models = rel.related instanceof Backbone.Collection ? rel.related.models : [ rel.related ];
                    _.each(models, function(model) {
                        (model.id || 0 === model.id) && idsToFetch.push(model.id);
                    });
                }
                if (idsToFetch && idsToFetch.length) {
                    var created = [], models = _.map(idsToFetch, function(id) {
                        var model = Backbone.Relational.store.find(rel.relatedModel, id);
                        if (!model) {
                            var attrs = {};
                            attrs[rel.relatedModel.prototype.idAttribute] = id, model = rel.relatedModel.findOrCreate(attrs, options), 
                            created.push(model);
                        }
                        return model;
                    }, this);
                    if (rel.related instanceof Backbone.Collection && _.isFunction(rel.related.url) && (setUrl = rel.related.url(models)), 
                    setUrl && setUrl !== rel.related.url()) {
                        var opts = _.defaults({
                            error: function() {
                                var args = arguments;
                                _.each(created, function(model) {
                                    model.trigger("destroy", model, model.collection, options), options.error && options.error.apply(model, args);
                                });
                            },
                            url: setUrl
                        }, options);
                        requests = [ rel.related.fetch(opts) ];
                    } else requests = _.map(models, function(model) {
                        var opts = _.defaults({
                            error: function() {
                                _.contains(created, model) && (model.trigger("destroy", model, model.collection, options), 
                                options.error && options.error.apply(model, arguments));
                            }
                        }, options);
                        return model.fetch(opts);
                    }, this);
                }
                return requests;
            },
            get: function(attr) {
                var originalResult = Backbone.Model.prototype.get.call(this, attr);
                if (!this.dotNotation || -1 === attr.indexOf(".")) return originalResult;
                var splits = attr.split("."), result = _.reduce(splits, function(model, split) {
                    if (_.isNull(model) || _.isUndefined(model)) return undefined;
                    if (model instanceof Backbone.Model) return Backbone.Model.prototype.get.call(model, split);
                    if (model instanceof Backbone.Collection) return Backbone.Collection.prototype.at.call(model, split);
                    throw new Error("Attribute must be an instanceof Backbone.Model or Backbone.Collection. Is: " + model + ", currentSplit: " + split);
                }, this);
                if (originalResult !== undefined && result !== undefined) throw new Error("Ambiguous result for '" + attr + "'. direct result: " + originalResult + ", dotNotation: " + result);
                return originalResult || result;
            },
            set: function(key, value, options) {
                Backbone.Relational.eventQueue.block();
                var attributes;
                _.isObject(key) || null == key ? (attributes = key, options = value) : (attributes = {}, 
                attributes[key] = value);
                try {
                    var id = this.id, newId = attributes && this.idAttribute in attributes && attributes[this.idAttribute];
                    Backbone.Relational.store.checkId(this, newId);
                    var result = Backbone.Model.prototype.set.apply(this, arguments);
                    this._isInitialized || this.isLocked() ? newId && newId !== id && Backbone.Relational.store.update(this) : (this.constructor.initializeModelHierarchy(), 
                    Backbone.Relational.store.register(this), this.initializeRelations(options)), attributes && this.updateRelations(options);
                } finally {
                    Backbone.Relational.eventQueue.unblock();
                }
                return result;
            },
            clone: function() {
                var attributes = _.clone(this.attributes);
                return _.isUndefined(attributes[this.idAttribute]) || (attributes[this.idAttribute] = null), 
                _.each(this.getRelations(), function(rel) {
                    delete attributes[rel.key];
                }), new this.constructor(attributes);
            },
            toJSON: function(options) {
                if (this.isLocked()) return this.id;
                this.acquire();
                var json = Backbone.Model.prototype.toJSON.call(this, options);
                return !this.constructor._superModel || this.constructor._subModelTypeAttribute in json || (json[this.constructor._subModelTypeAttribute] = this.constructor._subModelTypeValue), 
                _.each(this._relations, function(rel) {
                    var related = json[rel.key], includeInJSON = rel.options.includeInJSON, value = null;
                    includeInJSON === !0 ? related && _.isFunction(related.toJSON) && (value = related.toJSON(options)) : _.isString(includeInJSON) ? (related instanceof Backbone.Collection ? value = related.pluck(includeInJSON) : related instanceof Backbone.Model && (value = related.get(includeInJSON)), 
                    includeInJSON === rel.relatedModel.prototype.idAttribute && (rel instanceof Backbone.HasMany ? value = value.concat(rel.keyIds) : rel instanceof Backbone.HasOne && (value = value || rel.keyId))) : _.isArray(includeInJSON) ? related instanceof Backbone.Collection ? (value = [], 
                    related.each(function(model) {
                        var curJson = {};
                        _.each(includeInJSON, function(key) {
                            curJson[key] = model.get(key);
                        }), value.push(curJson);
                    })) : related instanceof Backbone.Model && (value = {}, _.each(includeInJSON, function(key) {
                        value[key] = related.get(key);
                    })) : delete json[rel.key], includeInJSON && (json[rel.keyDestination] = value), 
                    rel.keyDestination !== rel.key && delete json[rel.key];
                }), this.release(), json;
            }
        }, {
            setup: function() {
                return this.prototype.relations = (this.prototype.relations || []).slice(0), this._subModels = {}, 
                this._superModel = null, this.prototype.hasOwnProperty("subModelTypes") ? Backbone.Relational.store.addSubModels(this.prototype.subModelTypes, this) : this.prototype.subModelTypes = null, 
                _.each(this.prototype.relations || [], function(rel) {
                    if (rel.model || (rel.model = this), rel.reverseRelation && rel.model === this) {
                        var preInitialize = !0;
                        if (_.isString(rel.relatedModel)) {
                            var relatedModel = Backbone.Relational.store.getObjectByName(rel.relatedModel);
                            preInitialize = relatedModel && relatedModel.prototype instanceof Backbone.RelationalModel;
                        }
                        preInitialize ? Backbone.Relational.store.initializeRelation(null, rel) : _.isString(rel.relatedModel) && Backbone.Relational.store.addOrphanRelation(rel);
                    }
                }, this), this;
            },
            build: function(attributes, options) {
                this.initializeModelHierarchy();
                var model = this._findSubModelType(this, attributes) || this;
                return new model(attributes, options);
            },
            _findSubModelType: function(type, attributes) {
                if (type._subModels && type.prototype.subModelTypeAttribute in attributes) {
                    var subModelTypeAttribute = attributes[type.prototype.subModelTypeAttribute], subModelType = type._subModels[subModelTypeAttribute];
                    if (subModelType) return subModelType;
                    for (subModelTypeAttribute in type._subModels) if (subModelType = this._findSubModelType(type._subModels[subModelTypeAttribute], attributes)) return subModelType;
                }
                return null;
            },
            initializeModelHierarchy: function() {
                if (this.inheritRelations(), this.prototype.subModelTypes) {
                    var resolvedSubModels = _.keys(this._subModels), unresolvedSubModels = _.omit(this.prototype.subModelTypes, resolvedSubModels);
                    _.each(unresolvedSubModels, function(subModelTypeName) {
                        var subModelType = Backbone.Relational.store.getObjectByName(subModelTypeName);
                        subModelType && subModelType.initializeModelHierarchy();
                    });
                }
            },
            inheritRelations: function() {
                if (_.isUndefined(this._superModel) || _.isNull(this._superModel)) if (Backbone.Relational.store.setupSuperModel(this), 
                this._superModel) {
                    if (this._superModel.inheritRelations(), this._superModel.prototype.relations) {
                        var inheritedRelations = _.select(this._superModel.prototype.relations || [], function(superRel) {
                            return !_.any(this.prototype.relations || [], function(rel) {
                                return superRel.relatedModel === rel.relatedModel && superRel.key === rel.key;
                            }, this);
                        }, this);
                        this.prototype.relations = inheritedRelations.concat(this.prototype.relations);
                    }
                } else this._superModel = !1;
            },
            findOrCreate: function(attributes, options) {
                options || (options = {});
                var parsedAttributes = _.isObject(attributes) && options.parse && this.prototype.parse ? this.prototype.parse(_.clone(attributes)) : attributes, model = Backbone.Relational.store.find(this, parsedAttributes);
                return _.isObject(attributes) && (model && options.merge !== !1 ? (delete options.collection, 
                delete options.url, model.set(parsedAttributes, options)) : model || options.create === !1 || (model = this.build(attributes, options))), 
                model;
            },
            find: function(attributes, options) {
                return options || (options = {}), options.create = !1, this.findOrCreate(attributes, options);
            }
        }), _.extend(Backbone.RelationalModel.prototype, Backbone.Semaphore), Backbone.Collection.prototype.__prepareModel = Backbone.Collection.prototype._prepareModel, 
        Backbone.Collection.prototype._prepareModel = function(attrs, options) {
            var model;
            return attrs instanceof Backbone.Model ? (attrs.collection || (attrs.collection = this), 
            model = attrs) : (options || (options = {}), options.collection = this, model = "undefined" != typeof this.model.findOrCreate ? this.model.findOrCreate(attrs, options) : new this.model(attrs, options), 
            model && model.isNew() && !model._validate(attrs, options) && (this.trigger("invalid", this, attrs, options), 
            model = !1)), model;
        };
        var set = Backbone.Collection.prototype.__set = Backbone.Collection.prototype.set;
        Backbone.Collection.prototype.set = function(models, options) {
            if (!(this.model.prototype instanceof Backbone.RelationalModel)) return set.apply(this, arguments);
            options && options.parse && (models = this.parse(models, options)), _.isArray(models) || (models = models ? [ models ] : []);
            var newModels = [], toAdd = [];
            return _.each(models, function(model) {
                model instanceof Backbone.Model || (model = Backbone.Collection.prototype._prepareModel.call(this, model, options)), 
                model && (toAdd.push(model), this.get(model) || this.get(model.cid) ? null != model.id && (this._byId[model.id] = model) : newModels.push(model));
            }, this), set.call(this, toAdd, _.defaults({
                parse: !1
            }, options)), _.each(newModels, function(model) {
                (this.get(model) || this.get(model.cid)) && this.trigger("relational:add", model, this, options);
            }, this), this;
        };
        var remove = Backbone.Collection.prototype.__remove = Backbone.Collection.prototype.remove;
        Backbone.Collection.prototype.remove = function(models, options) {
            if (!(this.model.prototype instanceof Backbone.RelationalModel)) return remove.apply(this, arguments);
            models = _.isArray(models) ? models.slice(0) : [ models ], options || (options = {});
            var toRemove = [];
            return _.each(models, function(model) {
                model = this.get(model) || model && this.get(model.cid), model && toRemove.push(model);
            }, this), toRemove.length && (remove.call(this, toRemove, options), _.each(toRemove, function(model) {
                this.trigger("relational:remove", model, this, options);
            }, this)), this;
        };
        var reset = Backbone.Collection.prototype.__reset = Backbone.Collection.prototype.reset;
        Backbone.Collection.prototype.reset = function(models, options) {
            return options = _.extend({
                merge: !0
            }, options), reset.call(this, models, options), this.model.prototype instanceof Backbone.RelationalModel && this.trigger("relational:reset", this, options), 
            this;
        };
        var sort = Backbone.Collection.prototype.__sort = Backbone.Collection.prototype.sort;
        Backbone.Collection.prototype.sort = function(options) {
            return sort.call(this, options), this.model.prototype instanceof Backbone.RelationalModel && this.trigger("relational:reset", this, options), 
            this;
        };
        var trigger = Backbone.Collection.prototype.__trigger = Backbone.Collection.prototype.trigger;
        Backbone.Collection.prototype.trigger = function(eventName) {
            if (!(this.model.prototype instanceof Backbone.RelationalModel)) return trigger.apply(this, arguments);
            if ("add" === eventName || "remove" === eventName || "reset" === eventName || "sort" === eventName) {
                var dit = this, args = arguments;
                _.isObject(args[3]) && (args = _.toArray(args), args[3] = _.clone(args[3])), Backbone.Relational.eventQueue.add(function() {
                    trigger.apply(dit, args);
                });
            } else trigger.apply(this, arguments);
            return this;
        }, Backbone.RelationalModel.extend = function() {
            var child = Backbone.Model.extend.apply(this, arguments);
            return child.setup(this), child;
        };
    }(), Backbone.ChildViewContainer = function(a, b) {
        var c = function(a) {
            this._views = {}, this._indexByModel = {}, this._indexByCustom = {}, this._updateLength(), 
            b.each(a, this.add, this);
        };
        b.extend(c.prototype, {
            add: function(a, b) {
                var c = a.cid;
                this._views[c] = a, a.model && (this._indexByModel[a.model.cid] = c), b && (this._indexByCustom[b] = c), 
                this._updateLength();
            },
            findByModel: function(a) {
                return this.findByModelCid(a.cid);
            },
            findByModelCid: function(a) {
                var b = this._indexByModel[a];
                return this.findByCid(b);
            },
            findByCustom: function(a) {
                var b = this._indexByCustom[a];
                return this.findByCid(b);
            },
            findByIndex: function(a) {
                return b.values(this._views)[a];
            },
            findByCid: function(a) {
                return this._views[a];
            },
            remove: function(a) {
                var c = a.cid;
                a.model && delete this._indexByModel[a.model.cid], b.any(this._indexByCustom, function(a, b) {
                    return a === c ? (delete this._indexByCustom[b], !0) : void 0;
                }, this), delete this._views[c], this._updateLength();
            },
            call: function(a) {
                this.apply(a, b.tail(arguments));
            },
            apply: function(a, c) {
                b.each(this._views, function(d) {
                    b.isFunction(d[a]) && d[a].apply(d, c || []);
                });
            },
            _updateLength: function() {
                this.length = b.size(this._views);
            }
        });
        var d = [ "forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck" ];
        return b.each(d, function(a) {
            c.prototype[a] = function() {
                var c = b.values(this._views), d = [ c ].concat(b.toArray(arguments));
                return b[a].apply(b, d);
            };
        }), c;
    }(Backbone, _), Backbone.Wreqr = function(a, b, c) {
        "use strict";
        var d = {};
        return d.Handlers = function(a, b) {
            var c = function(a) {
                this.options = a, this._wreqrHandlers = {}, b.isFunction(this.initialize) && this.initialize(a);
            };
            return c.extend = a.Model.extend, b.extend(c.prototype, a.Events, {
                setHandlers: function(a) {
                    b.each(a, function(a, c) {
                        var d = null;
                        b.isObject(a) && !b.isFunction(a) && (d = a.context, a = a.callback), this.setHandler(c, a, d);
                    }, this);
                },
                setHandler: function(a, b, c) {
                    var d = {
                        callback: b,
                        context: c
                    };
                    this._wreqrHandlers[a] = d, this.trigger("handler:add", a, b, c);
                },
                hasHandler: function(a) {
                    return !!this._wreqrHandlers[a];
                },
                getHandler: function(a) {
                    var b = this._wreqrHandlers[a];
                    if (!b) throw new Error("Handler not found for '" + a + "'");
                    return function() {
                        var a = Array.prototype.slice.apply(arguments);
                        return b.callback.apply(b.context, a);
                    };
                },
                removeHandler: function(a) {
                    delete this._wreqrHandlers[a];
                },
                removeAllHandlers: function() {
                    this._wreqrHandlers = {};
                }
            }), c;
        }(a, c), d.CommandStorage = function() {
            var b = function(a) {
                this.options = a, this._commands = {}, c.isFunction(this.initialize) && this.initialize(a);
            };
            return c.extend(b.prototype, a.Events, {
                getCommands: function(a) {
                    var b = this._commands[a];
                    return b || (b = {
                        command: a,
                        instances: []
                    }, this._commands[a] = b), b;
                },
                addCommand: function(a, b) {
                    var c = this.getCommands(a);
                    c.instances.push(b);
                },
                clearCommands: function(a) {
                    var b = this.getCommands(a);
                    b.instances = [];
                }
            }), b;
        }(), d.Commands = function(a) {
            return a.Handlers.extend({
                storageType: a.CommandStorage,
                constructor: function(b) {
                    this.options = b || {}, this._initializeStorage(this.options), this.on("handler:add", this._executeCommands, this);
                    var c = Array.prototype.slice.call(arguments);
                    a.Handlers.prototype.constructor.apply(this, c);
                },
                execute: function(a, b) {
                    a = arguments[0], b = Array.prototype.slice.call(arguments, 1), this.hasHandler(a) ? this.getHandler(a).apply(this, b) : this.storage.addCommand(a, b);
                },
                _executeCommands: function(a, b, d) {
                    var e = this.storage.getCommands(a);
                    c.each(e.instances, function(a) {
                        b.apply(d, a);
                    }), this.storage.clearCommands(a);
                },
                _initializeStorage: function(a) {
                    var b, d = a.storageType || this.storageType;
                    b = c.isFunction(d) ? new d() : d, this.storage = b;
                }
            });
        }(d), d.RequestResponse = function(a) {
            return a.Handlers.extend({
                request: function() {
                    var a = arguments[0], b = Array.prototype.slice.call(arguments, 1);
                    return this.getHandler(a).apply(this, b);
                }
            });
        }(d), d.EventAggregator = function(a, b) {
            var c = function() {};
            return c.extend = a.Model.extend, b.extend(c.prototype, a.Events), c;
        }(a, c), d;
    }(Backbone, Backbone.Marionette, _);
    var Marionette = function(a, b, c) {
        "use strict";
        function d(a) {
            return g.call(a);
        }
        function e(a, b) {
            var c = new Error(a);
            throw c.name = b || "Error", c;
        }
        var f = {};
        b.Marionette = f, f.$ = b.$;
        var g = Array.prototype.slice;
        return f.extend = b.Model.extend, f.getOption = function(a, b) {
            if (a && b) {
                var c;
                return c = a.options && b in a.options && void 0 !== a.options[b] ? a.options[b] : a[b];
            }
        }, f.triggerMethod = function() {
            function a(a, b, c) {
                return c.toUpperCase();
            }
            var b = /(^|:)(\w)/gi, d = function(d) {
                var e = "on" + d.replace(b, a), f = this[e];
                return c.isFunction(this.trigger) && this.trigger.apply(this, arguments), c.isFunction(f) ? f.apply(this, c.tail(arguments)) : void 0;
            };
            return d;
        }(), f.MonitorDOMRefresh = function() {
            function a(a) {
                a._isShown = !0, d(a);
            }
            function b(a) {
                a._isRendered = !0, d(a);
            }
            function d(a) {
                a._isShown && a._isRendered && c.isFunction(a.triggerMethod) && a.triggerMethod("dom:refresh");
            }
            return function(c) {
                c.listenTo(c, "show", function() {
                    a(c);
                }), c.listenTo(c, "render", function() {
                    b(c);
                });
            };
        }(), function(a) {
            function b(a, b, d, f) {
                var g = f.split(/\s+/);
                c.each(g, function(c) {
                    var f = a[c];
                    f || e("Method '" + c + "' was configured as an event handler, but does not exist."), 
                    a.listenTo(b, d, f, a);
                });
            }
            function d(a, b, c, d) {
                a.listenTo(b, c, d, a);
            }
            function f(a, b, d, e) {
                var f = e.split(/\s+/);
                c.each(f, function(c) {
                    var e = a[c];
                    a.stopListening(b, d, e, a);
                });
            }
            function g(a, b, c, d) {
                a.stopListening(b, c, d, a);
            }
            function h(a, b, d, e, f) {
                b && d && (c.isFunction(d) && (d = d.call(a)), c.each(d, function(d, g) {
                    c.isFunction(d) ? e(a, b, g, d) : f(a, b, g, d);
                }));
            }
            a.bindEntityEvents = function(a, c, e) {
                h(a, c, e, d, b);
            }, a.unbindEntityEvents = function(a, b, c) {
                h(a, b, c, g, f);
            };
        }(f), f.Callbacks = function() {
            this._deferred = f.$.Deferred(), this._callbacks = [];
        }, c.extend(f.Callbacks.prototype, {
            add: function(a, b) {
                this._callbacks.push({
                    cb: a,
                    ctx: b
                }), this._deferred.done(function(c, d) {
                    b && (c = b), a.call(c, d);
                });
            },
            run: function(a, b) {
                this._deferred.resolve(b, a);
            },
            reset: function() {
                var a = this._callbacks;
                this._deferred = f.$.Deferred(), this._callbacks = [], c.each(a, function(a) {
                    this.add(a.cb, a.ctx);
                }, this);
            }
        }), f.Controller = function(a) {
            this.triggerMethod = f.triggerMethod, this.options = a || {}, c.isFunction(this.initialize) && this.initialize(this.options);
        }, f.Controller.extend = f.extend, c.extend(f.Controller.prototype, b.Events, {
            close: function() {
                this.stopListening(), this.triggerMethod("close"), this.unbind();
            }
        }), f.Region = function(a) {
            if (this.options = a || {}, this.el = f.getOption(this, "el"), !this.el) {
                var b = new Error("An 'el' must be specified for a region.");
                throw b.name = "NoElError", b;
            }
            if (this.initialize) {
                var c = Array.prototype.slice.apply(arguments);
                this.initialize.apply(this, c);
            }
        }, c.extend(f.Region, {
            buildRegion: function(a, b) {
                var d = "string" == typeof a, e = "string" == typeof a.selector, f = "undefined" == typeof a.regionType, g = "function" == typeof a;
                if (!g && !d && !e) throw new Error("Region must be specified as a Region type, a selector string or an object with selector property");
                var h, i;
                d && (h = a), a.selector && (h = a.selector), g && (i = a), !g && f && (i = b), 
                a.regionType && (i = a.regionType);
                var j = new i({
                    el: h
                });
                return a.parentEl && (j.getEl = function(b) {
                    var d = a.parentEl;
                    return c.isFunction(d) && (d = d()), d.find(b);
                }), j;
            }
        }), c.extend(f.Region.prototype, b.Events, {
            show: function(a) {
                this.ensureEl();
                var b = a.isClosed || c.isUndefined(a.$el), d = a !== this.currentView;
                d && this.close(), a.render(), (d || b) && this.open(a), this.currentView = a, f.triggerMethod.call(this, "show", a), 
                f.triggerMethod.call(a, "show");
            },
            ensureEl: function() {
                this.$el && 0 !== this.$el.length || (this.$el = this.getEl(this.el));
            },
            getEl: function(a) {
                return f.$(a);
            },
            open: function(a) {
                this.$el.empty().append(a.el);
            },
            close: function() {
                var a = this.currentView;
                a && !a.isClosed && (a.close ? a.close() : a.remove && a.remove(), f.triggerMethod.call(this, "close"), 
                delete this.currentView);
            },
            attachView: function(a) {
                this.currentView = a;
            },
            reset: function() {
                this.close(), delete this.$el;
            }
        }), f.Region.extend = f.extend, f.RegionManager = function(a) {
            var b = a.Controller.extend({
                constructor: function(b) {
                    this._regions = {}, a.Controller.prototype.constructor.call(this, b);
                },
                addRegions: function(a, b) {
                    var d = {};
                    return c.each(a, function(a, e) {
                        "string" == typeof a && (a = {
                            selector: a
                        }), a.selector && (a = c.defaults({}, a, b));
                        var f = this.addRegion(e, a);
                        d[e] = f;
                    }, this), d;
                },
                addRegion: function(b, d) {
                    var e, f = c.isObject(d), g = c.isString(d), h = !!d.selector;
                    return e = g || f && h ? a.Region.buildRegion(d, a.Region) : c.isFunction(d) ? a.Region.buildRegion(d, a.Region) : d, 
                    this._store(b, e), this.triggerMethod("region:add", b, e), e;
                },
                get: function(a) {
                    return this._regions[a];
                },
                removeRegion: function(a) {
                    var b = this._regions[a];
                    this._remove(a, b);
                },
                removeRegions: function() {
                    c.each(this._regions, function(a, b) {
                        this._remove(b, a);
                    }, this);
                },
                closeRegions: function() {
                    c.each(this._regions, function(a) {
                        a.close();
                    }, this);
                },
                close: function() {
                    this.removeRegions();
                    var b = Array.prototype.slice.call(arguments);
                    a.Controller.prototype.close.apply(this, b);
                },
                _store: function(a, b) {
                    this._regions[a] = b, this._setLength();
                },
                _remove: function(a, b) {
                    b.close(), delete this._regions[a], this._setLength(), this.triggerMethod("region:remove", a, b);
                },
                _setLength: function() {
                    this.length = c.size(this._regions);
                }
            }), d = [ "forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck" ];
            return c.each(d, function(a) {
                b.prototype[a] = function() {
                    var b = c.values(this._regions), d = [ b ].concat(c.toArray(arguments));
                    return c[a].apply(c, d);
                };
            }), b;
        }(f), f.TemplateCache = function(a) {
            this.templateId = a;
        }, c.extend(f.TemplateCache, {
            templateCaches: {},
            get: function(a) {
                var b = this.templateCaches[a];
                return b || (b = new f.TemplateCache(a), this.templateCaches[a] = b), b.load();
            },
            clear: function() {
                var a, b = d(arguments), c = b.length;
                if (c > 0) for (a = 0; c > a; a++) delete this.templateCaches[b[a]]; else this.templateCaches = {};
            }
        }), c.extend(f.TemplateCache.prototype, {
            load: function() {
                if (this.compiledTemplate) return this.compiledTemplate;
                var a = this.loadTemplate(this.templateId);
                return this.compiledTemplate = this.compileTemplate(a), this.compiledTemplate;
            },
            loadTemplate: function(a) {
                var b = f.$(a).html();
                return b && 0 !== b.length || e("Could not find template: '" + a + "'", "NoTemplateError"), 
                b;
            },
            compileTemplate: function(a) {
                return c.template(a);
            }
        }), f.Renderer = {
            render: function(a, b) {
                if (!a) {
                    var c = new Error("Cannot render the template since it's false, null or undefined.");
                    throw c.name = "TemplateNotFoundError", c;
                }
                var d;
                return d = "function" == typeof a ? a : f.TemplateCache.get(a), d(b);
            }
        }, f.View = b.View.extend({
            constructor: function(a) {
                c.bindAll(this, "render");
                var d = Array.prototype.slice.apply(arguments);
                this.options = a || {}, b.View.prototype.constructor.apply(this, d), f.MonitorDOMRefresh(this), 
                this.listenTo(this, "show", this.onShowCalled, this);
            },
            triggerMethod: f.triggerMethod,
            getTemplate: function() {
                return f.getOption(this, "template");
            },
            mixinTemplateHelpers: function(a) {
                a = a || {};
                var b = f.getOption(this, "templateHelpers");
                return c.isFunction(b) && (b = b.call(this)), c.extend(a, b);
            },
            configureTriggers: function() {
                if (this.triggers) {
                    var a = {}, b = c.result(this, "triggers");
                    return c.each(b, function(b, d) {
                        var e = c.isObject(b), f = e ? b.event : b;
                        a[d] = function(a) {
                            if (a) {
                                var c = a.preventDefault, d = a.stopPropagation, g = e ? b.preventDefault : c, h = e ? b.stopPropagation : d;
                                g && c && c.apply(a), h && d && d.apply(a);
                            }
                            var i = {
                                view: this,
                                model: this.model,
                                collection: this.collection
                            };
                            this.triggerMethod(f, i);
                        };
                    }, this), a;
                }
            },
            delegateEvents: function(a) {
                this._delegateDOMEvents(a), f.bindEntityEvents(this, this.model, f.getOption(this, "modelEvents")), 
                f.bindEntityEvents(this, this.collection, f.getOption(this, "collectionEvents"));
            },
            _delegateDOMEvents: function(a) {
                a = a || this.events, c.isFunction(a) && (a = a.call(this));
                var d = {}, e = this.configureTriggers();
                c.extend(d, a, e), b.View.prototype.delegateEvents.call(this, d);
            },
            undelegateEvents: function() {
                var a = Array.prototype.slice.call(arguments);
                b.View.prototype.undelegateEvents.apply(this, a), f.unbindEntityEvents(this, this.model, f.getOption(this, "modelEvents")), 
                f.unbindEntityEvents(this, this.collection, f.getOption(this, "collectionEvents"));
            },
            onShowCalled: function() {},
            close: function() {
                if (!this.isClosed) {
                    var a = this.triggerMethod("before:close");
                    a !== !1 && (this.isClosed = !0, this.triggerMethod("close"), this.unbindUIElements(), 
                    this.remove());
                }
            },
            bindUIElements: function() {
                if (this.ui) {
                    this._uiBindings || (this._uiBindings = this.ui);
                    var a = c.result(this, "_uiBindings");
                    this.ui = {}, c.each(c.keys(a), function(b) {
                        var c = a[b];
                        this.ui[b] = this.$(c);
                    }, this);
                }
            },
            unbindUIElements: function() {
                this.ui && this._uiBindings && (c.each(this.ui, function(a, b) {
                    delete this.ui[b];
                }, this), this.ui = this._uiBindings, delete this._uiBindings);
            }
        }), f.ItemView = f.View.extend({
            constructor: function() {
                f.View.prototype.constructor.apply(this, d(arguments));
            },
            serializeData: function() {
                var a = {};
                return this.model ? a = this.model.toJSON() : this.collection && (a = {
                    items: this.collection.toJSON()
                }), a;
            },
            render: function() {
                this.isClosed = !1, this.triggerMethod("before:render", this), this.triggerMethod("item:before:render", this);
                var a = this.serializeData();
                a = this.mixinTemplateHelpers(a);
                var b = this.getTemplate(), c = f.Renderer.render(b, a);
                return this.$el.html(c), this.bindUIElements(), this.triggerMethod("render", this), 
                this.triggerMethod("item:rendered", this), this;
            },
            close: function() {
                this.isClosed || (this.triggerMethod("item:before:close"), f.View.prototype.close.apply(this, d(arguments)), 
                this.triggerMethod("item:closed"));
            }
        }), f.CollectionView = f.View.extend({
            itemViewEventPrefix: "itemview",
            constructor: function() {
                this._initChildViewStorage(), f.View.prototype.constructor.apply(this, d(arguments)), 
                this._initialEvents(), this.initRenderBuffer();
            },
            initRenderBuffer: function() {
                this.elBuffer = document.createDocumentFragment();
            },
            startBuffering: function() {
                this.initRenderBuffer(), this.isBuffering = !0;
            },
            endBuffering: function() {
                this.appendBuffer(this, this.elBuffer), this.initRenderBuffer(), this.isBuffering = !1;
            },
            _initialEvents: function() {
                this.collection && (this.listenTo(this.collection, "add", this.addChildView, this), 
                this.listenTo(this.collection, "remove", this.removeItemView, this), this.listenTo(this.collection, "reset", this.render, this));
            },
            addChildView: function(a) {
                this.closeEmptyView();
                var b = this.getItemView(a), c = this.collection.indexOf(a);
                this.addItemView(a, b, c);
            },
            onShowCalled: function() {
                this.children.each(function(a) {
                    f.triggerMethod.call(a, "show");
                });
            },
            triggerBeforeRender: function() {
                this.triggerMethod("before:render", this), this.triggerMethod("collection:before:render", this);
            },
            triggerRendered: function() {
                this.triggerMethod("render", this), this.triggerMethod("collection:rendered", this);
            },
            render: function() {
                return this.isClosed = !1, this.triggerBeforeRender(), this._renderChildren(), this.triggerRendered(), 
                this;
            },
            _renderChildren: function() {
                this.startBuffering(), this.closeEmptyView(), this.closeChildren(), this.collection && this.collection.length > 0 ? this.showCollection() : this.showEmptyView(), 
                this.endBuffering();
            },
            showCollection: function() {
                var a;
                this.collection.each(function(b, c) {
                    a = this.getItemView(b), this.addItemView(b, a, c);
                }, this);
            },
            showEmptyView: function() {
                var a = this.getEmptyView();
                if (a && !this._showingEmptyView) {
                    this._showingEmptyView = !0;
                    var c = new b.Model();
                    this.addItemView(c, a, 0);
                }
            },
            closeEmptyView: function() {
                this._showingEmptyView && (this.closeChildren(), delete this._showingEmptyView);
            },
            getEmptyView: function() {
                return f.getOption(this, "emptyView");
            },
            getItemView: function() {
                var a = f.getOption(this, "itemView");
                return a || e("An `itemView` must be specified", "NoItemViewError"), a;
            },
            addItemView: function(a, b, d) {
                var e = f.getOption(this, "itemViewOptions");
                c.isFunction(e) && (e = e.call(this, a, d));
                var g = this.buildItemView(a, b, e);
                this.addChildViewEventForwarding(g), this.triggerMethod("before:item:added", g), 
                this.children.add(g), this.renderItemView(g, d), this._isShown && f.triggerMethod.call(g, "show"), 
                this.triggerMethod("after:item:added", g);
            },
            addChildViewEventForwarding: function(a) {
                var b = f.getOption(this, "itemViewEventPrefix");
                this.listenTo(a, "all", function() {
                    var c = d(arguments);
                    c[0] = b + ":" + c[0], c.splice(1, 0, a), f.triggerMethod.apply(this, c);
                }, this);
            },
            renderItemView: function(a, b) {
                a.render(), this.appendHtml(this, a, b);
            },
            buildItemView: function(a, b, d) {
                var e = c.extend({
                    model: a
                }, d);
                return new b(e);
            },
            removeItemView: function(a) {
                var b = this.children.findByModel(a);
                this.removeChildView(b), this.checkEmpty();
            },
            removeChildView: function(a) {
                a && (this.stopListening(a), a.close ? a.close() : a.remove && a.remove(), this.children.remove(a)), 
                this.triggerMethod("item:removed", a);
            },
            checkEmpty: function() {
                this.collection && 0 !== this.collection.length || this.showEmptyView();
            },
            appendBuffer: function(a, b) {
                a.$el.append(b);
            },
            appendHtml: function(a, b) {
                a.isBuffering ? a.elBuffer.appendChild(b.el) : a.$el.append(b.el);
            },
            _initChildViewStorage: function() {
                this.children = new b.ChildViewContainer();
            },
            close: function() {
                this.isClosed || (this.triggerMethod("collection:before:close"), this.closeChildren(), 
                this.triggerMethod("collection:closed"), f.View.prototype.close.apply(this, d(arguments)));
            },
            closeChildren: function() {
                this.children.each(function(a) {
                    this.removeChildView(a);
                }, this), this.checkEmpty();
            }
        }), f.CompositeView = f.CollectionView.extend({
            constructor: function() {
                f.CollectionView.prototype.constructor.apply(this, d(arguments));
            },
            _initialEvents: function() {
                this.once("render", function() {
                    this.collection && (this.listenTo(this.collection, "add", this.addChildView, this), 
                    this.listenTo(this.collection, "remove", this.removeItemView, this), this.listenTo(this.collection, "reset", this._renderChildren, this));
                });
            },
            getItemView: function() {
                var a = f.getOption(this, "itemView") || this.constructor;
                return a || e("An `itemView` must be specified", "NoItemViewError"), a;
            },
            serializeData: function() {
                var a = {};
                return this.model && (a = this.model.toJSON()), a;
            },
            render: function() {
                this.isRendered = !0, this.isClosed = !1, this.resetItemViewContainer(), this.triggerBeforeRender();
                var a = this.renderModel();
                return this.$el.html(a), this.bindUIElements(), this.triggerMethod("composite:model:rendered"), 
                this._renderChildren(), this.triggerMethod("composite:rendered"), this.triggerRendered(), 
                this;
            },
            _renderChildren: function() {
                this.isRendered && (f.CollectionView.prototype._renderChildren.call(this), this.triggerMethod("composite:collection:rendered"));
            },
            renderModel: function() {
                var a = {};
                a = this.serializeData(), a = this.mixinTemplateHelpers(a);
                var b = this.getTemplate();
                return f.Renderer.render(b, a);
            },
            appendBuffer: function(a, b) {
                var c = this.getItemViewContainer(a);
                c.append(b);
            },
            appendHtml: function(a, b) {
                if (a.isBuffering) a.elBuffer.appendChild(b.el); else {
                    var c = this.getItemViewContainer(a);
                    c.append(b.el);
                }
            },
            getItemViewContainer: function(a) {
                if ("$itemViewContainer" in a) return a.$itemViewContainer;
                var b, d = f.getOption(a, "itemViewContainer");
                if (d) {
                    var g = c.isFunction(d) ? d() : d;
                    b = a.$(g), b.length <= 0 && e("The specified `itemViewContainer` was not found: " + a.itemViewContainer, "ItemViewContainerMissingError");
                } else b = a.$el;
                return a.$itemViewContainer = b, b;
            },
            resetItemViewContainer: function() {
                this.$itemViewContainer && delete this.$itemViewContainer;
            }
        }), f.Layout = f.ItemView.extend({
            regionType: f.Region,
            constructor: function(a) {
                a = a || {}, this._firstRender = !0, this._initializeRegions(a), f.ItemView.prototype.constructor.call(this, a);
            },
            render: function() {
                this.isClosed && this._initializeRegions(), this._firstRender ? this._firstRender = !1 : this.isClosed || this._reInitializeRegions();
                var a = Array.prototype.slice.apply(arguments), b = f.ItemView.prototype.render.apply(this, a);
                return b;
            },
            close: function() {
                if (!this.isClosed) {
                    this.regionManager.close();
                    var a = Array.prototype.slice.apply(arguments);
                    f.ItemView.prototype.close.apply(this, a);
                }
            },
            addRegion: function(a, b) {
                var c = {};
                return c[a] = b, this._buildRegions(c)[a];
            },
            addRegions: function(a) {
                return this.regions = c.extend({}, this.regions, a), this._buildRegions(a);
            },
            removeRegion: function(a) {
                return delete this.regions[a], this.regionManager.removeRegion(a);
            },
            _buildRegions: function(a) {
                var b = this, c = {
                    regionType: f.getOption(this, "regionType"),
                    parentEl: function() {
                        return b.$el;
                    }
                };
                return this.regionManager.addRegions(a, c);
            },
            _initializeRegions: function(a) {
                var b;
                this._initRegionManager(), b = c.isFunction(this.regions) ? this.regions(a) : this.regions || {}, 
                this.addRegions(b);
            },
            _reInitializeRegions: function() {
                this.regionManager.closeRegions(), this.regionManager.each(function(a) {
                    a.reset();
                });
            },
            _initRegionManager: function() {
                this.regionManager = new f.RegionManager(), this.listenTo(this.regionManager, "region:add", function(a, b) {
                    this[a] = b, this.trigger("region:add", a, b);
                }), this.listenTo(this.regionManager, "region:remove", function(a, b) {
                    delete this[a], this.trigger("region:remove", a, b);
                });
            }
        }), f.AppRouter = b.Router.extend({
            constructor: function(a) {
                b.Router.prototype.constructor.apply(this, d(arguments)), this.options = a || {};
                var c = f.getOption(this, "appRoutes"), e = this._getController();
                this.processAppRoutes(e, c);
            },
            appRoute: function(a, b) {
                var c = this._getController();
                this._addAppRoute(c, a, b);
            },
            processAppRoutes: function(a, b) {
                if (b) {
                    var d = c.keys(b).reverse();
                    c.each(d, function(c) {
                        this._addAppRoute(a, c, b[c]);
                    }, this);
                }
            },
            _getController: function() {
                return f.getOption(this, "controller");
            },
            _addAppRoute: function(a, b, d) {
                var e = a[d];
                if (!e) throw new Error("Method '" + d + "' was not found on the controller");
                this.route(b, d, c.bind(e, a));
            }
        }), f.Application = function(a) {
            this._initRegionManager(), this._initCallbacks = new f.Callbacks(), this.vent = new b.Wreqr.EventAggregator(), 
            this.commands = new b.Wreqr.Commands(), this.reqres = new b.Wreqr.RequestResponse(), 
            this.submodules = {}, c.extend(this, a), this.triggerMethod = f.triggerMethod;
        }, c.extend(f.Application.prototype, b.Events, {
            execute: function() {
                var a = Array.prototype.slice.apply(arguments);
                this.commands.execute.apply(this.commands, a);
            },
            request: function() {
                var a = Array.prototype.slice.apply(arguments);
                return this.reqres.request.apply(this.reqres, a);
            },
            addInitializer: function(a) {
                this._initCallbacks.add(a);
            },
            start: function(a) {
                this.triggerMethod("initialize:before", a), this._initCallbacks.run(a, this), this.triggerMethod("initialize:after", a), 
                this.triggerMethod("start", a);
            },
            addRegions: function(a) {
                return this._regionManager.addRegions(a);
            },
            closeRegions: function() {
                this._regionManager.closeRegions();
            },
            removeRegion: function(a) {
                this._regionManager.removeRegion(a);
            },
            getRegion: function(a) {
                return this._regionManager.get(a);
            },
            module: function() {
                var a = d(arguments);
                return a.unshift(this), f.Module.create.apply(f.Module, a);
            },
            _initRegionManager: function() {
                this._regionManager = new f.RegionManager(), this.listenTo(this._regionManager, "region:add", function(a, b) {
                    this[a] = b;
                }), this.listenTo(this._regionManager, "region:remove", function(a) {
                    delete this[a];
                });
            }
        }), f.Application.extend = f.extend, f.Module = function(a, b) {
            this.moduleName = a, this.submodules = {}, this._setupInitializersAndFinalizers(), 
            this.app = b, this.startWithParent = !0, this.triggerMethod = f.triggerMethod;
        }, c.extend(f.Module.prototype, b.Events, {
            addInitializer: function(a) {
                this._initializerCallbacks.add(a);
            },
            addFinalizer: function(a) {
                this._finalizerCallbacks.add(a);
            },
            start: function(a) {
                this._isInitialized || (c.each(this.submodules, function(b) {
                    b.startWithParent && b.start(a);
                }), this.triggerMethod("before:start", a), this._initializerCallbacks.run(a, this), 
                this._isInitialized = !0, this.triggerMethod("start", a));
            },
            stop: function() {
                this._isInitialized && (this._isInitialized = !1, f.triggerMethod.call(this, "before:stop"), 
                c.each(this.submodules, function(a) {
                    a.stop();
                }), this._finalizerCallbacks.run(void 0, this), this._initializerCallbacks.reset(), 
                this._finalizerCallbacks.reset(), f.triggerMethod.call(this, "stop"));
            },
            addDefinition: function(a, b) {
                this._runModuleDefinition(a, b);
            },
            _runModuleDefinition: function(a, d) {
                if (a) {
                    var e = c.flatten([ this, this.app, b, f, f.$, c, d ]);
                    a.apply(this, e);
                }
            },
            _setupInitializersAndFinalizers: function() {
                this._initializerCallbacks = new f.Callbacks(), this._finalizerCallbacks = new f.Callbacks();
            }
        }), c.extend(f.Module, {
            create: function(a, b, e) {
                var f = a, g = d(arguments);
                g.splice(0, 3), b = b.split(".");
                var h = b.length, i = [];
                return i[h - 1] = e, c.each(b, function(b, c) {
                    var d = f;
                    f = this._getModule(d, b, a), this._addModuleDefinition(d, f, i[c], g);
                }, this), f;
            },
            _getModule: function(a, b, c) {
                var d = a[b];
                return d || (d = new f.Module(b, c), a[b] = d, a.submodules[b] = d), d;
            },
            _addModuleDefinition: function(a, b, d, e) {
                var f, g;
                c.isFunction(d) ? (f = d, g = !0) : c.isObject(d) ? (f = d.define, g = d.startWithParent) : g = !0, 
                f && b.addDefinition(f, e), b.startWithParent = b.startWithParent && g, b.startWithParent && !b.startWithParentIsConfigured && (b.startWithParentIsConfigured = !0, 
                a.addInitializer(function(a) {
                    b.startWithParent && b.start(a);
                }));
            }
        }), f;
    }(this, Backbone, _);
    window.$pureChatJquery && (Backbone.$ = window.$pureChatJquery, Marionette.$ = window.$pureChatJquery), 
    purechatApp = new Backbone.Marionette.Application(), purechatApp.start(), Backbone.Relational.showWarnings = !1, 
    purechatApp.module("Constants", function(Constants) {
        Constants.WidgetType = {
            Tab: 1,
            Button: 2,
            Image: 3,
            ImageTab: 4
        }, Constants.WidgetStates = {
            Initializing: "PCStateInitializing",
            Inactive: "PCStateInactive",
            Activating: "PCStateActivating",
            Chatting: "PCStateChatting",
            Closed: "PCStateClosed",
            Unavailable: "PCStateUnavailable"
        };
    }), purechatApp.module("Utils", function(Utils, app, Backbone, Marionette, $) {
        $.throttle = function(delay, no_trailing, callback, debounce_mode) {
            function wrapper() {
                function exec() {
                    last_exec = +new Date(), callback.apply(that, args);
                }
                function clear() {
                    timeout_id = void 0;
                }
                var that = this, elapsed = +new Date() - last_exec, args = arguments;
                debounce_mode && !timeout_id && exec(), timeout_id && clearTimeout(timeout_id), 
                void 0 === debounce_mode && elapsed > delay ? exec() : no_trailing !== !0 && (timeout_id = setTimeout(debounce_mode ? clear : exec, void 0 === debounce_mode ? delay - elapsed : delay));
            }
            var timeout_id, last_exec = 0;
            return "boolean" != typeof no_trailing && (debounce_mode = callback, callback = no_trailing, 
            no_trailing = void 0), $.guid && (wrapper.guid = callback.guid = callback.guid || $.guid++), 
            wrapper;
        }, Utils.linkify = function(message) {
            return linkifiedMessage = message.replace(/(?=[a-zA-Z0-9])[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.(com|net|edu|gov|io|us|org|info|tv|mobi|au|nz|uk|br|es|dk|se|fi|nl|ca)\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/gi, function(url) {
                return -1 != url.indexOf("@") ? '<a href="mailto:' + url + '" target="_blank">' + url + "</a>" : (0 != url.indexOf("http") && (url = "http://" + url), 
                '<a href="' + url + '" target="_blank">' + url + "</a>");
            });
        }, Utils.GaEvent = function(widgetSettings, eventEnabled, event) {
            var category = "GAEventCategory";
            widgetSettings.get("UsingGa") && widgetSettings.get(eventEnabled) && widgetSettings.get(event) && (window._gaq || window.ga || this.isOperator || (!function(i, s, o, g, r, a, m) {
                i.GoogleAnalyticsObject = r, i[r] = i[r] || function() {
                    (i[r].q = i[r].q || []).push(arguments);
                }, i[r].l = 1 * new Date(), a = s.createElement(o), m = s.getElementsByTagName(o)[0], 
                a.async = 1, a.src = g, m.parentNode.insertBefore(a, m);
            }(window, document, "script", "//www.google-analytics.com/analytics.js", "ga"), 
            ga("create", widgetSettings.GoogId)), window._gaq ? window._gaq.push([ "_trackEvent", widgetSettings.get(category), widgetSettings.get(event) ]) : window.ga("send", "event", widgetSettings.get(category), widgetSettings.get(event)));
        }, Utils.Notifier = function() {
            this.isTitleModified = !1, this.windowNotifyTimeout = null, this.timeoutId = null, 
            this.active = !1, this.mobileActive = !1, this.mobileAnimationInterval = null;
        }, Utils.Notifier.prototype.notify = function(message, additionalElement, mouseStopElement) {
            var t = this;
            if (!t.active) {
                t.active = !0;
                var originalTitle = document.title;
                additionalElement && (originalElementTitle = additionalElement.text());
                var switchTitle = function() {
                    return 0 == t.active ? (document.title = originalTitle, additionalElement && additionalElement.text(originalElementTitle), 
                    t.isTitleModified = !1, void 0) : (1 == t.isTitleModified ? (t.isTitleModified = !1, 
                    document.title = originalTitle, additionalElement && additionalElement.text(originalElementTitle)) : (t.isTitleModified = !0, 
                    document.title = message, additionalElement && additionalElement.text(message)), 
                    t.timeoutId = setTimeout(switchTitle, 900), void 0);
                };
                t.timeoutId = setTimeout(switchTitle, 900), mouseStopElement ? mouseStopElement.mousemove(function() {
                    t.stop();
                }) : $(document).mousemove(function() {
                    t.stop();
                });
            }
        }, Utils.Notifier.prototype.stop = function() {
            this.active = !1;
        };
    }), GetReasonFromResponse = function(reason) {
        return 1 == reason ? "Available" : 2 == reason ? "NoOperators" : 3 == reason ? "ServerDowntime" : 4 == reason ? "AccountActivity" : "";
    }, _PCcb = function(response) {
        window._checkChatAvailableDeferred.resolve({
            available: 1 == response.a,
            reason: GetReasonFromResponse(response.r)
        }), window._checkChatAvailableDeferred = null;
    }, !function(exports, global) {
        global["true"] = exports;
        var _ = global._;
        this.templates = this.templates || {}, this.templates.ChatConnecting = function(o) {
            var __t, __p = "", __e = _.escape;
            return __p += '<p class="greeting">' + (null == (__t = o.getResource("greeting", {
                visitorName: o.userName
            })) ? "" : __t) + '!</p><p class="connecting">' + __e(o.getResource("chat_connecting")) + '</p><div class="spinnerContainer" style="height:200px;"></div>';
        }, this.templates.ClosedMessage = function(o) {
            var __t, __p = "", __e = _.escape;
            return __p += '<p class="purechat-message-note">' + __e(o.getResource("closed_message")) + '</p><div class="purechat-thumbs-container"><div class="purechat-thumbs purechat-thumbs-up purechat-thumbs-selectable pc-icon-thumbs-up"></div><div class="purechat-thumbs purechat-thumbs-down purechat-thumbs-selectable pc-icon-thumbs-down"></div></div><p class="purechat-rating-thanks purechat-message-note"></p><p class="purechat-download-container purechat-message-note"><a target="_blank" href="' + (null == (__t = o.get("pureServerUrl")) ? "" : __t) + "/VisitorWidget/Transcript?chatId=" + (null == (__t = o.get("dataController").connectionInfo.get("chatId")) ? "" : __t) + "&authToken=" + (null == (__t = o.get("dataController").connectionInfo.get("authToken")) ? "" : __t) + '">' + __e(o.getResource("closed_downloadTrans")) + "</a></p>";
        }, this.templates.ClosedMessageOperator = function(o) {
            var __t, __p = "", __e = _.escape;
            return Array.prototype.join, console.log(o), __p += '<p class="purechat-message-note">' + __e(o.getResource("closed_opMessage")) + '</p><p class="purechat-message-note"><p><strong>Name:</strong> ' + (null == (__t = o.visitorName) ? "" : __t) + "</p>", 
            o.visitorIPAddressId > -1 && (__p += "<p><strong>IP Address:</strong> " + (null == (__t = o.visitorIPAddress) ? "" : __t) + '<button style="margin-left: 5px; position: relative; top: -3px;" type="button" class="btn ban-ip-operator-button" data-ipaddressid="' + (null == (__t = o.visitorIPAddressId) ? "" : __t) + '">Ban IP</button></p><p><strong>Initial Page:</strong> <a href="' + (null == (__t = o.visitorReferrer) ? "" : __t) + '" target="_blank">' + (null == (__t = o.visitorReferrer) ? "" : __t) + "</a></p>"), 
            __p += "</p>", o.visitorIPAddressId > -1 && (__p += '<form method="get" action="/Chat/Details/' + (null == (__t = o.roomId) ? "" : __t) + '?page=1&showArchived=False""><p><button type="submit" class="btn view-transcript-operator-button" data-ajax="true" data-transcriptid="' + (null == (__t = o.roomId) ? "" : __t) + '">View Transcript</button></p></form><p><a href="/Chat/Download/' + (null == (__t = o.roomId) ? "" : __t) + '" class="btn download-transcript-operator-button" data-ajax="false" data-transcriptid="' + (null == (__t = o.roomId) ? "" : __t) + '">Download Transcript</a></p><p><button type="submit" class="btn email-transcript-operator-button" data-transcriptid="' + (null == (__t = o.roomId) ? "" : __t) + '">Email Transcript</button></p>'), 
            __p += '<div class="modal hide operatorBanIPAddress" data-ipaddressid="' + (null == (__t = o.visitorIPAddressId) ? "" : __t) + '"><div class="modal-header"><button type="button" class="close" data-dismiss="modal">&times;</button><h3 class="title">Confirm</h3></div><div class="modal-body"><p>Are you sure you want to ban this user\'s IP address? (This will prevent all future chats from this IP address)</p></div><div class="modal-footer"><button type="button" id="BanIP-' + (null == (__t = o.visitorIPAddressId) ? "" : __t) + '" class="btn yesbutton" data-ipaddress="' + (null == (__t = o.visitorIPAddress) ? "" : __t) + '" data-ipaddressid="' + (null == (__t = o.visitorIPAddressId) ? "" : __t) + '">Yes</button><button type="button" class="btn" data-dismiss="modal">No</button></div></div><div class="modal hide operatorEmailTranscript" data-transcriptid="' + (null == (__t = o.roomId) ? "" : __t) + '"><div class="modal-header"><button type="button" class="close" data-dismiss="modal">&times;</button><h3 class="title">Email Transcript</h3></div><div class="modal-body"><p>Enter the recipient email addresses, separated by commas.</p><input id="EmailTranscript-' + (null == (__t = o.roomId) ? "" : __t) + '" data-transcriptid="' + (null == (__t = o.roomId) ? "" : __t) + '" class="recipientEmails" type="text" autofocus="autofocus" placeholder="Emails" /></div><div class="modal-footer"><button type="button" class="btn yesbutton send-email-operator-button">Send</button><button type="button" class="btn cancelButton" data-dismiss="modal">Cancel</button></div></div>';
        }, this.templates.EmailSent = function(o) {
            var __t, __p = "";
            return _.escape, __p += '<div class="purechat-enterinfo-container purechat-email-success"><p>Email Sent!</p><table><tr><td>Name: </td><td>' + (null == (__t = o.Name) ? "" : __t) + "</td></tr><tr><td>Email: </td><td>" + (null == (__t = o.Email) ? "" : __t) + "</td></tr><tr><td>Question: </td><td>" + (null == (__t = o.Question) ? "" : __t) + "</td></tr></table></div>";
        }, this.templates.Empty = function() {
            var __p = "";
            return _.escape, __p += "";
        }, this.templates.MessageList = function() {
            var __p = "";
            return _.escape, __p += '<div class="purechat-message-display-container"><div class="purechat-message-display purechat-clearfix"></div></div><div class="purechat-send-form-container"><form class="purechat-send-form" action=""><textarea type="text" class="purechat-send-form-message" name="purechat-send-form-message" /></form></div><div class="purechat-confirm-close-modal" style="display: none;"><span class="message">Are you sure you want to close the chat?</span><div class="modal-button-bar"><button type="button" class="btn close-chat">Yes</button><button type="button" class="btn cancel">No</button></div></div><div class="purchat-confirm-close-modal-overlay" style="display: none;"></div>';
        }, this.templates.MessageView = function(o) {
            var __t, __p = "";
            if (_.escape, Array.prototype.join, "note" == o.type) __p += '<p class="purechat-message-note ' + (null == (__t = o.important ? "important" : "") ? "" : __t) + '">' + (null == (__t = o.message) ? "" : __t) + "</p>"; else if ("message" == o.type) {
                var message = purechatApp.Utils.linkify(o.message);
                __p += '<div class="purechat-message-container purechat-clearfix ' + (null == (__t = o.myMessage ? "purechat-message-right" : "purechat-message-left") ? "" : __t) + '"><div class="purechat-message"><span class="purechat-displayname">' + (null == (__t = o.userName) ? "" : __t) + "</span>: <span>" + (null == (__t = message) ? "" : __t) + "</span></div></div>";
            }
            return __p;
        }, this.templates.StartChatForm = function(o) {
            var __t, __p = "", __e = _.escape;
            return Array.prototype.join, o.EmailForm ? __p += '<div class="purechat-enterinfo-container"><p>' + (null == (__t = purechatApp.Utils.linkify(o.getResource("noOperators_email_message"))) ? "" : __t) + "</p></div>" : (o.AskForName || o.AskForEmail || o.AskForQuestion) && (__p += '<div class="purechat-enterinfo-container"><p>' + (null == (__t = purechatApp.Utils.linkify(o.getResource("label_initial"))) ? "" : __t) + "</p></div>"), 
            __p += o.EmailForm ? '<form class="purechat-form purechat-email-form" action="">' : '<form class="purechat-form purechat-init-form" action="">', 
            __p += '<p class="alert alert-error init-error general-error" style="display: none;"></p>', 
            o.AskForName && (__p += '<p class="alert alert-error init-error please-entername" style="display: none;">' + __e(o.getResource("error_enterName")) + '</p><input type="text" class="purechat-name-input" autocomplete="off" name="purechat-name-input" placeholder="' + __e(o.getResource("placeholder_name")) + '" maxlength="40">'), 
            o.AskForEmail && (__p += '<p class="alert alert-error init-error please-enteremail" style="display: none;">' + __e(o.getResource("error_enterEmail")) + '</p><input type="email" class="purechat-email-input" name="purechat-email-input" placeholder="' + __e(o.getResource("placeholder_email")) + '">'), 
            o.AskForQuestion && (__p += '<p class="alert alert-error init-error please-enterquestion" style="display: none;">' + __e(o.getResource("error_enterQuestion")) + '</p><textarea class="purechat-question-input" name="purechat-question-input" placeholder="' + __e(o.getResource("placeholder_question")) + '" rows="3"></textarea>'), 
            __p += o.EmailForm ? '<input type="submit" class="btn" id="purechat-name-submit" value="' + __e(o.getResource("button_sendEmail")) + '" style="display: inline"><span class="purechat-email-error">An Error Occurred</span>' : '<input type="submit" class="btn" id="purechat-name-submit" value="' + __e(o.getResource("button_startChat")) + '">', 
            __p += "</form>";
        }, this.templates.Widget = function(o) {
            var __t, __p = "", __e = _.escape;
            return Array.prototype.join, __p += '<div class="purechat-expanded"><div class="purechat-widget-inner purechat-clearfix"><div class="purechat-widget-header"><div class="purechat-menu btn-toolbar"><button data-trigger="restartChat" class="btn btn-mini btn-restart" title="Start a new chat"><i class="pc-icon-repeat" title="Start a new chat"></i></button><button data-trigger="popOutChat" class="btn btn-mini btn-pop-out" title="Pop out"><i class="pc-icon-share"></i></button><button data-trigger="expand" class="btn btn-mini actions btn-expand" title="Expand Widget"><i class="pc-icon-plus"></i></button><button data-trigger="collapse" class="btn btn-mini actions btn-collapse" title="Collapse Widget"><i class="pc-icon-minus"></i></button><button data-trigger="closeChat" class="btn btn-mini btn-close" title="Close chat session"><i class="pc-icon-remove"></i></button></div><div class="purechat-widget-title"><img src="' + (null == (__t = o.absoluteUrl("/Content/images/widget-logo-32.png")) ? "" : __t) + '" class="purechat-title-image-out-of-way small" alt="" /><img src="' + (null == (__t = o.absoluteUrl("/Content/images/widget-logo-64.png")) ? "" : __t) + '" class="purechat-title-image-out-of-way large" alt="" />', 
            o.get("RequestFromMobileDevice") && o.get("AllowWidgetOnMobile") && (__p += '<img src="' + (null == (__t = o.absoluteUrl("/content/images/widget-logo-32-highlight.png")) ? "" : __t) + '" alt="" class="purechat-title-image-out-of-way-hilight small" /><img src="' + (null == (__t = o.absoluteUrl("/content/images/widget-logo-64-highlight.png")) ? "" : __t) + '" alt="" class="purechat-title-image-out-of-way-hilight large" />'), 
            __p += '<img class="purechat-title-image" src="' + (null == (__t = o.absoluteUrl("/Content/images/icon-small.png")) ? "" : __t) + '" />&nbsp;<span class="purechat-widget-title-link"></span></div></div><div class="purechat-content"></div><div class="purechat-poweredby-container"><span class="purechat-poweredby">' + __e(o.getResource("poweredby")) + ' </span><a target="_blank" href="' + (null == (__t = o.poweredByUrl()) ? "" : __t) + '">PureChat.com</a><span class="purechat-poweredby">, It\'s Free!</span></div></div></div><div class="purechat-button-expand purechat-collapsed ' + (null == (__t = o.get("CollapsedWidgetImageUrl") ? "purechat-collapsed-image" : "purechat-collapsed-default") ? "" : __t) + '">', 
            o.get("CollapsedWidgetImageUrl") && o.showImage() && !o.isTabTop() && (__p += '<img class="collapsed-image" src="' + (null == (__t = o.absoluteCollapsedImageUrl()) ? "" : __t) + '" data-trigger="expand" style="' + (null == (__t = o.collapsedImageCss()) ? "" : __t) + '" />'), 
            o.showTab() && (__p += '<div class="purechat-collapsed-outer" data-trigger="expand" ><div class="purechat-widget-inner purechat-clearfix"><div class="purechat-widget-header"><div class="purechat-menu btn-toolbar"><button data-trigger="expand" class="btn btn-mini actions btn-expand" title="Expand Widget"><i class="pc-icon-plus"></i></button><button data-trigger="collapse" class="btn btn-mini actions btn-collapse" title="Collapse Widget"><i class="pc-icon-minus"></i></button></div><div class="purechat-widget-title"><img src="' + (null == (__t = o.absoluteUrl("/Content/images/widget-logo-32.png")) ? "" : __t) + '" class="purechat-title-image-out-of-way small" alt="" /><img src="' + (null == (__t = o.absoluteUrl("/Content/images/widget-logo-64.png")) ? "" : __t) + '" class="purechat-title-image-out-of-way large" alt="" />', 
            o.get("RequestFromMobileDevice") && o.get("AllowWidgetOnMobile") && (__p += '<img src="' + (null == (__t = o.absoluteUrl("/content/images/widget-logo-32-highlight.png")) ? "" : __t) + '" alt="" class="purechat-title-image-out-of-way-hilight small" /><img src="' + (null == (__t = o.absoluteUrl("/content/images/widget-logo-64-highlight.png")) ? "" : __t) + '" alt="" class="purechat-title-image-out-of-way-hilight large" />'), 
            __p += '<img class="purechat-title-image" src="' + (null == (__t = o.absoluteUrl("/Content/images/icon-small.png")) ? "" : __t) + '">&nbsp;<span class="purechat-widget-title-link">' + __e(o.getResource("title_initial")) + "</span></div></div></div></div>"), 
            o.get("CollapsedWidgetImageUrl") && o.showImage() && o.isTabTop() && (__p += '<img class="collapsed-image" src="' + (null == (__t = o.absoluteCollapsedImageUrl()) ? "" : __t) + '" data-trigger="expand" style="' + (null == (__t = o.collapsedImageCss()) ? "" : __t) + '" />'), 
            __p += '</div><div class="purechat-mobile-overlay hide"></div>';
        }, this.templates.WidgetDirectAccess = function(o) {
            var __t, __p = "", __e = _.escape;
            return __p += '<div class="purechat-expanded"><div class="purechat-widget-inner purechat-clearfix"><div class="purechat-widget-header"><div class="purechat-menu btn-toolbar"><button data-trigger="restartChat" class="btn btn-mini btn-restart" title="Start a new chat"><i class="pc-icon-repeat" title="Start a new chat"></i></button><button data-trigger="closeChat" class="btn btn-mini btn-close" title="Close chat session"><i class="pc-icon-remove"></i></button></div><div class="purechat-widget-title"><img class="purechat-title-image" src="' + (null == (__t = o.absoluteUrl("/Content/images/icon-small.png")) ? "" : __t) + '">&nbsp;<span class="purechat-widget-title-link">PureChat</span></div></div><div class="purechat-content"></div><div class="purechat-poweredby-container"><span class="purechat-poweredby">' + __e(o.getResource("poweredby")) + ' </span><a target="_blank" href="' + (null == (__t = o.poweredByUrl()) ? "" : __t) + '">PureChat.com</a><span class="purechat-poweredby">, It\'s Free! </span></div></div></div>';
        }, this.templates.WidgetOperator = function(o) {
            var __t, __p = "";
            return _.escape, Array.prototype.join, __p += '<div class="purechat-widget-inner purechat-clearfix"><div class="purechat-widget-header"><div class="menu btn-toolbar"><span data-trigger="cannedResponses" class="purechat-canned-responses btn-group"><a class="dropdown-toggle btn" data-toggle="dropdown" data-ajax="false">&nbsp;<i class="icon-ellipsis-horizontal icon-white"></i>&nbsp;</a><ul class="dropdown-menu bottom-up"></ul></span>', 
            __p += o.attributes.isInvisible ? '<button data-trigger="requeueChat" class="btn btn-mini requeue-button">Leave</button><button data-trigger="removeWidget" class="btn btn-mini closewidget-button">Done</button>' : '<button data-trigger="exportToOntime" class="btn btn-mini leave-button">Export</button><button data-trigger="requeueChat" class="btn btn-mini requeue-button">Requeue</button><button data-trigger="removeWidget" class="btn btn-mini closewidget-button">Done</button><button data-trigger="closeChat" data-trigger-params=\'{"confirmation": "Are you sure you want to close this chat?"}\'  class="btn btn-mini requeue close-button">End Chat</button>', 
            __p += '</div><div class="purechat-widget-title"><a class="purechat-widget-title-link"></a></div></div><div class="purechat-chat-info"></div><div class="purechat-content"></div><div class="purechat-poweredby-container"></div></div><div class="purechat-widget-sliding-panel purechat-clearfix"><div class="purechat-widget-header"><div class="menu"><span class="title">Chat Details</span></div></div><div class="purechat-additional-content"><div class="spinner hide"></div><ul><li><strong>Chatting with: </strong>' + (null == (__t = o.attributes.room.name) ? "" : __t) + "</li><li><strong>IP Address: </strong>" + (null == (__t = o.attributes.room.visitorIPAddress) ? "" : __t) + "</li>", 
            null !== o.attributes.room.LastChatDatetime && "string" == typeof o.attributes.room.LastChatDatetime && (__p += "<li><strong>Last chat: </strong>" + (null == (__t = o.formatDateTime(o.attributes.room.LastChatDatetime)) ? "" : __t) + "</li>"), 
            o.attributes.room.GeolocationData && (__p += "<li><strong>Location: </strong>" + (null == (__t = 0 == o.attributes.room.GeolocationData.State.length && 0 == o.attributes.room.GeolocationData.City.length && 0 == o.attributes.room.GeolocationData.Country.length ? "Not Provided" : o.attributes.room.GeolocationData.City + ", " + o.attributes.room.GeolocationData.State + ", " + o.attributes.room.GeolocationData.Country) ? "" : __t) + '</li><li><div class="widget-maps-container"></div></li>'), 
            __p += "</ul></div></div>";
        }, this.templates.WidgetPoppedOut = function(o) {
            var __t, __p = "", __e = _.escape;
            return Array.prototype.join, __p += '<div class="purechat-window purechat-expanded"><div class="purechat-widget-inner purechat-clearfix"><div class="purechat-widget-header"><div class="purechat-menu btn-toolbar"><button data-trigger="restartChat" class="btn btn-mini btn-restart" title="Start a new chat"><i class="pc-icon-repeat" title="Start a new chat"></i></button><button data-trigger="closeChat" class="btn btn-mini btn-close" title="Close chat session"><i class="pc-icon-remove"></i></button></div><div class="purechat-widget-title"><!-- <img class="purechat-title-image" src="' + (null == (__t = o.pureServerUrl) ? "" : __t) + '/Content/images/icon-small.png">&nbsp;<span class="purechat-widget-title-link">PureChat</span>--><img class="purechat-title-image" src="' + (null == (__t = o.absoluteUrl("/Content/images/icon-small.png")) ? "" : __t) + '">&nbsp;<span class="purechat-widget-title-link">PureChat</span></div></div><div class="purechat-content"></div><div class="purechat-poweredby-container"><span class="purechat-poweredby">' + __e(o.getResource("poweredby")) + ' </span><a target="_blank" href="' + (null == (__t = o.poweredByUrl()) ? "" : __t) + '">PureChat.com</a><span class="purechat-poweredby">, It\'s Free! </span></div></div></div><div class="purechat-widget purechat-collapsed">', 
            __p += o.get("CollapsedWidgetImageUrl") ? '<img src="' + (null == (__t = o.get("CollapsedWidgetImageUrl")) ? "" : __t) + '" data-trigger="expand" />' : '<div class="purechat-widget-inner purechat-clearfix"><div class="purechat-widget-header"><div class="purechat-menu btn-toolbar"><!-- <button data-trigger="restartChat" class="btn btn-mini btn-restart" title="Start a new chat"><i class="pc-icon-restart" title="Start a new chat"></i></button><button data-trigger="popOutChat" class="btn btn-mini btn-pop-out" title="Pop out"><i class="pc-icon-share"></i></button><button data-trigger="closeChat" class="btn btn-mini btn-close" title="Close chat session"><i class="pc-icon-remove"></i></button>--><button data-trigger="expand" class="btn btn-mini actions btn-expand" title="Expand Widget"><i class="pc-icon-plus"></i></button><button data-trigger="collapse" class="btn btn-mini actions btn-collapse" title="Collapse Widget"><i class="pc-icon-minus"></i></button></div><div class="purechat-widget-title"><!-- <img class="purechat-title-image" src="' + (null == (__t = o.pureServerUrl) ? "" : __t) + '/Content/images/icon-small.png">&nbsp;<span class="purechat-widget-title-link">PureChat</span>--><img class="purechat-title-image" src="' + (null == (__t = o.absoluteUrl("/Content/images/icon-small.png")) ? "" : __t) + '">&nbsp;<span class="purechat-widget-title-link">PureChat</span></div></div></div>', 
            __p += "</div>";
        };
    }({}, function() {
        return this;
    }()), purechatApp.module("Models", function(Models, app, Backbone, Marionette, $, _) {
        Models.Chat = Backbone.RelationalModel.extend({
            defaults: {},
            relations: [ {
                type: Backbone.HasMany,
                key: "messages",
                relatedModel: "Message",
                collectionType: "MessageCollection",
                reverseRelation: {
                    key: "chat"
                }
            }, {
                type: Backbone.HasMany,
                key: "operators",
                relatedModel: "Operator",
                collectionType: "OperatorCollection",
                reverseRelation: {
                    key: "chat"
                }
            } ],
            chatUserNames: function() {
                var userNames = "";
                return this.get("operators").forEach(function(next) {
                    "" != userNames && (userNames += ", "), userNames += next.get("userDisplayName");
                }), userNames;
            },
            isInChat: function() {
                return this.get("userId") && this.get("chatId") && this.get("authToken");
            }
        }), Models.Message = Backbone.RelationalModel.extend({
            events: {
                "change:messageResource": function() {
                    alert("test");
                }
            }
        }), Models.MessageCollection = Backbone.Collection.extend({
            model: Models.Message
        }), Models.Operator = Backbone.RelationalModel.extend({
            idAttribute: "userId"
        }), Models.OperatorCollection = Backbone.Collection.extend({
            model: Models.Operator
        }), Models.WidgetSettings = Backbone.RelationalModel.extend({
            getResource: function(key, data) {
                var resources = this.get("StringResources");
                if (!resources) return key;
                if (data) {
                    var format = resources[key];
                    return self.compiledResources || (self.compiledResources = {}), self.compiledResources[format] || (self.compiledResources[format] = pc_.template(format, null, {
                        interpolate: /\{(.+?)\}/g
                    })), self.compiledResources[format](data);
                }
                return resources[key];
            },
            isTabTop: function() {
                return 3 == this.get("Position") || 4 == this.get("Position");
            },
            isTabLeft: function() {
                return 1 == this.get("Position") || 3 == this.get("Position");
            },
            showTab: function() {
                var mobileOverride = this.get("RequestFromMobileDevice") && this.get("AllowWidgetOnMobile");
                return this.get("WidgetType") == app.Constants.WidgetType.Tab || this.get("WidgetType") == app.Constants.WidgetType.ImageTab || mobileOverride && this.get("WidgetType") != app.Constants.WidgetType.Button;
            },
            showImage: function() {
                return this.get("WidgetType") == app.Constants.WidgetType.Image || this.get("WidgetType") == app.Constants.WidgetType.ImageTab;
            },
            collapsedImageCss: function() {
                var scale = this.get("Scale") / 100, scaledWidth = this.get("ImageWidth") * scale, scaledHeight = this.get("ImageHeight") * scale, yOffset = 0;
                this.isTabTop() ? (yOffset = this.showTab() ? 60 : 0, yOffset += this.get("ImageYOffset") || 0) : (yOffset = -(scaledHeight + (this.get("ImageYOffset") || 0)), 
                this.showTab() || (yOffset -= 10));
                var scaleCss = [ "position:absolute;", "margin-top: " + yOffset + "px;", "width: " + this.get("ImageWidth") * scale + "px;", "max-width: " + this.get("ImageWidth") * scale + "px;", "top: 0px;", "z-index: " + (this.get("ImageTop") ? 2 : 0) + ";" ];
                return this.showTab() ? (scaleCss.push("left: 50%;"), scaleCss.push("margin-left: " + -(scaledWidth / 2 - (this.get("ImageXOffset") || 0)) + "px;")) : this.isTabLeft() ? (scaleCss.push("left: 50%;"), 
                scaleCss.push("margin-left: " + (this.get("ImageXOffset") || 0) + "px;")) : (scaleCss.push("right: 50%;"), 
                scaleCss.push("margin-right: " + -(this.get("ImageXOffset") || 0) + "px;")), scaleCss.join("");
            },
            poweredByUrl: function() {
                return "http://purechat.com?utm_source=" + encodeURIComponent(location.hostname) + "&utm_medium=widget&utm_campaign=poweredby&support=false";
            },
            absoluteCollapsedImageUrl: function() {
                return this.get("pureServerUrl") + this.get("CollapsedWidgetImageUrl");
            },
            absoluteUrl: function(path) {
                return this.get("pureServerUrl") + path;
            },
            formatDateTime: function(dateString) {
                var d = new Date(dateString), formattedDate = d.getMonth() + 1 + "/" + d.getDate() + "/" + d.getFullYear();
                return formattedDate += " " + (0 == d.getHours() % 12 ? "12" : d.getHours() % 12) + ":" + (d.getMinutes() < 10 ? "0" + d.getMinutes() : d.getMinutes()) + (d.getHours() >= 12 ? "PM" : "AM");
            }
        }), Models.WidgetSettingsCollection = Backbone.Collection.extend({
            model: Models.WidgetSettings
        }), Models.ChatConnection = Backbone.Model.extend({
            persistedKeys: [ "userId", "authToken", "roomId", "chatId", "visitorName", "disabled" ],
            persistLocalStorage: function() {
                var self = this;
                return _.each(self.persistedKeys, function(key) {
                    void 0 != self.get(key) && (localStorage[key] = self.get(key));
                }), self;
            },
            clearLocalStorage: function() {
                var self = this;
                return _.each(self.persistedKeys, function(key) {
                    delete localStorage[key];
                }), self;
            },
            loadFromLocalStorage: function() {
                var self = this;
                return _.each(self.persistedKeys, function(key) {
                    self.set(key, localStorage[key]);
                }), self;
            },
            isInChat: function() {
                return this.get("userId") && this.get("authToken");
            }
        });
    }), Backbone.View.prototype.getResource = function(key, data) {
        return Marionette.getOption(this, "rm").getResource(key, pc_.defaults(data || {}, {
            chatUserNames: ""
        }));
    }, Marionette.View.prototype.mixinTemplateHelpers = function(target) {
        target = target || {};
        var templateHelpers = this.templateHelpers || {};
        return pc_.isFunction(templateHelpers) && (templateHelpers = templateHelpers.call(this)), 
        target.getResource = pc_.bind(backbone.View.prototype.getResource, this), pc_.extend(target, templateHelpers);
    }, Backbone.Marionette.Renderer.render = function(template, data) {
        var t = purechatApp.templates || templates;
        "string" == typeof template && t[template] && (template = t[template]);
        var templateFunc = "function" == typeof template ? template : Marionette.TemplateCache.get(template), html = templateFunc(data);
        return html.trim();
    }, purechatApp.module("Views", function(Views, app, Backbone, Marionette, $, _) {
        var notifier = new app.Utils.Notifier(), firstAnimationTimeout = null;
        Views.WidgetLayout = Marionette.Layout.extend({
            template: null,
            className: "purechat",
            windowHeightOnLoad: 0,
            optionsStepShown: !1,
            maxWidth: 700,
            regions: {
                content: ".purechat-content"
            },
            events: {
                "click [data-trigger]": "executeCommand"
            },
            modelEvents: {
                "change:operatorsAvailable": "operatorsAvailableChanged"
            },
            ui: {
                content: ".purechat-content",
                title: ".purechat-expanded .purechat-widget-title-link",
                popoutButton: '[data-trigger="popOutChat"]',
                closeButton: '[data-trigger="closeChat"]',
                removeWidgetButton: '[data-trigger="removeWidget"]',
                restartButton: '[data-trigger="restartChat"]',
                requeueButton: '[data-trigger="requeueChat"]',
                leaveButton: '[data-trigger="leaveChat"]',
                exportToOntimeButton: '[data-trigger="exportToOntime"]',
                widgetCollapsed: ".purechat-collapsed",
                widgetExpanded: ".purechat-expanded",
                collapseImage: ".collapsed-image"
            },
            templateHelpers: function() {
                return this.settings;
            },
            initialize: function() {
                Marionette.Layout.prototype.initialize.call(this), this.settings = Marionette.getOption(this, "widgetSettings"), 
                this.settings.get("isDirectAccess") ? (this.template = "WidgetDirectAccess", this.$el.addClass("purechat-widget")) : this.settings.get("isOperator") ? (this.template = "WidgetOperator", 
                this.$el.addClass("purechat-operator")) : this.settings.get("poppedOut") ? (this.template = "WidgetPoppedOut", 
                this.$el.addClass("purechat-window")) : (this.template = "Widget", this.$el.addClass("purechat-widget hide"));
                var positionCssClasses = this.settings.get("WidgetType") == app.Constants.WidgetType.Button ? "purechat-widget-button" : "";
                if (!this.model.get("isPoppedOut") && !this.settings.get("isDirectAccess")) {
                    var position = this.settings.get("Position");
                    1 === position ? positionCssClasses = "purechat-bottom purechat-bottom-left" : 2 === position ? positionCssClasses = "purechat-bottom purechat-bottom-right" : 3 === position ? positionCssClasses = "purechat-top purechat-top-left" : 4 === position && (positionCssClasses = "purechat-top purechat-top-right"), 
                    this.$el.addClass(positionCssClasses);
                }
                this.listenTo(this.settings, "change", _.bind(this.updateImageTransform, this)), 
                this.windowHeightOnLoad = $(window).height(), this.settings.get("RequestFromMobileDevice") && this.settings.get("AllowWidgetOnMobile") && ($("head").append('<style type="text/css" class="purechat-dynamic-mobile-styles"></style>'), 
                this.windowResizeEventBindings(this));
            },
            setTitle: function(title) {
                this.ui.title.text(title).attr("title", title);
            },
            clearContents: function() {
                this.ui.content.html("");
            },
            updateImageTransform: function() {
                this.ui.collapseImage && this.ui.collapseImage.attr && this.ui.collapseImage.attr("style", this.options.widgetSettings.collapsedImageCss());
            },
            hideAdditionalDetails: function() {
                this.$el.find(".purechat-widget-sliding-panel").removeClass("expanded").addClass("collapsed"), 
                this.$el.find(".additional-details").removeClass("hide"), this.$el.find(".purechat-widget-inner").removeClass("expanded"), 
                this.$el.css({
                    width: this.maxWidth - 200
                });
            },
            showAdditionalDetails: function() {
                var context = this, slidingPanel = context.$el.find(".purechat-widget-sliding-panel"), spinner = slidingPanel.find(".spinner");
                spinner.removeClass("hide");
                var headerHeight = context.$el.find(".purechat-widget-inner .purechat-widget-header").outerHeight();
                context.$el.find(".purechat-widget-inner").addClass("expanded"), slidingPanel.find(".purechat-widget-header").css({
                    height: headerHeight,
                    lineHeight: headerHeight + "px"
                }), slidingPanel.find(".purechat-additional-content").css({
                    top: headerHeight
                }), slidingPanel.removeClass("collapsed").addClass("expanded"), spinner.addClass("hide");
            },
            executeCommand: function(e) {
                e.preventDefault();
                var $this = $(e.currentTarget), command = $this.data("trigger"), commandParams = $this.data("trigger-params");
                this.triggerMethod(command, commandParams);
            },
            focusInput: function() {
                this.options.widgetSettings.get("isDemo") || this.settings.get("RequestFromMobileDevice") || this.$el.find(".purechat-name-input, .purechat-email-input, .purechat-question-input, .purechat-send-form-message").first().focus();
            },
            onRender: function() {
                var self = this;
                this.settings.get("isWidget") ? (this.ui.content.addClass("purechat-widget-content"), 
                self.options.widgetSettings.get("RequestFromMobileDevice") && this.ui.content.css({
                    "overflow-y": "auto"
                })) : (this.$el.addClass("purechat-window"), this.ui.content.addClass("purechat-window-content")), 
                this.operatorsAvailableChanged(), this.setTitle(this.settings.get("title") || ""), 
                this.settings.get("isDemo") || "true" != localStorage.expanded || this.settings.get("ForcePopout") || this.settings.get("usePrototypeFallback") ? this.onCollapse(!0) : this.expand(!0), 
                self.imageLoaded = $.Deferred(), this.ui.collapseImage.length > 0 ? $(this.ui.collapseImage).load(function() {
                    self.imageLoaded.resolve();
                }) : self.imageLoaded.resolve();
            },
            operatorsAvailableChanged: function() {
                this.settings.get("isWidget") && (this.model.get("operatorsAvailable") ? (this.$el.addClass("purechat-button-available"), 
                this.$el.removeClass("purechat-button-unavailable"), this.$el.removeAttr("disabled", "disabled")) : (this.$el.removeClass("purechat-button-available"), 
                this.$el.addClass("purechat-button-unavailable"), 0 === this.options.widgetSettings.get("UnavailableBehavior") && (this.$el.addClass("purechat-button-hidden"), 
                this.$el.attr("disabled", "disabled"))));
            },
            windowResizeEventBindings: function(context) {
                context.$el.find(".purechat-send-form-message").off("blur.ResizeWindow").on("blur.ResizeWindow", function() {
                    $(window).trigger("resize.ResizeChatContent");
                }), $(window).off("resize.ResizeChatContent").on("resize.ResizeChatContent", function() {
                    var focusedElement = $(":focus"), resizeHeight = $(this).height(), windowWidth = $(this).width(), newFontSize = 700 >= windowWidth ? 20 : 20 + Math.floor(.01 * windowWidth), newButtonPadding = 700 >= windowWidth ? "5px 10px" : Math.min(5 + Math.floor(.01 * windowWidth), 13) + "px " + Math.min(10 + Math.floor(.01 * windowWidth), 22) + "px";
                    700 >= windowWidth ? "40px" : Math.min(40 + Math.floor(.01 * windowWidth)) + "px", 
                    resizeHeight -= focusedElement.hasClass("purechat-send-form-message") && resizeHeight < context.windowHeightOnLoad ? 39 : 700 >= windowWidth ? 103 : 114 + newFontSize, 
                    context.$el.find(".purechat-widget-content").css({
                        height: resizeHeight
                    }).find(".purechat-message-display-container").css({
                        bottom: context.$el.find(".purechat-send-form-container").height() + context.$el.find(".purechat-poweredby-container").height() + 1
                    });
                    var dynamicStyle = $("style.purechat-dynamic-mobile-styles"), dynamicStyleText = ".purechat-widget .purechat-menu .btn,.purechat-widget .btn,.purechat-window .btn,.purechat-window .purechat-menu .btn {					padding: " + newButtonPadding + " !important; }					.purechat-widget .purechat-thumbs, .purechat-window .purechat-thumbs {					padding: " + newButtonPadding + " !important}";
                    dynamicStyle.html(dynamicStyleText), context.$el.css("font-size", newFontSize), 
                    context.$el.hasClass("purechat-widget-collapsed") && context.$el.css("margin-left", 700 >= windowWidth ? windowWidth - 66 : windowWidth - 110);
                }), $(window).trigger("resize.ResizeChatContent");
            },
            onExpandAnimation: function(self, firstLoad, callback) {
                firstAnimationTimeout = clearTimeout(firstAnimationTimeout);
                var elem = self.$el, pcWidgetContent = elem.find(".purechat-widget-content"), windowHeight = $(window).height(), windowWidth = $(window).width(), leftMargin = parseFloat(elem.css("margin-left").replace(/[^0-9]/g, ""));
                firstLoad ? (elem.find(".purechat-widget .purechat-expanded").removeClass("purechat-button-expand").removeAttr("data-trigger"), 
                callback(self)) : ($(".purechat-widget .purechat-widget-header, .purechat-window .purechat-widget-header, .purechat-widget .purechat-expanded, .purechat-widget .purechat-collapsed-outer, .purechat-widget .purechat-expanded .purechat-widget-inner, .purechat-widget .purechat-collapsed-outer .purechat-widget-inner").removeClass("no-background"), 
                0 != leftMargin ? elem.stop().animate({
                    marginLeft: 0
                }, self.model.get("state") == app.Constants.WidgetStates.Chatting || self.settings.get("WidgetType") == app.Constants.WidgetType.Button ? 0 : 1e3, function() {
                    callback(self), pcWidgetContent.stop().animate({
                        height: windowHeight - (700 >= windowWidth ? 103 : 114 + (700 >= windowWidth ? 20 : 20 + Math.floor(.01 * windowWidth)))
                    }, self.model.get("state") == app.Constants.WidgetStates.Chatting ? 0 : 1e3, function() {
                        elem.find(".purechat-expanded").removeClass("purechat-button-expand").removeAttr("data-trigger");
                    });
                }) : (callback(self), pcWidgetContent.stop().animate({
                    height: windowHeight - (700 >= windowWidth ? 103 : 114 + (700 >= windowWidth ? 20 : 20 + Math.floor(.01 * windowWidth)))
                }, self.model.get("state") == app.Constants.WidgetStates.Chatting ? 0 : 1e3, function() {
                    elem.find(".purechat-expanded").removeClass("purechat-button-expand").removeAttr("data-trigger");
                }))), elem.find(".purechat-mobile-overlay").removeClass("hide");
            },
            onExpand: function() {
                var isCollapseCommand = arguments && arguments[0] && "boolean" == typeof arguments[0].collapse ? arguments[0].collapse : !1, self = this;
                self.options.widgetSettings.get("dataController").checkChatAvailable().done(function(result) {
                    self.model.set("operatorsAvailable", result.available), isCollapseCommand || self.expand();
                });
            },
            expand: function(firstLoad) {
                var self = this, fnc = function(context) {
                    context.settings.get("ForcePopout") && !context.model.get("isPoppedOut") || context.settings.get("usePrototypeFallback") ? context.triggerMethod("popOutChat") : (context.settings.get("isDemo") || (localStorage.expanded = !0), 
                    context.focusInput(), context.$el.removeClass("purechat-widget-collapsed"), context.$el.addClass("purechat-widget-expanded"), 
                    context.$el.find(".btn-toolbar .btn-expand").hide(), context.$el.find(".btn-toolbar .btn-collapse").show(), 
                    context.$el.find(".purechat-widget-content").show(), context.model.get("roomId") || (context.ui.widgetCollapsed.hide(), 
                    context.ui.widgetExpanded.show()), context.model.set("expanded", !0), context.trigger("expanded"));
                };
                self.settings.get("RequestFromMobileDevice") && self.settings.get("AllowWidgetOnMobile") ? (self.onExpandAnimation(self, firstLoad, fnc), 
                firstLoad && $(window).trigger("resize")) : fnc(self);
            },
            onCollapseAnimation: function(self, firstLoad, callback) {
                callback(self);
                var elem = self.$el, pcWidgetContent = elem.find(".purechat-widget-content"), windowWidth = $(window).width();
                $(window).height();
                var finalAnimationCallback = function() {
                    $(".purechat-widget .purechat-widget-header, .purechat-window .purechat-widget-header, .purechat-widget .purechat-expanded, .purechat-widget .purechat-collapsed-outer, .purechat-widget .purechat-expanded .purechat-widget-inner, .purechat-widget .purechat-collapsed-outer .purechat-widget-inner").addClass("no-background"), 
                    $(".purechat-widget .purechat-expanded").addClass("purechat-button-expand").attr("data-trigger", "expand"), 
                    elem.find(".purechat-mobile-overlay").addClass("hide");
                };
                firstLoad ? firstAnimationTimeout = setTimeout(function() {
                    elem.animate({
                        marginLeft: 700 >= windowWidth ? windowWidth - 66 : windowWidth - 110
                    }, 1e3, finalAnimationCallback);
                }, 5e3) : pcWidgetContent.animate({
                    height: 200
                }, self.settings.get("WidgetType") == app.Constants.WidgetType.Button ? 0 : 1e3, function() {
                    elem.stop().animate({
                        marginLeft: 700 >= windowWidth ? windowWidth - 66 : windowWidth - 110
                    }, self.settings.get("WidgetType") == app.Constants.WidgetType.Button ? 0 : 1e3, finalAnimationCallback);
                });
            },
            onCollapse: function(firstLoad) {
                var self = this, fnc = function(context) {
                    context.settings.get("isDemo") || (localStorage.expanded = !1), context.$el.removeClass("purechat-widget-expanded"), 
                    context.$el.addClass("purechat-widget-collapsed"), context.$el.find(".btn-toolbar .btn-expand").show(), 
                    context.$el.find(".btn-toolbar .btn-collapse").hide(), context.$el.find(".purechat-widget-content").hide(), 
                    context.model.get("roomId") || (context.ui.widgetCollapsed.show(), context.ui.widgetExpanded.hide()), 
                    context.model.set("expanded", !1), context.trigger("collapsed");
                };
                self.settings.get("RequestFromMobileDevice") && self.settings.get("AllowWidgetOnMobile") ? self.onCollapseAnimation(self, firstLoad, fnc) : fnc(self);
            },
            onHide: function() {
                this.$el.addClass("purechat-button-hidden");
            },
            onShow: function() {
                var self = this;
                self.imageLoaded.done(function() {
                    (0 != self.settings.get("UnavailableBehavior") || self.model.get("isPoppedOut") || self.model.get("operatorsAvailable") || self.model.get("userId")) && self.$el.removeClass("purechat-button-hidden"), 
                    self.settings.get("DisplayWidgetAnimation") && !self.model.get("expanded") && self.$el.addClass("purechat-" + self.settings.get("DisplayWidgetAnimation") + " purechat-animated");
                });
            },
            flashNotification: function(message) {
                notifier.notify(message, this.ui.title, this.$el);
            },
            setCannedResponses: function(cannedResponses) {
                var t = this;
                if (this.cannedResponses = cannedResponses, cannedResponses && window.$ && window.$().dropdown) {
                    var cannedResponsesList = $(".purechat-canned-responses ul", this.widgetContainer);
                    if (0 != cannedResponsesList.length) cannedResponsesList.html(""); else {
                        var cannedResponsesDiv = window.$('<span class="purechat-canned-responses btn-group"><a class="dropdown-toggle btn" data-toggle="dropdown" data-ajax="false">&nbsp;<i class="icon-ellipsis-horizontal icon-white"></i>&nbsp;</a><ul class="dropdown-menu bottom-up"></ul></span>');
                        cannedResponsesList = window.$("ul", cannedResponsesDiv), cannedResponsesList.dropdown(), 
                        cannedResponsesDiv.click(function() {
                            cannedResponsesDiv.find(".dropdown-toggle").dropdown("toggle");
                        }), this.addToolbarItem(cannedResponsesDiv);
                    }
                    for (var i in cannedResponses) {
                        var cannedResponse = cannedResponses[i];
                        if ("===separator===" === cannedResponse.content) cannedResponsesList.append("<div class='divider'></div>"); else {
                            var cannedResponseElement = window.$('<li data-ajax="false" data-cannedResponse="' + cannedResponse.content + '"><a href="#">' + cannedResponse.name + "</a></li>");
                            cannedResponseElement.click(function() {
                                var formMessage = t.$el.find(".purechat-send-form-message");
                                formMessage.val($(this).attr("data-cannedResponse")), formMessage.focus();
                            }), cannedResponsesList.append(cannedResponseElement);
                        }
                    }
                }
            }
        }), Views.StartChatForm = Marionette.ItemView.extend({
            template: "StartChatForm",
            className: "",
            events: {
                "submit form": "startChatSubmit"
            },
            ui: {
                form: ".purechat-form",
                userDisplayName: ".purechat-name-input",
                email: ".purechat-email-input",
                question: ".purechat-question-input",
                userDisplayNameError: ".please-entername",
                emailError: ".please-enteremail",
                questionError: ".please-enterquestion"
            },
            startChatSubmit: function(e) {
                e.preventDefault();
                var self = this;
                if (!this.submitDelay) {
                    this.submitDelay = !0, setTimeout(function() {
                        delete self.submitDelay;
                    }, 500);
                    var askForName = this.model.get("AskForName"), askForEmail = this.model.get("AskForEmail"), askForQuestion = this.model.get("AskForQuestion"), formType = Marionette.getOption(this, "FormType"), userDisplayName = "Visitor";
                    (askForName || "email" === formType) && (userDisplayName = this.ui.userDisplayName.val());
                    var userEmail = null;
                    (askForEmail || "email" === formType) && (userEmail = this.ui.email.val());
                    var initialQuestion = this.ui.question.val() || null;
                    if (this.ui.form.find(".please-entername, .please-enteremail, .please-enterquestion").hide(), 
                    "" === userDisplayName) return this.ui.userDisplayNameError.show(), !1;
                    if ("" === userEmail) return this.ui.emailError.show(), !1;
                    if (!initialQuestion && (askForQuestion || "email" === formType)) return this.questionError.show(), 
                    !1;
                    userDisplayName.length > MESSAGE_DISPLAY_WIDTH && (userDisplayName = userDisplayName.splice(0, MESSAGE_DISPLAY_WIDTH)), 
                    this.model.set("Name", userDisplayName), this.model.set("Email", userEmail), this.model.set("Question", initialQuestion), 
                    this.model.trigger("formSubmit", {
                        visitorName: userDisplayName,
                        visitorEmail: userEmail,
                        visitorQuestion: initialQuestion
                    });
                }
            }
        }), Views.EmailSent = Marionette.ItemView.extend({
            template: "EmailSent",
            className: ""
        }), Views.MessageView = Marionette.ItemView.extend({
            template: "MessageView",
            tagName: "div",
            className: "purechat-message-wrapper",
            ui: {},
            onRender: function() {}
        }), Views.EmptyView = Marionette.ItemView.extend({
            template: "Empty",
            className: "empty-item",
            events: {}
        }), Views.MessageListView = Marionette.CompositeView.extend({
            template: "MessageList",
            className: "",
            itemView: Views.MessageView,
            emptyView: Views.EmptyView,
            itemViewContainer: ".purechat-message-display",
            events: {
                "keydown textarea": "keyDown",
                "keyup textarea": "keyUp",
                "submit form": "postMessage"
            },
            ui: {
                textInput: "textarea",
                form: "form",
                displayContainer: ".purechat-message-display-container"
            },
            onRender: function() {
                if (this.options.settings.get("isInvisible") && this.ui.textInput.attr("disabled", "disabled"), 
                this.options.settings.get("isOperator")) {
                    var autocomplete_responses = [], cannedResponses = this.options.settings.get("cannedResponses");
                    for (i in cannedResponses) {
                        var response = cannedResponses[i].content;
                        "===separator===" !== response && (response = $("<div/>").html(response).text(), 
                        autocomplete_responses.push(response));
                    }
                    var ac = window.$(this.ui.textInput).autocomplete({
                        source: autocomplete_responses
                    });
                    ac.autocomplete("widget").addClass("canned-responses-autocomplete");
                }
            },
            scrollToTop: function() {
                this.$el.find(".purechat-message-display-container").scrollTop(this.$el.find(".purechat-message-display").height());
            },
            keyDown: function(e) {
                return 13 !== e.keyCode || e.ctrlKey ? !0 : (this.triggerMethod("typingChange", !1), 
                this.activity = !1, this.ui.form.submit(), !1);
            },
            keyUp: function() {
                var self = this;
                self.typingTimeout && (clearTimeout(self.typingTimeout), self.typingTimeout = null), 
                this.typingTimeout = setTimeout(function() {
                    try {
                        "" != self.ui.textInput.val() ? (self.activity = !0, self.triggerMethod("typingChange", !0)) : (self.triggerMethod("typingChange", !1), 
                        self.activity = !1);
                    } catch (ex) {}
                }, 2e3), "" != self.ui.textInput.val() && 1 != self.activity && (self.triggerMethod("typingChange", !0), 
                self.activity = !0);
            },
            postMessage: function(e) {
                e.stopPropagation(), e.preventDefault();
                var newMessage = this.ui.textInput.val();
                this.triggerMethod("newMessage", newMessage), this.ui.textInput.val("");
            },
            typing: function(userId, userDisplayName, isTyping) {
                var $container = this.$el.find(".purechat-message-display"), statusDiv = $container.find("#purechat-user-activity-" + userId);
                0 === statusDiv.length && (statusDiv = $('<p class="purechat-message-pinned" id="purechat-user-activity-' + userId + '"></p>'), 
                $container.append(statusDiv)), isTyping ? statusDiv.html(this.getResource("chat_typing", {
                    displayName: userDisplayName
                }) + '<div class="purechat-typing">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>') : statusDiv.remove();
            },
            appendBuffer: function(compositeView, buffer) {
                var $container = this.getItemViewContainer(compositeView);
                $container.append(buffer);
            },
            appendHtml: function(compositeView, itemView) {
                if (compositeView.isBuffering) compositeView.elBuffer.appendChild(itemView.el); else {
                    var $container = this.getItemViewContainer(compositeView), last = $container.find(".purechat-message-wrapper").last();
                    last.length ? last.after(itemView.el) : $container.append(itemView.el);
                }
            }
        }), Views.ClosedMessage = Marionette.ItemView.extend({
            getTemplate: function() {
                return this.options.settings.get("isOperator") ? "ClosedMessageOperator" : "ClosedMessage";
            },
            className: "purechat-closedmessage-container",
            ui: {
                ratingThanks: ".purechat-rating-thanks"
            },
            templateHelpers: function() {
                return this.options.settings;
            },
            events: {
                "click .purechat-thumbs-up": function(e) {
                    $(e.target).addClass("purechat-thumbs-selected"), this.rateChat(!0);
                },
                "click .purechat-thumbs-down": function(e) {
                    $(e.target).addClass("purechat-thumbs-selected"), this.rateChat(!1);
                },
                "click button.ban-ip-operator-button": function(e) {
                    var sender = global$(e.target);
                    global$('.operatorBanIPAddress[data-ipaddressid="' + sender.attr("data-ipaddressid") + '"]').modal("show"), 
                    global$("#BanIP-" + sender.attr("data-ipaddressid")).off("click.BanIPAddressFromOperator").on("click.BanIPAddressFromOperator", function() {
                        global$(document).trigger("ConfirmBanIPAddressFromOperator", [ global$(this), sender ]);
                    });
                },
                "click button.email-transcript-operator-button": function(e) {
                    var sender = global$(e.target), modal = global$('.operatorEmailTranscript[data-transcriptid="' + sender.attr("data-transcriptid") + '"]');
                    modal.modal("show"), modal.find(".send-email-operator-button").off("click.SendEmailFromOperator").on("click.SendEmailFromOperator", function() {
                        global$(document).trigger("SendEmailFromOperatorChat", [ global$("#EmailTranscript-" + sender.attr("data-transcriptid")) ]);
                    });
                }
            },
            rateChat: function(up) {
                this.rating || (this.rating = up ? 1 : 0, this.trigger("chat:rated", this.rating)), 
                this.$el.find(".purechat-thumbs-selectable:not(.purechat-thumbs-selected)").remove(), 
                this.ui.ratingThanks.text(this.getResource("closed_ratingThanks"));
            }
        }), Views.ChatConnectingView = Marionette.ItemView.extend({
            template: "ChatConnecting",
            className: "purechat-enterinfo-container",
            ui: {
                spinner: ".spinnerContainer",
                greeting: ".greeting",
                connecting: ".connecting"
            },
            onRender: function() {
                var spinnerOpts = {
                    length: 20,
                    radius: 20,
                    width: 10,
                    color: "#888"
                }, spinner = new purechatSpinner.Spinner(spinnerOpts).spin(), $spinner = $(spinner.el);
                $spinner.css({
                    left: "50%",
                    top: "50%"
                }), this.ui.spinner.append($spinner);
            },
            showErrorMessage: function(error) {
                this.ui.spinner.hide(), this.ui.greeting.hide(), this.ui.connecting.hide(), this.$el.append("<p>" + error + "</p>");
            }
        });
    }, purechatApp.Models), purechatApp.templates = templates;
    var pc_ = _.noConflict(), backbone = Backbone.noConflict(), defaultUiVisiblity = {
        popoutButton: !1,
        closeButton: !1,
        restartButton: !1,
        removeWidgetButton: !1,
        requeueButton: !1,
        leaveButton: !1,
        cannedResponsesButton: !1,
        exportToOntimeButton: !1
    }, DEFAULT_AVAIL_TIMEOUT = 2e4, DEFAULT_UNAVAIL_TIMEOUT = 6e5;
    PCWidgetState = Marionette.Controller.extend({
        initialize: function() {
            this.stateSettings = this.stateSettings || {}, this.stateSettings.UiVisiblity = this.stateSettings.UiVisiblity || {}, 
            pc_.defaults(this.stateSettings.UiVisiblity, defaultUiVisiblity);
        },
        setChatModel: function(model) {
            this.chatModel = model;
        },
        getChatModel: function() {
            return this.chatModel;
        },
        setWidgetView: function(view) {
            this.widgetView = view, this.listenTo(this.widgetView, "all");
        },
        getWidgetView: function() {
            return this.widgetView;
        },
        setWidgetSettings: function(settings) {
            this.settings = settings;
        },
        getWidgetSettings: function() {
            return this.settings;
        },
        setResources: function(resources) {
            this.resources = resources;
        },
        getResources: function() {
            return this.resources;
        },
        setDataController: function(dc) {
            this.dc = dc;
        },
        getDataController: function() {
            return this.dc;
        },
        setViewController: function(vc) {
            this.vc = vc;
        },
        getViewController: function() {
            return this.vc;
        },
        getResource: function(key, data) {
            return this.resources.getResource(key, data);
        },
        disable: function() {
            this.getDataController().connectionInfo.set("disabled", !0), this.getWidgetView().$el.hide();
        },
        enable: function() {
            this.getDataController().connectionInfo.set("disabled", !1), this.getWidgetView().$el.show();
        },
        onEnter: function() {
            if (this.listenTo(this.getWidgetView(), "all", function(event, parms) {
                var self = this;
                parms && parms.confirmation ? self.getViewController().showConfirmationDialog(parms.confirmation, parms.title).done(function() {
                    self.triggerMethod.call(self, event, parms);
                }) : this.triggerMethod.apply(this, arguments);
            }), this.stateSettings && this.stateSettings.UiVisiblity) {
                var view = this.getWidgetView();
                for (var next in this.stateSettings.UiVisiblity) view.ui[next] && view.ui[next].toggle(this.stateSettings.UiVisiblity[next]);
            }
        },
        onClose: function() {
            this.stopListening(this.widgetView, "all"), this.stopAvailabilityPolling();
        },
        testAvailability: function() {
            var t = this;
            t.getViewController().pageActivity || t.lastCheck && new Date() - t.lastCheck > 12e4 ? (t.lastCheck = new Date(), 
            t.getDataController().checkChatAvailable().done(function(result) {
                t.testStatusTimeOutId = clearTimeout(t.testStatusTimeOutId), t.checkAvailTimeout = result.available ? DEFAULT_AVAIL_TIMEOUT : DEFAULT_UNAVAIL_TIMEOUT, 
                result.available ? t.testStatusTimeOutId = setTimeout(function() {
                    t.testAvailability();
                }, t.checkAvailTimeout) : "AccountActivity" !== result.reason ? t.testStatusTimeOutId = setTimeout(function() {
                    t.testAvailability();
                }, t.checkAvailTimeout) : t.stopAvailabilityPolling(), t.getChatModel().set("operatorsAvailable", result.available);
            })) : (t.checkAvailTimeout = DEFAULT_AVAIL_TIMEOUT, t.testStatusTimeOutId = clearTimeout(t.testStatusTimeOutId), 
            t.testStatusTimeOutId = setTimeout(function() {
                t.testAvailability();
            }, 1500));
        },
        startAvailabilityPolling: function() {
            var t = this;
            t.checkAvailTimeout = DEFAULT_AVAIL_TIMEOUT, this.TestingStatus || (this.testStatusTimeOutId = setTimeout(function() {
                t.testAvailability();
            }, t.checkAvailTimeout)), this.TestingStatus = !0;
        },
        stopAvailabilityPolling: function() {
            this.TestingStatus = !1, this.testStatusTimeOutId = clearTimeout(this.testStatusTimeOutId);
        },
        onPopOutChat: function() {
            var settings = this.getWidgetSettings(), chatModel = this.getChatModel(), dataController = this.getDataController();
            this.getChatModel().set("poppedOut", !0), this.disable(), dataController.connectionInfo.persistLocalStorage(), 
            window.openedWindow = window.open(this.settings.get("pureServerUrl") + "/VisitorWidget/ChatWindow" + "?widgetId=" + settings.get("widgetId") + "&userId=" + dataController.connectionInfo.get("userId") + "&displayName=" + dataController.connectionInfo.get("visitorName") + "&authToken=" + dataController.connectionInfo.get("authToken") + "&roomId=" + dataController.connectionInfo.get("roomId") + "&chatId=" + dataController.connectionInfo.get("chatId") + "&origin=" + encodeURIComponent(chatModel.get("origin")), "purechatwindow", "menubar=no, location=no, resizable=yes, scrollbars=no, status=no, width=480, height=640");
        }
    }), purechatApp.module("Controllers.States", function(States, app) {
        States.PCStateInitializing = PCWidgetState.extend({
            stateSettings: {
                UiVisiblity: {}
            },
            onEnter: function() {
                PCWidgetState.prototype.onEnter.apply(this, arguments), this.getWidgetView().setTitle(this.getResource("title_initial_open"));
                var inRoom = this.getDataController().checkInRoom();
                inRoom ? this.getChatModel().set("state", app.Constants.WidgetStates.Activating) : this.getChatModel().set("state", app.Constants.WidgetStates.Inactive);
            }
        });
    }, purechatApp.Models), purechatApp.module("Controllers.States", function(States, app) {
        States.PCStateInactive = PCWidgetState.extend({
            stateSettings: {
                UiVisiblity: {}
            },
            onEnter: function() {
                PCWidgetState.prototype.onEnter.apply(this, arguments);
                var self = this, widgetSettings = self.getWidgetSettings(), doneFnc = function(result) {
                    if (self.getChatModel().set("operatorsAvailable", result.available), result.available) {
                        self.getWidgetView().onShow(), self.getWidgetView().setTitle(self.getResource("title_initial_open"));
                        var model = new backbone.Model({
                            AskForName: self.getWidgetSettings().get("AskForName"),
                            AskForEmail: self.getWidgetSettings().get("AskForEmail"),
                            AskForQuestion: self.getWidgetSettings().get("AskForQuestion")
                        });
                        self.chatForm = new purechatApp.Views.StartChatForm({
                            rm: self.getResources(),
                            model: model,
                            settings: self.options
                        }), model.on("formSubmit", function(data) {
                            data.origin = self.chatModel.get("origin"), self.getDataController().startChat(data).done(function(chatConnectionInfo) {
                                purechatApp.Utils.GaEvent(widgetSettings, "GaTrackingChat", "GAChatEvent"), self.getWidgetView().$el.find(".purechat-init-form").find(".general-error").text("").hide(), 
                                self.status.chatInfo = chatConnectionInfo, self.status.initialData = data, self.getChatModel().set("visitorName", data.visitorName), 
                                self.getChatModel().set("visitorEmail", data.visitorEmail), self.getChatModel().set("visitorQuestion", data.visitorQuestion), 
                                self.getChatModel().set("roomId", chatConnectionInfo.get("roomId")), self.getChatModel().set("userId", chatConnectionInfo.get("userId")), 
                                self.getChatModel().set("authToken", chatConnectionInfo.get("authToken")), self.getChatModel().set("chatId", chatConnectionInfo.get("chatId")), 
                                self.getChatModel().set("state", app.Constants.WidgetStates.Chatting), self.getDataController().connectionInfo.persistLocalStorage();
                            }).fail(function() {
                                var widgetView = self.getWidgetView();
                                widgetView.$el.find(".purechat-init-form").find(".general-error").text("Unable to start chat. Please try again").show();
                            });
                        }), self.getWidgetView().content.show(self.chatForm), self.listenTo(self.getChatModel(), "change:operatorsAvailable", function(model, available) {
                            available || self.getChatModel().set("state", app.Constants.WidgetStates.Unavailable);
                        }), (self.widgetView.model.get("expanded") || 0 == self.getWidgetSettings().get("UnavailableBehavior")) && (window._pcDisableAvailabilityPings || self.startAvailabilityPolling());
                    } else self.getChatModel().set("state", app.Constants.WidgetStates.Unavailable);
                };
                this.settings.get("IPIsBanned") ? doneFnc({
                    available: !this.settings.get("IPIsBanned"),
                    reason: "NoOperators"
                }) : self.getDataController().checkChatAvailable().done(doneFnc);
            },
            onExpanded: function() {
                this.startAvailabilityPolling();
            },
            onCollapsed: function() {
                0 != this.getWidgetSettings().get("UnavailableBehavior") && this.stopAvailabilityPolling();
            }
        });
    }, purechatApp.Models), purechatApp.module("Controllers.States", function(States, app) {
        States.PCStateActivating = PCWidgetState.extend({
            stateSettings: {
                UiVisiblity: {}
            },
            onEnter: function() {
                var self = this;
                PCWidgetState.prototype.onEnter.apply(this, arguments);
                var m = new backbone.Model({
                    userName: self.getChatModel().get("visitorName")
                }), connectingView = new purechatApp.Views.ChatConnectingView({
                    rm: this.getResources(),
                    model: m
                });
                this.getWidgetView().content.show(connectingView), this.getDataController().connectToChatServer().done(function() {
                    self.getChatModel().set("state", app.Constants.WidgetStates.Chatting);
                }).fail(function() {
                    self.getDataController().connectionInfo.clearLocalStorage(), self.getChatModel().set("state", app.Constants.WidgetStates.Inactive);
                });
            }
        });
    }, purechatApp.Models), purechatApp.module("Controllers.States", function(States, app, Backbone, Marionette, $) {
        States.PCStateChatting = PCWidgetState.extend({
            stateSettings: {
                UiVisiblity: {
                    popoutButton: !0,
                    closeButton: !0,
                    requeueButton: !0,
                    cannedResponsesButton: !0
                }
            },
            initialize: function() {
                PCWidgetState.prototype.initialize.apply(this, arguments), this.typing = {}, this.isUserAlone = !0, 
                this.mobileAnimationInterval = null;
            },
            onEnter: function() {
                PCWidgetState.prototype.onEnter.apply(this, arguments);
                var self = this;
                self.getWidgetView().$el.removeClass("purechat-button-hidden");
                var m = new backbone.Model({
                    userName: self.getChatModel().get("visitorName")
                }), connectingView = new purechatApp.Views.ChatConnectingView({
                    rm: this.getResources(),
                    model: m
                });
                self.messageView = new purechatApp.Views.MessageListView({
                    rm: this.getResources(),
                    model: self.getChatModel(),
                    collection: self.getChatModel().get("messages"),
                    settings: self.getWidgetSettings()
                }), self.messageView.render(), self.getWidgetView().content.show(connectingView), 
                self.getDataController().connectToChatServer(this).done(function() {
                    self.chatModel.get("visitorQuestion") && self.getDataController().newMessage(self.chatModel.get("visitorQuestion")), 
                    self.chatModel.get("isOperator") || "undefined" != typeof self.chatModel.get("operators") && 0 != self.chatModel.get("operators").length || self.chatModel.get("messages").add({
                        type: "note",
                        message: self.getResource("chat_startedMessage")
                    }), self.messageView.on("newMessage", function(message) {
                        self.getDataController().newMessage(message);
                    }), self.listenTo(self.messageView, "typingChange", function(typing) {
                        self.getDataController().setTypingIndicator(typing);
                    }), self.getWidgetView().content.show(self.messageView), self.getWidgetView().onShow(), 
                    self.getWidgetView().focusInput(), self.getDataController().sendRoomHistory(), self.getViewController().trigger("stateChanged", app.Constants.WidgetStates.Chatting), 
                    self.settings.get("RequestFromMobileDevice") && self.settings.get("AllowWidgetOnMobile") && ($(window).trigger("resize.ResizeChatContent"), 
                    self.getWidgetView().$el.find(".purechat-send-form-message").off("blur.ResizeWindow").on("blur.ResizeWindow", function() {
                        $(window).trigger("resize.ResizeChatContent");
                    }), self.options.get("isDirectAccess") && $("div.direct-container").find(".direct-container-header").css("display", "none"));
                }).fail(function() {
                    self.getDataController().connectionInfo.clearLocalStorage(), self.getChatModel().set("state", app.Constants.WidgetStates.Inactive);
                });
            },
            onExit: function() {
                this.unbindEvents && this.unbindEvents();
            },
            onCloseChat: function() {
                var self = this, onCloseFnc = function(context) {
                    context.getDataController().closeChat().done(function() {
                        context.getChatModel().set("state", app.Constants.WidgetStates.Closed);
                    }).fail(function() {
                        alert("fail");
                    });
                }, confirmModal = self.getWidgetView().$el.find(".purechat-confirm-close-modal"), modalOverlay = self.getWidgetView().$el.find(".purchat-confirm-close-modal-overlay");
                self.options.get("RequestFromMobileDevice") && self.options.get("AllowWidgetOnMobile") ? (confirmModal.css({
                    display: "block"
                }), modalOverlay.css({
                    display: "block"
                }), confirmModal.find(".modal-button-bar .btn").off("click.PerformModalAction").on("click.PerformModalAction", function() {
                    var sender = $(this);
                    sender.hasClass("close-chat") && onCloseFnc(self), confirmModal.css({
                        display: "none"
                    }), modalOverlay.css({
                        display: "none"
                    });
                })) : onCloseFnc(self);
            },
            onRequeueChat: function() {
                this.getViewController().triggerMethod("removeWidget");
            },
            onExpanded: function() {
                this.messageView.scrollToTop();
            },
            flashMobileNotificationIcon: function() {
                var self = this;
                if (this.settings.get("RequestFromMobileDevice") && this.settings.get("AllowWidgetOnMobile") && "number" != typeof this.mobileAnimationInterval) {
                    var elem = this.getWidgetView().$el, triggerElems = elem.find('*[data-trigger="expand"]').filter(":visible");
                    if (triggerElems.length > 0) {
                        var visibleIcon = elem.find(".purechat-title-image-out-of-way-hilight").filter(":visible");
                        visibleIcon.addClass("flash");
                        var isFlashing = !0;
                        $(".purechat-widget .purechat-widget-header, .purechat-window .purechat-widget-header, .purechat-widget .purechat-expanded, .purechat-widget .purechat-collapsed-outer, .purechat-widget .purechat-expanded .purechat-widget-inner, .purechat-widget .purechat-collapsed-outer .purechat-widget-inner").addClass("no-background"), 
                        this.mobileAnimationInterval = setInterval(function() {
                            isFlashing ? (visibleIcon.removeClass("flash"), isFlashing = !1) : (visibleIcon.addClass("flash"), 
                            isFlashing = !0);
                        }, 1e3), triggerElems.off("click.StopNotification").on("click.StopNotification", function() {
                            self.mobileAnimationInterval = clearInterval(self.mobileAnimationInterval), visibleIcon.removeClass("flash");
                        });
                    }
                }
            },
            onMessage: function(userId, userDisplayName, roomId, roomDisplayName, time, message, isHistory) {
                if (this.chatModel.get("isOperator") && (notifier.notify("New message!"), !isHistory)) {
                    var event = null;
                    try {
                        event = new Event("PlayNotificationSound");
                    } catch (ex) {
                        event = document.createEvent("CustomEvent"), event.initCustomEvent("PlayNotificationSound", !1, !1, {
                            CanPlay: !0
                        });
                    }
                    document.dispatchEvent(event);
                }
                this.chatModel.get("messages").add({
                    type: "message",
                    message: message,
                    userName: userDisplayName,
                    myMessage: userId == this.chatModel.get("userId")
                }), this.chatModel.get("userId") != userId && 0 == this.chatModel.get("isOperator") && 1 == this.chatModel.get("isWidget") && 0 == this.chatModel.get("expanded") && 0 == isHistory && this.getWidgetView().flashNotification(message), 
                !this.isUserAlone || this.chatModel.get("isOperator") || isHistory || message == this.chatModel.get("Question") || this.chatModel.get("messages").add({
                    type: "note",
                    message: this.getResource("chat_noOperatorMessage")
                }), this.messageView.scrollToTop(), this.flashMobileNotificationIcon();
            },
            onTyping: function(userId, userDisplayName, roomId, roomDisplayName, isTyping) {
                this.messageView.typing(userId, userDisplayName, isTyping), this.messageView.scrollToTop();
            },
            onRoomDestroyed: function() {
                this.chatModel.set("state", app.Constants.WidgetStates.Closed);
            },
            onJoined: function(userId, userDisplayName) {
                (this.chatModel.get("isOperator") || userId != this.chatModel.get("userId")) && this.chatModel.get("messages").add({
                    type: "note",
                    important: !0,
                    message: this.getResource("chat_joinMessage", {
                        displayName: userDisplayName
                    })
                }), userId != this.chatModel.get("userId") && (this.messageView.scrollToTop(), this.isUserAlone = !1, 
                this.chatModel.get("operators").add({
                    userDisplayName: userDisplayName,
                    userId: userId
                }), this.chatModel.get("operators").length > 0 ? this.chatModel.get("isOperator") || this.getWidgetView().setTitle(this.getResource("chat_nowChattingWith", {
                    chatUserNames: this.chatModel.chatUserNames()
                })) : this.isUserAlone = !0);
            },
            onLeft: function(userId, userDisplayName) {
                (this.chatModel.get("isOperator") || userId != this.chatModel.get("userId")) && this.chatModel.get("messages").add({
                    type: "note",
                    message: this.getResource("chat_leftMessage", {
                        displayName: userDisplayName
                    })
                }), userId != this.chatModel.get("userId") && (this.messageView.scrollToTop(), this.chatModel.get("operators").remove(userId), 
                this.chatModel.get("isOperator") || this.getWidgetView().setTitle(this.getResource("chat_nowChattingWith", {
                    chatUserNames: this.chatModel.chatUserNames()
                })));
            }
        });
    }, purechatApp.Models), purechatApp.module("Controllers.States", function(States, app, Backbone, Marionette, $) {
        States.PCStateClosed = PCWidgetState.extend({
            stateSettings: {
                UiVisiblity: {
                    restartButton: !0,
                    removeWidgetButton: !0
                }
            },
            handleRoomClose: function(response, room) {
                var self = this, visitorIPAddress = "undefined" != typeof response && null !== response && "string" == typeof response.visitorIPAddress ? response.visitorIPAddress : "", visitorIPAddressId = "undefined" != typeof response && null !== response && response.Id ? response.Id : -1, roomName = "undefined" != typeof room && null !== room && "string" == typeof room.name ? room.name : "", visitorReferer = "undefined" != typeof room && null !== room && "string" === room.visitorReferer ? room.visitorReferer : "", roomId = "undefined" != typeof room && null !== room && "undefined" != typeof room.id ? room.id : "";
                self.options.get("isOperator") && room.roomType && room.roomType == PureChat.enums.roomType.visitor && $.ajax({
                    url: "/OnTime/WidgetIsEnabled",
                    type: "GET",
                    data: {
                        chatId: self.getDataController().connectionInfo.get("roomId")
                    }
                }).done(function(result) {
                    result.IsEnabled && self.getWidgetView().ui.exportToOntimeButton.show();
                }), self.getWidgetView().$el.removeClass("purechat-button-hidden"), self.getWidgetView().onShow(), 
                self.getDataController().connectionInfo.clearLocalStorage(), self.getWidgetView().setTitle(self.getResource("title_chatClosed"));
                var m = new backbone.Model({
                    isOperator: self.chatModel.get("isOperator"),
                    roomId: roomId,
                    visitorIPAddress: visitorIPAddress,
                    visitorIPAddressId: visitorIPAddressId,
                    visitorName: roomName,
                    visitorReferrer: visitorReferer
                });
                self.chatModel.get("isOperator") ? m.set({
                    GoogId: "",
                    GaTrackingTab: !1,
                    GaTrackingChat: !1,
                    GaTrackingThumbs: !1,
                    GAUpThumbEvent: !1,
                    GADownThumbEvent: !1,
                    GAEventCategory: !1,
                    UsingGa: !1
                }) : m.set({
                    GoogId: self.getWidgetSettings().GoogId,
                    GaTrackingTab: self.getWidgetSettings().GaTrackingTab,
                    GaTrackingChat: self.getWidgetSettings().GaTrackingChat,
                    GaTrackingThumbs: self.getWidgetSettings().GaTrackingThumbs,
                    GAUpThumbEvent: self.getWidgetSettings().GAUpThumbEvent,
                    GADownThumbEvent: self.getWidgetSettings().GADownThumbEvent,
                    GAEventCategory: self.getWidgetSettings().GAEventCategory,
                    UsingGa: self.getWidgetSettings().UsingGa
                });
                var closeMessage = new purechatApp.Views.ClosedMessage({
                    rm: self.getResources(),
                    model: m,
                    settings: self.options
                });
                self.listenTo(closeMessage, "chat:rated", function(up) {
                    self.getDataController().rateChat(up), 1 === self.rating ? purechatApp.Utils.GaEvent(self.getWidgetSettings(), "GaTrackingThumbs", "GAUpThumbEvent") : purechatApp.Utils.GaEvent(self.getWidgetSettings(), "GaTrackingThumbs", "GADownThumbEvent");
                }), self.getWidgetView().content.show(closeMessage), self.options.get("isDirectAccess") && $("div.direct-container").find(".direct-container-header").css("display", "block");
            },
            onEnter: function() {
                PCWidgetState.prototype.onEnter.apply(this, arguments);
                var self = this, room = this.options.get("room") || {};
                self.chatModel.get("isOperator") ? isNaN(parseInt(room.id)) ? self.handleRoomClose.call(self, null, room) : $.ajax({
                    type: "get",
                    dataType: "json",
                    url: "/Widget/GetVisitorIPAddress",
                    data: {
                        chatId: room.id || -1
                    }
                }).done(function(response) {
                    self.handleRoomClose.call(self, response, room);
                }) : self.handleRoomClose.call(self, null, null);
            },
            onRemoveWidget: function() {
                this.getViewController().triggerMethod("removeWidget");
            },
            onExportToOntime: function() {
                OnTimeExportModal(this.getDataController().connectionInfo.get("roomId"), "norefresh");
            },
            onRestartChat: function() {
                var self = this;
                self.getDataController().restartChat().done(function() {
                    self.getChatModel(), self.getChatModel().get("operators").reset(), self.getChatModel().get("messages").reset(), 
                    self.getDataController().connectionInfo.clearLocalStorage(), self.getChatModel().set("state", app.Constants.WidgetStates.Inactive);
                }).fail(function() {
                    alert("fail");
                });
            }
        });
    }, purechatApp.Models), purechatApp.module("Controllers.States", function(States, app, Backbone, Marionette, $) {
        States.PCStateUnavailable = PCWidgetState.extend({
            onEnter: function() {
                PCWidgetState.prototype.onEnter.apply(this, arguments);
                var self = this, behavior = this.settings.get("IPIsBanned") ? 1 : self.options.get("UnavailableBehavior");
                if (0 == behavior) self.getWidgetView().onHide(); else if (1 == behavior) self.getWidgetView().onShow(), 
                self.getWidgetView().setTitle(this.getResource("title_noOperators")), $(self.getWidgetView().content.el).html('<div class="purechat-closedmessage-container">' + app.Utils.linkify(this.getResource("error_noOperators")) + "</div>"); else {
                    self.getWidgetView().onShow(), self.getWidgetView().setTitle(this.getResource("title_noOperators"));
                    var model = new backbone.Model({
                        AskForName: !0,
                        AskForEmail: !0,
                        AskForQuestion: !0,
                        EmailForm: !0
                    });
                    model.on("formSubmit", function(data) {
                        var form = $(self.getWidgetView().el).find(".purechat-form.purechat-email-form");
                        self.getDataController().submitEmailForm(data).done(function(result) {
                            if (result.success) {
                                var emailSent = new purechatApp.Views.EmailSent({
                                    rm: self.getResources(),
                                    model: model
                                });
                                self.getWidgetView().content.show(emailSent), self.getWidgetView().ui.restartButton.show();
                            } else form.find(".purechat-email-error").show();
                        }).fail(function() {});
                    });
                    var emailForm = new purechatApp.Views.StartChatForm({
                        rm: self.getResources(),
                        model: model,
                        settings: this.options
                    });
                    self.getWidgetView().content.show(emailForm);
                }
                self.listenTo(self.getChatModel(), "change:operatorsAvailable", function(model, available) {
                    available && self.getChatModel().set("state", app.Constants.WidgetStates.Inactive);
                });
                var isHideWidget = 0 == self.getWidgetSettings().get("UnavailableBehavior");
                (self.widgetView.model.get("expanded") && !isHideWidget || isHideWidget && self.getChatModel().get("operatorsAvailable")) && (window._pcDisableAvailabilityPings || self.startAvailabilityPolling());
            },
            onExpanded: function() {
                this.startAvailabilityPolling();
            },
            onCollapsed: function() {
                0 != this.getWidgetSettings().get("UnavailableBehavior") && this.stopAvailabilityPolling();
            }
        });
    }, purechatApp.Models), purechatApp.module("Controllers", function(Controllers, app, Backbone, Marionette, $) {
        var BaseDataController = Marionette.Controller.extend({
            initialize: function() {
                this.connectionInfo = new purechatApp.Models.ChatConnection(), this.options.connectionInfo && this.connectionInfo.set(this.options.connectionInfo);
            },
            loadWidgetSettings: function() {
                var self = this, d = $.Deferred();
                return this.getWidgetSettings().done(function(settings) {
                    self.widgetSettings = settings, d.resolve();
                }).fail(function() {
                    d.reject();
                }), d;
            }
        }), TestDataController = BaseDataController.extend({
            initialize: function() {
                BaseDataController.prototype.initialize.apply(this, arguments), this.chatAvailable = !0;
            },
            startChat: function() {
                return this.connectionInfo.set("userId", 1), this.connectionInfo.set("authToken", "adsfasfdsdf"), 
                this.connectionInfo.set("roomId", 1), $.Deferred().resolve(this.connectionInfo);
            },
            closeChat: function() {
                return $.Deferred().resolve();
            },
            restartChat: function() {
                return $.Deferred().resolve();
            },
            connectToChatServer: function(handler) {
                var d = $.Deferred();
                return this.handler = handler, setTimeout(function() {
                    d.resolve();
                }, 2e3), d;
            },
            sendRoomHistory: function() {},
            checkInRoom: function() {
                return !1;
            },
            newMessage: function(message) {
                Marionette.getOption(this, "chatModel").get("messages").add({
                    type: "message",
                    message: message,
                    myMessage: !0,
                    userName: "Chad"
                });
            },
            checkChatAvailable: function() {
                var self = this, d = $.Deferred();
                return setTimeout(function() {
                    d.resolve({
                        available: self.chatAvailable
                    });
                }, 1), d;
            },
            getWidgetSettings: function() {
                var widgetSettings = {
                    Version: 27288,
                    WidgetWording: {
                        Id: 721,
                        AccountId: 0,
                        Title: "Chat with us test."
                    },
                    AccountId: 1,
                    ThemeName: "Dark",
                    Position: 2,
                    WidgetType: 1,
                    UnavailableBehavior: 2,
                    AskForName: !0,
                    AskForEmail: !1,
                    AskForQuestion: !0,
                    ForcePopout: !1,
                    StringResources: {
                        chat_identifyFailed: "Failed to connect to PureChat!",
                        greeting: "Hello",
                        closed_message: "Thanks for chatting. Please rate how you feel about the chat session:",
                        closed_opMessage: "This chat has been closed.",
                        chat_joinMessage: "{displayName} has joined the chat!",
                        placeholder_email: "Email",
                        chat_connecting: "Connecting you to the chat now...",
                        chat_nowChattingWith: "Chatting with {chatUserNames}.",
                        label_pressToBegin: "Press the button below to begin!",
                        error_enterEmail: "Please enter an email address.",
                        closed_downloadTrans: "Download chat transcript",
                        title_noOperators: "No Operators Available",
                        error_enterQuestion: "Please enter a question",
                        noOperators_email_message: "There are currently no operators available, but feel free to send us an email!",
                        poweredby: "Powered by",
                        chat_noOperatorMessage: "An operator has not yet connected. Don't worry, an operator will be by shortly! When they connect, they'll see all the messages you've sent so far.",
                        chat_typing: "{displayName} is typing",
                        title_chatClosed: "Chat Closed",
                        closed_ratingThanks: "Thanks for your rating!",
                        placeholder_name: "Name",
                        title_initial: "Chat with us test.",
                        placeholder_question: "Enter your Question",
                        label_initial_label: "Introductory Text",
                        title_initial_label: "Widget Title",
                        error_noOperators: "Sorry, no operators are currently available",
                        label_initial: "Enter your info below to begin.",
                        error_noOperators_label: "No Operators Available",
                        button_startChat: "Send Chat Request",
                        label_initial_helptext: "This is the introductory text that will be displayed after the user clicks on the PureChat widget.",
                        button_sendEmail: "Send Email",
                        chat_startedMessage: "An operator will be right with you! Feel free to hide this box and navigate around the site.",
                        chat_leftMessage: "{displayName} has left the chat!",
                        chat_connectionFailed: "Failed to connect to PureChat!",
                        button_startNewChat: "Start a new chat",
                        error_noOperators_helptext: "This is the message that will be displayed when Hide Widget When Unavailable is unchecked, and there are no operators available.",
                        error_enterName: "Please enter a name."
                    },
                    GoogId: "UA-XXXX-Y",
                    GaTrackingTab: !1,
                    GaTrackingChat: !1,
                    GaTrackingThumbs: !1,
                    GATabEvent: "Tab Opened",
                    GAChatEvent: "Chat Started",
                    GAUpThumbEvent: "Thumbs Up",
                    GADownThumbEvent: "Thumbs Down",
                    GAEventCategory: "PureChat widget",
                    UsingGa: !1,
                    ChatServerUrl: "http://chad.purechat.com:8000",
                    DisplayWidgetAnimation: "bounceInDown",
                    CollapsedWidgetImageUrl: "http://chad.purechat.com/Content/images/widgetSamples/operator1.png"
                };
                return $.Deferred().resolve(widgetSettings);
            },
            rateChat: function() {
                var d = $.Deferred();
                return d.resolve();
            },
            setTypingIndicator: function() {},
            bindEvents: function(handler) {
                this.handler = handler;
            }
        }), DemoDataController = TestDataController.extend({
            getWidgetSettings: function() {
                var d = $.Deferred();
                return window.parent && window.parent.currentWidgetSettings ? (window.parent.currentWidgetSettings.ForcePopout = !1, 
                d.resolve(window.parent.currentWidgetSettings)) : $.ajax({
                    url: Marionette.getOption(this, "pureServerUrl") + "/VisitorWidget/Widget/" + Marionette.getOption(this, "widgetId") + window.location.search,
                    dataType: "jsonp",
                    timeout: 2e4,
                    success: function(response) {
                        var widgetSettings = {
                            success: !0,
                            version: response.Version,
                            accountId: response.AccountId,
                            themeName: response.ThemeName,
                            position: response.Position,
                            widgetType: response.WidgetType,
                            widgetConfig: response,
                            resources: response.StringResources,
                            googleAnalytics: response.GoogleAnalytics,
                            chatServerUrl: response.ChatServerUrl
                        };
                        d.resolve(widgetSettings);
                    },
                    error: function() {
                        d.reject();
                    }
                }), d.promise();
            }
        }), PCDataController = BaseDataController.extend({
            closeChat: function() {
                return this.chatServerConnection.destroyself(), $.Deferred().resolve();
            },
            leaveChat: function() {
                return this.chatServerConnection.leave(this.connectionInfo.get("roomId")), $.Deferred().resolve();
            },
            restartChat: function() {
                return $.Deferred().resolve();
            },
            newMessage: function(message) {
                return "" == $.trim(message) ? !1 : "" == $.trim(message) ? !1 : (this.chatServerConnection.sendmessage(message, this.connectionInfo.get("roomId")), 
                void 0);
            },
            checkChatAvailable: function(accountId) {
                return accountId = accountId || this.widgetSettings.accountId, window._checkChatAvailableDeferred || (window._checkChatAvailableDeferred = $.Deferred(), 
                $.ajax({
                    url: Marionette.getOption(this, "pureServerUrl") + "/VisitorWidget/ChatAvailable",
                    data: {
                        accountId: accountId
                    },
                    dataType: "jsonp",
                    timeout: 2e4,
                    jsonpCallback: "_PCcb",
                    error: function() {
                        window._checkChatAvailableDeferred.reject(), window._checkChatAvailableDeferred = null;
                    }
                })), window._checkChatAvailableDeferred.promise();
            },
            getWidgetSettings: function() {
                var self = this, hasAllSettings = "boolean" == typeof Marionette.getOption(this, "hasAllSettings") ? Marionette.getOption(this, "hasAllSettings") : !1, d = $.Deferred();
                return hasAllSettings ? d.resolve({
                    success: !0,
                    version: Marionette.getOption(this, "Version"),
                    accountId: Marionette.getOption(this, "AccountId"),
                    themeName: Marionette.getOption(this, "ThemeName"),
                    position: Marionette.getOption(this, "Position"),
                    widgetType: Marionette.getOption(this, "WidgetType"),
                    widgetConfig: this.options,
                    resources: Marionette.getOption(this, "StringResources"),
                    googleAnalytics: Marionette.getOption(this, "GoogleAnalytics"),
                    chatServerUrl: Marionette.getOption(this, "ChatServerUrl")
                }) : $.ajax({
                    url: Marionette.getOption(this, "pureServerUrl") + "/VisitorWidget/Widget/" + Marionette.getOption(this, "widgetId"),
                    dataType: "jsonp",
                    timeout: 2e4,
                    success: function(response) {
                        if (response.Valid) {
                            0 == response.UnavailableBehavior && self.options.isDirectAccess && (response.UnavailableBehavior = 1);
                            var widgetSettings = {
                                success: !0,
                                version: response.Version,
                                accountId: response.AccountId,
                                themeName: response.ThemeName,
                                position: response.Position,
                                widgetType: response.WidgetType,
                                widgetConfig: response,
                                resources: response.StringResources,
                                googleAnalytics: response.GoogleAnalytics,
                                chatServerUrl: response.ChatServerUrl
                            };
                            d.resolve(widgetSettings);
                        }
                    },
                    error: function() {
                        d.reject();
                    }
                }), d.promise();
            },
            submitEmailForm: function(data) {
                data.widgetId = Marionette.getOption(this, "widgetId");
                var d = $.Deferred();
                return $.ajax({
                    url: Marionette.getOption(this, "pureServerUrl") + "/VisitorWidget/SendEmail",
                    dataType: "jsonp",
                    type: "GET",
                    data: data
                }).done(function(result) {
                    d.resolve(result);
                }).fail(function() {}), d.promise();
            },
            startChat: function(data) {
                var self = this, d = $.Deferred(), escapedUserDisplayName = data.visitorName.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), url = Marionette.getOption(this, "pureServerUrl") + "/VisitorWidget/Chat?visitorName=" + encodeURIComponent(escapedUserDisplayName) + "&widgetId=" + Marionette.getOption(this, "widgetId") + "&origin=" + encodeURIComponent(data.origin || "unknown");
                return data.visitorEmail && (url += "&visitorEmail=" + encodeURIComponent(data.visitorEmail)), 
                $.ajax({
                    url: url,
                    dataType: "jsonp",
                    timeout: 2e4,
                    success: function(response) {
                        response.user && response.room ? (self.connectionInfo.set({
                            userId: response.user.id,
                            authToken: response.user.authToken,
                            roomId: response.room.id,
                            chatId: response.chat.id
                        }), self.widgetSettings.chatServerUrl = response.server.url, d.resolve(self.connectionInfo)) : ("undefined" != typeof connectingView && null !== connectingView && connectingView.showErrorMessage(response.message), 
                        d.reject(response.message)), d.resolve();
                    },
                    error: function() {}
                }), d;
            },
            connectToChatServer: function(bindTo) {
                function onIdentify(success) {
                    socketConnected = !0, 0 == success ? d.reject() : d.resolve();
                }
                var socketConnected, d = $.Deferred(), accountId = accountId || this.widgetSettings.accountId;
                return this.chatServerConnection ? (this.chatServerConnection.identify(this.connectionInfo.get("userId"), accountId, this.connectionInfo.get("authToken"), onIdentify, "boolean" == typeof this.options.connectionSettings.poppedOut ? this.options.connectionSettings.poppedOut : !1), 
                bindTo && this.bindEvents(bindTo)) : (this.chatServerConnection = new PureChat(this.widgetSettings.chatServerUrl + "/client", this.connectionInfo.get("userId"), accountId, this.connectionInfo.get("authToken"), onIdentify, function() {
                    socketConnected || d.reject();
                }, null, "boolean" == typeof this.options.connectionSettings.poppedOut ? this.options.connectionSettings.poppedOut : !1), 
                bindTo && this.bindEvents(bindTo)), d;
            },
            setTypingIndicator: function(isTyping) {
                this.chatServerConnection.sendtyping(this.connectionInfo.get("roomId"), isTyping);
            },
            rateChat: function(rate) {
                var d = $.Deferred();
                return $.ajax({
                    url: Marionette.getOption(this, "pureServerUrl") + "/VisitorWidget/Rate",
                    dataType: "jsonp",
                    data: {
                        chatId: this.connectionInfo.get("chatId"),
                        rating: rate,
                        authToken: this.connectionInfo.get("authToken")
                    }
                }).done(function() {}).fail(function() {}), d.promise();
            },
            checkInRoom: function() {
                return this.connectionInfo.isInChat() || this.connectionInfo.loadFromLocalStorage().isInChat();
            },
            sendRoomHistory: function(roomId) {
                this.chatServerConnection.sendroomhistory(roomId || this.connectionInfo.get("roomId"));
            },
            bindEvents: function(handler) {
                var self = this;
                self.handler = handler;
                var eventHandlers = {
                    message: function(userId, userDisplayName, roomId) {
                        self.connectionInfo.get("roomId") == roomId && handler.onMessage.apply(handler, arguments);
                    },
                    joined: function(userId, userDisplayName, roomId) {
                        self.connectionInfo.get("roomId") == roomId && handler.onJoined.apply(handler, arguments);
                    },
                    left: function(userId, userDisplayName, roomId) {
                        self.connectionInfo.get("roomId") == roomId && handler.onLeft.apply(handler, arguments);
                    },
                    roomdestroyed: function(roomId) {
                        self.connectionInfo.get("roomId") == roomId && handler.onRoomDestroyed.apply(handler, arguments);
                    },
                    typing: function(userId, userDisplayName, roomId) {
                        self.connectionInfo.get("userId") != userId && self.connectionInfo.get("roomId") == roomId && handler.onTyping.apply(handler, arguments);
                    }
                };
                self.handler.unbindEvents = function() {
                    self.chatServerConnection.off(eventHandlers);
                }, self.chatServerConnection.on(eventHandlers);
            }
        }), DashboardDataController = PCDataController.extend({
            initialize: function(options) {
                BaseDataController.prototype.initialize.apply(this, arguments), this.chatServerConnection = options.chatServerConnection;
            },
            closeChat: function() {
                return this.chatServerConnection.closeroom(this.connectionInfo.get("roomId")), $.Deferred().resolve();
            },
            connectToChatServer: function(bindTo) {
                var d = $.Deferred();
                return bindTo && this.bindEvents(bindTo), d.resolve();
            },
            getWidgetSettings: function() {
                var d = $.Deferred();
                return $.ajax({
                    url: "/User/DashboardSettings",
                    dataType: "json",
                    type: "post",
                    success: function(data) {
                        var widgetSettings = {
                            success: !0,
                            authToken: data.authToken,
                            version: "",
                            accountId: data.accountId,
                            userId: data.userId,
                            themeName: "Operator",
                            position: null,
                            widgetType: null,
                            widgetConfig: data,
                            resources: {},
                            googleAnalytics: null,
                            chatServerUrl: data.chatServerUrl
                        };
                        d.resolve(widgetSettings);
                    }
                }), d.promise();
            },
            checkInRoom: function() {
                return this.connectionInfo.get("roomId") ? !0 : !1;
            }
        });
        Controllers.DemoDataController = DemoDataController, Controllers.DashboardDataController = DashboardDataController, 
        Controllers.PCDataController = PCDataController;
    }, purechatApp.Models);
    var MESSAGE_DISPLAY_WIDTH = 40;
    purechatApp.module("Controllers", function(Controllers, app, Backbone, Marionette, $) {
        function getStartTime(time, timeElapsed) {
            var now = new Date(), utcNowDate = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds()), differenceSeconds = utcNowDate.getTime() / 1e3 - time, newTime = parseInt(time, 10) - (parseInt(timeElapsed, 10) - differenceSeconds);
            return 1e3 * newTime;
        }
        var PureChatController = Marionette.Controller.extend({
            setChatModel: function(model) {
                this.chatModel = model;
            },
            getChatModel: function() {
                return this.chatModel;
            },
            setDataController: function(dc) {
                this.dc = dc;
            },
            getDataController: function() {
                return this.dc;
            },
            popoutChatOnExpand: function(dataController, settings, chatModel, state) {
                chatModel.set("poppedOut", !0), state.disable(), dataController.connectionInfo.persistLocalStorage();
                var url = settings.pureServerUrl + "/VisitorWidget/ChatWindow" + "?widgetId=" + settings.widgetId + "&userId=" + dataController.connectionInfo.get("userId") + "&displayName=" + dataController.connectionInfo.get("visitorName") + "&authToken=" + dataController.connectionInfo.get("authToken") + "&roomId=" + dataController.connectionInfo.get("roomId") + "&chatId=" + dataController.connectionInfo.get("chatId") + "&origin=" + encodeURIComponent(chatModel.get("origin"));
                window.openedWindow = window.open(url, "purechatwindow", "menubar=no, location=no, resizable=yes, scrollbars=no, status=no, width=480, height=640");
            },
            initialize: function(options) {
                var self = this;
                $.Deferred();
                var chatModel = new purechatApp.Models.Chat({
                    isWidget: options.get("isWidget"),
                    position: options.get("position"),
                    pureServerUrl: options.get("pureServerUrl"),
                    widgetType: app.Constants.WidgetType.Tab,
                    isOperator: options.get("isOperator"),
                    isPoppedOut: options.get("poppedOut"),
                    State: app.Constants.WidgetStates.Inactive,
                    messages: new purechatApp.Models.MessageCollection(),
                    operators: new purechatApp.Models.OperatorCollection(),
                    origin: options.get("origin") || window.location.href,
                    userId: options.get("userId")
                });
                options.get("isDemo") && (chatModel.set("operatorsAvailable", !0), chatModel.set("visitorName", options.get("visitorName")));
                var socketIoLoaded = $.ajax({
                    url: options.get("pureServerUrl") + "/scripts/socket.io.v0.9.16.js",
                    dataType: "script",
                    cache: !0
                }), dcReady = self.setupDataController(options, chatModel);
                $.when(dcReady, socketIoLoaded).done(function() {
                    self.options.set(self.options.get("dataController").widgetSettings.widgetConfig), 
                    self.setupPageActivityTest(), self.rm = self.options, self.options.set(self.getDataController().widgetSettings), 
                    $(".purechat-button-expand").find(".purechat-button-text").text(self.options.getResource("title_initial")), 
                    chatModel.on("change:operatorsAvailable", function(model, available) {
                        var expandButtons = $(".purechat-button-expand");
                        expandButtons.filter(":not(.purechat)").click(function(e) {
                            var dataController = self.getDataController();
                            dataController.options.ForcePopout && !self.chatModel.get("isPoppedOut") || dataController.options.usePrototypeFallback ? self.popoutChatOnExpand(dataController, dataController.options, self.chatModel, self.state) : self.widgetLayout.triggerMethod("expand", {
                                collapse: $(e.target).hasClass("btn-collapse") || $(e.target).hasClass("pc-icon-minus")
                            });
                        }), available ? (expandButtons.addClass("purechat-button-available"), expandButtons.removeClass("purechat-button-unavailable"), 
                        expandButtons.removeClass("purechat-button-hidden"), expandButtons.removeAttr("disabled")) : (0 === self.options.get("UnavailableBehavior") && (expandButtons.removeClass("purechat-button-available"), 
                        expandButtons.addClass("purechat-button-unavailable"), expandButtons.attr("disabled", "disabled")), 
                        expandButtons.each(function() {
                            var hide, next = $(this), hideString = next.attr("HideUnavailable");
                            hide = hideString ? "true" == hideString : 0 === self.options.get("UnavailableBehavior"), 
                            hide && next.addClass("purechat-button-hidden");
                        }));
                    }), self.getDataController().connectionInfo.isInChat() || self.getDataController().connectionInfo.loadFromLocalStorage(), 
                    chatModel.set("userId", self.getDataController().connectionInfo.get("userId")), 
                    self.widgetLayout = new purechatApp.Views.WidgetLayout({
                        rm: self.rm,
                        model: chatModel,
                        widgetSettings: self.options
                    }), self.widgetLayout.render(), self.widgetLayout.onHide(), self.getDataController().connectionInfo.get("disabled") && self.getDataController().connectionInfo.get("roomId") && self.widgetLayout.$el.hide();
                    var styleLoadingComplete = function() {
                        $(options.get("renderInto")).append(self.widgetLayout.$el), self.triggerMethod("rendered"), 
                        self.setChatModel(chatModel), self.options.get("dataController").options.chatModel = self.getChatModel(), 
                        self.listenTo(chatModel, "change:state", self.stateChange), chatModel.set("state", self.options.get("initialState") || app.Constants.WidgetStates.Initializing), 
                        self.listenTo(self.widgetLayout.$el, "change:state", self.stateChange), self.trigger("widget:ready"), 
                        self.widgetLayout.$el.removeClass("hide");
                    };
                    if (self.options.get("isOperator")) styleLoadingComplete(); else {
                        var styleLoaded = !1;
                        self.options.get("BrowserDetails").Browser || "", parseFloat(self.options.get("BrowserDetails").Version || "");
                        var sheet = $('<link rel="stylesheet" href="' + self.options.get("pureServerUrl") + (self.options.get("RequestFromMobileDevice") && self.options.get("AllowWidgetOnMobile") ? "/Content/widgetcss/mobile/" : "/Content/widgetcss/") + (self.options.get("ThemeName") || "operator") + ".less?v=" + self.options.get("version") + '" type="text/css">').appendTo("head"), count = 0, interval = setInterval(function() {
                            (sheet[0].sheet || count >= 150) && (styleLoaded || (styleLoaded = !0, interval = clearInterval(interval), 
                            styleLoadingComplete())), count++;
                        }, 100);
                    }
                }).fail(function() {
                    self.trigger("widget:fail");
                });
            },
            setupDataController: function() {
                var settingsDeferred = this.options.get("dataController").loadWidgetSettings();
                return this.setDataController(this.options.get("dataController")), settingsDeferred;
            },
            onRemoveWidget: function() {
                this.getDataController().leaveChat(), $(this.options.get("renderInto")).remove();
            },
            setupPageActivityTest: function() {
                var self = this, tid = null, lastX = -9999, lastY = -9999;
                self.pageActivity = !1, $(document).mousemove($.throttle(1e4, function(e) {
                    tid && clearTimeout(tid), Math.abs(lastX - e.clientX) <= 2 && Math.abs(lastY - e.clientY) <= 2 || (lastX = e.clientX, 
                    lastY = e.clientY, self.pageActivity = !0, tid = setTimeout(function() {
                        self.pageActivity = !1;
                    }, 45e3));
                }));
            },
            stateChange: function(model, newState) {
                var newState = new app.Controllers.States[newState](this.options);
                this.setState(newState);
            },
            setState: function(newState) {
                var status = {};
                null != this.state && (status = this.state.status, this.state.triggerMethod("exit"), 
                this.state.close()), this.state = newState, this.state.status = status, this.state.setChatModel(this.getChatModel()), 
                this.state.setWidgetView(this.widgetLayout), this.state.setWidgetSettings(this.options), 
                this.state.setResources(this.rm), this.state.setDataController(this.getDataController()), 
                this.state.setViewController(this), this.state.triggerMethod("enter");
            },
            bindGobalCommand: function($el) {
                $el.on("click", "[data-command]", function(e) {
                    e.preventDefault();
                    var $this = $(this), command = $this.data("command"), commandParams = $this.data("command-params");
                    App.execute(command, commandParams);
                });
            },
            showConfirmationDialog: function() {
                return $.Deferred.resolve();
            },
            undelegateEvents: function() {
                return this.$el.off(".delegateEvents" + this.cid), this;
            },
            onClose: function() {}
        }), DashboardChatController = PureChatController.extend({
            onRendered: function() {
                if (this.widgetLayout.setCannedResponses(this.options.get("cannedResponses")), this.options.get("isInvisible") ? this.widgetLayout.setTitle(this.options.get("room").name + " (Eavesdropping)") : this.widgetLayout.setTitle(this.options.get("room").name), 
                this.options.get("room").roomType == PureChat.enums.roomType.visitor) {
                    var refererLink = this.options.get("room").visitorReferer;
                    "Unknown" != refererLink && (refererLink = '<a target="_blank" href="' + refererLink + '">' + refererLink + "</a>");
                    var startTime, referer = $('<div class="chat-referer" title="' + this.options.get("room").visitorReferer + '">' + refererLink + "</div>");
                    startTime = null != this.options.get("room").timeElapsed ? getStartTime(this.options.get("room").time, this.options.get("room").timeElapsed) : room.time;
                    var timer = $('<div class="purechat-start time"></div>');
                    timer.attr("start-time", startTime), this.widgetLayout.$el.find(".purechat-chat-info").append(timer), 
                    this.widgetLayout.$el.find(".purechat-chat-info").append(referer);
                } else {
                    var info = $('<div class="operator-bar">Operator Room</div>');
                    this.widgetLayout.$el.find(".purechat-chat-info").append(info);
                }
                this.widgetLayout.$el.height(widgetHeight), this.widgetLayout.$el.width(widgetWidth), 
                window.$(this.widgetLayout.$el).resizable({
                    alsoResize: ".purechat-window",
                    minHeight: 360,
                    minWidth: 475,
                    maxWidth: 700,
                    stop: function(event, ui) {
                        widgetHeight = ui.size.height, widgetWidth = ui.size.width, $.post("/User/UpdateChatWindowSize", {
                            width: widgetWidth,
                            height: widgetHeight
                        });
                    }
                }), $(this.options.get("renderInto")).fadeIn("slow"), this.widgetLayout.showAdditionalDetails(), 
                this.rm.get("room").roomType != PureChat.enums.roomType.operator && (this.rm.get("room").GeolocationData && 0 != this.rm.get("room").GeolocationData.Latitude && 0 != this.rm.get("room").GeolocationData.Longitude && "function" == typeof window.loadGoogleMapsForWidget ? window.loadGoogleMapsForWidget.call(this.widgetLayout.$el.find(".widget-maps-container"), this.rm.get("room").GeolocationData.Latitude, this.rm.get("room").GeolocationData.Longitude) : this.widgetLayout.$el.find(".widget-maps-container").addClass("hide"));
            },
            showConfirmationDialog: function(confirmation, title) {
                var $d = $.Deferred(), dialog = window.showConfirmationDialog({
                    title: title || "Are you sure?",
                    bodyText: confirmation,
                    onConfirm: function() {
                        $d.resolve(), dialog.modal("hide");
                    }
                });
                return $d;
            }
        });
        Controllers.DashboardChatController = DashboardChatController, Controllers.PureChatController = PureChatController;
    }, purechatApp.Models), PCWidget = function(connectionSettings) {
        connectionSettings.pureServerUrl = connectionSettings.pureServerUrl || "https://www.purechat.com";
        var dataController, dataControllerOptions = {
            test: !1,
            widgetId: connectionSettings.widgetId || connectionSettings.c,
            connectionSettings: connectionSettings,
            isWidget: connectionSettings.isWidget || connectionSettings.f,
            isOperator: void 0 == connectionSettings.d ? !1 : connectionSettings.d,
            pureServerUrl: connectionSettings.pureServerUrl,
            renderInto: $("body")
        };
        window._pcDisableAvailabilityPings = connectionSettings.DisableAvailabilityPings || connectionSettings.IPIsBanned, 
        dataController = dataControllerOptions.test ? new purechatApp.Controllers.TestDataController(dataControllerOptions) : new purechatApp.Controllers.PCDataController($.extend(connectionSettings, dataControllerOptions));
        var usePrototypeFallback = !1, prototypeErrorMessage = "";
        if ("undefined" != typeof Prototype) try {
            var splitVersion = Prototype.Version.split(/\./g);
            splitVersion.length > 0 && (usePrototypeFallback = parseInt(splitVersion[0]) >= 2 ? !1 : parseInt(splitVersion[1]) >= 7 ? !1 : !0);
        } catch (ex) {
            prototypeErrorMessage = ex;
        }
        usePrototypeFallback && (prototypeErrorMessage = "PureChat widgets are not compatible with Prototype.js versions < 1.7. Default widget behavior will popout into a new window"), 
        prototypeErrorMessage.length > 0 && "undefined" != typeof console && null !== console && console.log(prototypeErrorMessage);
        var viewOptions = {
            test: !1,
            pureServerUrl: connectionSettings.pureServerUrl,
            widgetId: connectionSettings.widgetId || connectionSettings.c,
            isWidget: connectionSettings.isWidget || connectionSettings.f,
            isOperator: void 0 == connectionSettings.d ? !1 : connectionSettings.d,
            renderInto: $("body"),
            dataController: dataController,
            usePrototypeFallback: usePrototypeFallback
        };
        viewOptions = $.extend(connectionSettings, viewOptions);
        var c1 = new purechatApp.Controllers.PureChatController(new purechatApp.Models.WidgetSettings(viewOptions));
        return c1;
    };
}({}, function() {
    return this;
}());